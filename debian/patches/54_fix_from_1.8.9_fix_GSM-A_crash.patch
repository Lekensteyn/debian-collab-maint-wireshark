From 94156070f5bdd0fb1102ac97818571af069dbcc1 Mon Sep 17 00:00:00 2001
From: Jeff Morriss <jeff.morriss.ws@gmail.com>
Date: Tue, 16 Jul 2013 18:37:11 +0000
Subject: [PATCH 2/4] Copy over with manual intervention:

  ------------------------------------------------------------------------
  r50672 | morriss | 2013-07-16 13:59:26 -0400 (Tue, 16 Jul 2013) | 8 lines
  Changed paths:
     M /trunk/epan/dissectors/packet-gsm_a_common.c

  Fix the fuzz failure reported in https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=8940 :

  Test whether idx is in range or not (by seeing if it was found in the
  value_string) before using it as an index into any of the elem_var arrays.

  This fuzz failure was in elem_telv() but apply the fix to all the elem_*()
  functions.
  ------------------------------------------------------------------------

svn path=/trunk-1.8/; revision=50675
---
 epan/dissectors/packet-gsm_a_common.c |   96 ++++++++++++++++++++++++---------
 1 file changed, 72 insertions(+), 24 deletions(-)

diff --git a/epan/dissectors/packet-gsm_a_common.c b/epan/dissectors/packet-gsm_a_common.c
index a76fc71..be317e1 100644
--- a/epan/dissectors/packet-gsm_a_common.c
+++ b/epan/dissectors/packet-gsm_a_common.c
@@ -1185,6 +1185,7 @@ guint16 elem_tlv(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint8 iei
     proto_item         *item;
     const value_string *elem_names;
     gint               *elem_ett;
+    const gchar        *elem_name;
     guint16 (**elem_funcs)(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string, int string_len);
 
     curr_offset = offset;
@@ -1197,13 +1198,18 @@ guint16 elem_tlv(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint8 iei
     if (oct == iei) {
         parm_len = tvb_get_guint8(tvb, curr_offset + 1);
 
+	elem_name = match_strval(idx, elem_names);
+
         item =
         proto_tree_add_text(tree,
             tvb, curr_offset, parm_len + 1 + lengt_length,
-            "%s%s",
-            elem_names[idx].strptr,
+            "%s%s", elem_name ? elem_name : "Unknown - aborting dissection",
             (name_add == NULL) || (name_add[0] == '\0') ? "" : name_add);
 
+        /* idx is out of range */
+        if (elem_name == NULL)
+            return(consumed);
+
         subtree = proto_item_add_subtree(item, elem_ett[idx]);
 
         proto_tree_add_uint(subtree,
@@ -1265,6 +1271,7 @@ guint16 elem_telv(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint8 ie
     proto_item         *item;
     const value_string *elem_names;
     gint               *elem_ett;
+    const gchar        *elem_name;
     guint16 (**elem_funcs)(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string, int string_len);
 
     curr_offset = offset;
@@ -1284,13 +1291,18 @@ guint16 elem_telv(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint8 ie
             parm_len = parm_len & 0x7f;
         }
 
+	elem_name = match_strval(idx, elem_names);
+
         item =
         proto_tree_add_text(tree,
             tvb, curr_offset, parm_len + 1 + lengt_length,
-            "%s%s",
-            elem_names[idx].strptr,
+            "%s%s", elem_name ? elem_name : "Unknown - aborting dissection",
             (name_add == NULL) || (name_add[0] == '\0') ? "" : name_add);
 
+        /* idx is out of range */
+        if (elem_name == NULL)
+            return(consumed);
+
         subtree = proto_item_add_subtree(item, elem_ett[idx]);
 
         proto_tree_add_uint(subtree,
@@ -1351,6 +1363,7 @@ guint16 elem_tlv_e(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint8 i
     proto_item         *item;
     const value_string *elem_names;
     gint               *elem_ett;
+    const gchar        *elem_name;
     guint16 (**elem_funcs)(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string, int string_len);
 
     curr_offset = offset;
@@ -1363,11 +1376,16 @@ guint16 elem_tlv_e(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint8 i
     if (oct == iei) {
         parm_len = tvb_get_ntohs(tvb, curr_offset + 1);
 
+	elem_name = match_strval(idx, elem_names);
+
         item = proto_tree_add_text(tree, tvb, curr_offset, parm_len + 1 + 2,
-            "%s%s",
-            elem_names[idx].strptr,
+            "%s%s", elem_name ? elem_name : "Unknown - aborting dissection",
             (name_add == NULL) || (name_add[0] == '\0') ? "" : name_add);
 
+        /* idx is out of range */
+        if (elem_name == NULL)
+            return(consumed);
+
         subtree = proto_item_add_subtree(item, elem_ett[idx]);
 
         proto_tree_add_uint(subtree,
@@ -1425,6 +1443,7 @@ guint16 elem_tv(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint8 iei,
     proto_item         *item;
     const value_string *elem_names;
     gint               *elem_ett;
+    const gchar        *elem_name;
     guint16 (**elem_funcs)(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string, int string_len);
 
     curr_offset = offset;
@@ -1436,12 +1455,16 @@ guint16 elem_tv(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint8 iei,
 
     if (oct == iei)
     {
-        item =
-            proto_tree_add_text(tree,
+	elem_name = match_strval(idx, elem_names);
+
+        item = proto_tree_add_text(tree,
             tvb, curr_offset, -1,
-            "%s%s",
-            elem_names[idx].strptr,
-                (name_add == NULL) || (name_add[0] == '\0') ? "" : name_add);
+            "%s%s", elem_name ? elem_name : "Unknown - aborting dissection",
+            (name_add == NULL) || (name_add[0] == '\0') ? "" : name_add);
+
+        /* idx is out of range */
+        if (elem_name == NULL)
+            return(consumed);
 
         subtree = proto_item_add_subtree(item, elem_ett[idx]);
 
@@ -1497,6 +1520,7 @@ guint16 elem_tv_short(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint
     proto_item         *item;
     const value_string *elem_names;
     gint               *elem_ett;
+    const gchar        *elem_name;
     guint16 (**elem_funcs)(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string, int string_len);
     char                buf[10+1];
 
@@ -1509,13 +1533,18 @@ guint16 elem_tv_short(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint
 
     if ((oct & 0xf0) == (iei & 0xf0))
     {
+	elem_name = match_strval(idx, elem_names);
+
         item =
             proto_tree_add_text(tree,
                 tvb, curr_offset, -1,
-                "%s%s",
-                elem_names[idx].strptr,
+                "%s%s", elem_name ? elem_name : "Unknown - aborting dissection",
                 (name_add == NULL) || (name_add[0] == '\0') ? "" : name_add);
 
+        /* idx is out of range */
+        if (elem_name == NULL)
+            return(consumed);
+
         subtree = proto_item_add_subtree(item, elem_ett[idx]);
 
         other_decode_bitfield_value(buf, oct, 0xf0, 8);
@@ -1578,8 +1607,7 @@ guint16 elem_t(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint8 i
         proto_tree_add_uint_format(tree,
             get_hf_elem_id(pdu_type), tvb,
             curr_offset, 1, oct,
-            "%s%s",
-            elem_names[idx].strptr,
+            val_to_str(idx, elem_names, "Unknown (%u)"),
             (name_add == NULL) || (name_add[0] == '\0') ? "" : name_add);
 
         consumed = 1;
@@ -1601,6 +1629,7 @@ elem_lv(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, gint pdu_type, int
     proto_item         *item;
     const value_string *elem_names;
     gint               *elem_ett;
+    const gchar        *elem_name;
     guint16 (**elem_funcs)(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string, int string_len);
 
     curr_offset = offset;
@@ -1610,13 +1639,18 @@ elem_lv(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, gint pdu_type, int
 
     parm_len = tvb_get_guint8(tvb, curr_offset);
 
+    elem_name = match_strval(idx, elem_names);
+
     item =
         proto_tree_add_text(tree,
             tvb, curr_offset, parm_len + 1,
-            "%s%s",
-            elem_names[idx].strptr,
+            "%s%s", elem_name ? elem_name : "Unknown - aborting dissection",
             (name_add == NULL) || (name_add[0] == '\0') ? "" : name_add);
 
+    /* idx is out of range */
+    if (elem_name == NULL)
+        return(consumed);
+
     subtree = proto_item_add_subtree(item, elem_ett[idx]);
 
     proto_tree_add_uint(subtree, hf_gsm_a_length, tvb,
@@ -1664,6 +1698,7 @@ guint16 elem_lv_e(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, gint pdu_
     proto_item         *item;
     const value_string *elem_names;
     gint               *elem_ett;
+    const gchar        *elem_name;
     guint16 (**elem_funcs)(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string, int string_len);
 
     curr_offset = offset;
@@ -1673,11 +1708,16 @@ guint16 elem_lv_e(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, gint pdu_
 
     parm_len = tvb_get_ntohs(tvb, curr_offset);
 
+    elem_name = match_strval(idx, elem_names);
+
     item = proto_tree_add_text(tree, tvb, curr_offset, parm_len + 2,
-            "%s%s",
-            elem_names[idx].strptr,
+            "%s%s", elem_name ? elem_name : "Unknown - aborting dissection",
             (name_add == NULL) || (name_add[0] == '\0') ? "" : name_add);
 
+    /* idx is out of range */
+    if (elem_name == NULL)
+        return(consumed);
+
     subtree = proto_item_add_subtree(item, elem_ett[idx]);
 
     proto_tree_add_uint(subtree, hf_gsm_a_length, tvb,
@@ -1726,6 +1766,7 @@ guint16 elem_v(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, gint pdu_typ
     proto_item         *item;
     const value_string *elem_names;
     gint               *elem_ett;
+    const gchar        *elem_name;
     guint16 (**elem_funcs)(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string, int string_len);
 
     curr_offset = offset;
@@ -1733,7 +1774,9 @@ guint16 elem_v(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, gint pdu_typ
 
     SET_ELEM_VARS(pdu_type, elem_names, elem_ett, elem_funcs);
 
-    if (elem_funcs[idx] == NULL)
+    elem_name = match_strval(idx, elem_names);
+
+    if (elem_name == NULL || elem_funcs[idx] == NULL)
     {
         /* BAD THING, CANNOT DETERMINE LENGTH */
 
@@ -1750,8 +1793,7 @@ guint16 elem_v(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, gint pdu_typ
         item =
             proto_tree_add_text(tree,
                 tvb, curr_offset, 0,
-                "%s%s",
-                elem_names[idx].strptr,
+                "%s%s", elem_name,
                 (name_add == NULL) || (name_add[0] == '\0') ? "" : name_add);
 
         subtree = proto_item_add_subtree(item, elem_ett[idx]);
@@ -1786,17 +1828,23 @@ guint16 elem_v_short(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, gint p
     gint               *elem_ett;
     elem_fcn           *elem_funcs;
     gchar              *a_add_string;
+    const gchar        *elem_name;
 
     curr_offset = offset;
 
     SET_ELEM_VARS(pdu_type, elem_names, elem_ett, elem_funcs);
 
+    elem_name = match_strval(idx, elem_names);
+
     item = proto_tree_add_text(tree,
             tvb, curr_offset, 0,
-            "%s%s",
-            elem_names[idx].strptr,
+            "%s%s", elem_name ? elem_name : "Unknown - aborting dissection",
             "");
 
+    /* idx is out of range */
+    if (elem_name == NULL)
+        return(consumed);
+
     subtree = proto_item_add_subtree(item, elem_ett[idx]);
 
     a_add_string= (gchar*)ep_alloc(1024);
-- 
1.7.10.4


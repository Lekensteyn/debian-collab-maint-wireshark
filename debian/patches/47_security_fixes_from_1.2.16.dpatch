#! /bin/sh /usr/share/dpatch/dpatch-run
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Backport security fixes from 1.2.16 Balint Reczey <balint@balintreczey.hu>

@DPATCH@
diff --git a/asn1/x509if/packet-x509if-template.c b/asn1/x509if/packet-x509if-template.c
index cb83d4a..ebe24bd 100644
--- a/asn1/x509if/packet-x509if-template.c
+++ b/asn1/x509if/packet-x509if-template.c
@@ -41,6 +41,7 @@
 #include "packet-x509sat.h"
 #include <epan/emem.h>
 #include <epan/strutil.h>
+#include <epan/dissectors/packet-frame.h>
 
 #define PNAME  "X.509 Information Framework"
 #define PSNAME "X509IF"
@@ -55,13 +56,12 @@ static int hf_x509if_any_string = -1;
 /* Initialize the subtree pointers */
 #include "packet-x509if-ett.c"
 
-static const char *object_identifier_id;
+static const char *object_identifier_id = NULL;
 static proto_tree *top_of_dn = NULL;
 static proto_tree *top_of_rdn = NULL;
 
 static gboolean rdn_one_value = FALSE; /* have we seen one value in an RDN yet */
 static gboolean dn_one_rdn = FALSE; /* have we seen one RDN in a DN yet */
-static gboolean doing_dn = TRUE;
 static gboolean doing_attr = FALSE;
 
 #define MAX_RDN_STR_LEN   64
@@ -76,6 +76,22 @@ static value_string fmt_vals[MAX_FMT_VALS];
 #define MAX_AVA_STR_LEN   64
 static char *last_ava = NULL;
 
+static void
+x509if_frame_end(void)
+{
+  object_identifier_id = NULL;
+  top_of_dn = NULL;
+  top_of_rdn = NULL;
+
+  rdn_one_value = FALSE;
+  dn_one_rdn = FALSE;
+  doing_attr = FALSE;
+
+  last_dn = NULL;
+  last_rdn = NULL;
+  last_ava = NULL;
+}
+
 #include "packet-x509if-fn.c"
 
 const char * x509if_get_last_dn(void)
diff --git a/asn1/x509if/x509if.cnf b/asn1/x509if/x509if.cnf
index 40811d0..8193487 100644
--- a/asn1/x509if/x509if.cnf
+++ b/asn1/x509if/x509if.cnf
@@ -144,7 +144,7 @@ DistinguishedName B "2.16.840.1.101.2.2.1.140" "id-at-garrison"
     name = oid_resolved_from_string(object_identifier_id);
     if(!name) name = object_identifier_id;    
 
-    if(doing_dn) { /* append it to the RDN */
+    if(last_rdn) { /* append it to the RDN */
       g_strlcat(last_rdn, name, MAX_RDN_STR_LEN);
       g_strlcat(last_rdn, "=", MAX_RDN_STR_LEN);
 
@@ -160,6 +160,7 @@ DistinguishedName B "2.16.840.1.101.2.2.1.140" "id-at-garrison"
     if((fmt = val_to_str(hf_index, fmt_vals, "")) && *fmt) {
       /* we have a format */
       last_ava = ep_alloc(MAX_AVA_STR_LEN); *last_ava = '\0';
+      register_frame_end_routine (x509if_frame_end);
 
       g_snprintf(last_ava, MAX_AVA_STR_LEN, "%%s %%s", name, fmt);
 
@@ -192,7 +193,7 @@ DistinguishedName B "2.16.840.1.101.2.2.1.140" "id-at-garrison"
     /* it was a string - format it */
     value = tvb_format_text(out_tvb, 0, tvb_length(out_tvb));
 
-    if(doing_dn) {
+    if(last_rdn) {
       g_strlcat(last_rdn, value, MAX_RDN_STR_LEN);
 
       /* append it to the tree*/
@@ -202,6 +203,10 @@ DistinguishedName B "2.16.840.1.101.2.2.1.140" "id-at-garrison"
     if((fmt = val_to_str(ava_hf_index, fmt_vals, "")) && *fmt) {
       /* we have a format */
 
+      if (!last_ava) {
+        last_ava = ep_alloc(MAX_AVA_STR_LEN);
+      }
+
     if(!(name = oid_resolved_from_string(object_identifier_id)))
       name = object_identifier_id;
     g_snprintf(last_ava, MAX_AVA_STR_LEN, "%%s %%s %%s", name, fmt, value);
@@ -229,7 +234,7 @@ DistinguishedName B "2.16.840.1.101.2.2.1.140" "id-at-garrison"
   rdn_one_value = FALSE;
   top_of_rdn = tree;
   last_rdn = ep_alloc(MAX_DN_STR_LEN); *last_rdn = '\0';
-  doing_dn = TRUE;
+  register_frame_end_routine (x509if_frame_end);
 
   %(DEFAULT_BODY)s
 
@@ -248,7 +253,6 @@ DistinguishedName B "2.16.840.1.101.2.2.1.140" "id-at-garrison"
     }
   }
 
-  doing_dn = FALSE;
   last_rdn = NULL; /* it will get freed when the next packet is dissected */
 
 #.FN_BODY RelativeDistinguishedName/_item
@@ -257,7 +261,7 @@ DistinguishedName B "2.16.840.1.101.2.2.1.140" "id-at-garrison"
     top_of_rdn = tree;
   } else {
 
-   if(doing_dn)  
+   if(last_rdn)  
      /* this is an additional value - delimit */
      g_strlcat(last_rdn, "+", MAX_RDN_STR_LEN);
   }
@@ -272,6 +276,8 @@ DistinguishedName B "2.16.840.1.101.2.2.1.140" "id-at-garrison"
   dn_one_rdn = FALSE; /* reset */
   last_dn = ep_alloc(MAX_DN_STR_LEN); *last_dn = '\0';
   top_of_dn = NULL;
+  register_frame_end_routine (x509if_frame_end);
+
 
   %(DEFAULT_BODY)s
 
@@ -301,6 +307,7 @@ DistinguishedName B "2.16.840.1.101.2.2.1.140" "id-at-garrison"
 
 	ava_hf_index = hf_index;
 	last_ava = ep_alloc(MAX_AVA_STR_LEN); *last_ava = '\0';
+	register_frame_end_routine (x509if_frame_end);
 
 	%(DEFAULT_BODY)s
 
@@ -308,10 +315,9 @@ DistinguishedName B "2.16.840.1.101.2.2.1.140" "id-at-garrison"
 
 #.FN_BODY Attribute
 	doing_attr = TRUE;
+	register_frame_end_routine (x509if_frame_end);
 
 	%(DEFAULT_BODY)s
-
-	doing_attr = FALSE;
 #.END
 
 
diff --git a/epan/dissectors/packet-x509if.c b/epan/dissectors/packet-x509if.c
index 5915f2e..739c0b4 100644
--- a/epan/dissectors/packet-x509if.c
+++ b/epan/dissectors/packet-x509if.c
@@ -49,6 +49,7 @@
 #include "packet-x509sat.h"
 #include <epan/emem.h>
 #include <epan/strutil.h>
+#include <epan/dissectors/packet-frame.h>
 
 #define PNAME  "X.509 Information Framework"
 #define PSNAME "X509IF"
@@ -206,7 +207,7 @@ static int hf_x509if_AllowedSubset_oneLevel = -1;
 static int hf_x509if_AllowedSubset_wholeSubtree = -1;
 
 /*--- End of included file: packet-x509if-hf.c ---*/
-#line 54 "packet-x509if-template.c"
+#line 55 "packet-x509if-template.c"
 
 /* Initialize the subtree pointers */
 
@@ -283,15 +284,14 @@ static gint ett_x509if_Mapping = -1;
 static gint ett_x509if_MRSubstitution = -1;
 
 /*--- End of included file: packet-x509if-ett.c ---*/
-#line 57 "packet-x509if-template.c"
+#line 58 "packet-x509if-template.c"
 
-static const char *object_identifier_id;
+static const char *object_identifier_id = NULL;
 static proto_tree *top_of_dn = NULL;
 static proto_tree *top_of_rdn = NULL;
 
 static gboolean rdn_one_value = FALSE; /* have we seen one value in an RDN yet */
 static gboolean dn_one_rdn = FALSE; /* have we seen one RDN in a DN yet */
-static gboolean doing_dn = TRUE;
 static gboolean doing_attr = FALSE;
 
 #define MAX_RDN_STR_LEN   64
@@ -306,6 +306,22 @@ static value_string fmt_vals[MAX_FMT_VALS];
 #define MAX_AVA_STR_LEN   64
 static char *last_ava = NULL;
 
+static void
+x509if_frame_end(void)
+{
+  object_identifier_id = NULL;
+  top_of_dn = NULL;
+  top_of_rdn = NULL;
+
+  rdn_one_value = FALSE;
+  dn_one_rdn = FALSE;
+  doing_attr = FALSE;
+
+  last_dn = NULL;
+  last_rdn = NULL;
+  last_ava = NULL;
+}
+
 
 /*--- Included file: packet-x509if-fn.c ---*/
 #line 1 "packet-x509if-fn.c"
@@ -340,7 +356,7 @@ dissect_x509if_AttributeId(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int off
     name = oid_resolved_from_string(object_identifier_id);
     if(!name) name = object_identifier_id;    
 
-    if(doing_dn) { /* append it to the RDN */
+    if(last_rdn) { /* append it to the RDN */
       g_strlcat(last_rdn, name, MAX_RDN_STR_LEN);
       g_strlcat(last_rdn, "=", MAX_RDN_STR_LEN);
 
@@ -356,6 +372,7 @@ dissect_x509if_AttributeId(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int off
     if((fmt = val_to_str(hf_index, fmt_vals, "")) && *fmt) {
       /* we have a format */
       last_ava = ep_alloc(MAX_AVA_STR_LEN); *last_ava = '\0';
+      register_frame_end_routine (x509if_frame_end);
 
       g_snprintf(last_ava, MAX_AVA_STR_LEN, "%s %s", name, fmt);
 
@@ -373,7 +390,7 @@ dissect_x509if_AttributeId(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int off
 
 int
 dissect_x509if_AttributeValue(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 172 "x509if.cnf"
+#line 173 "x509if.cnf"
   int old_offset = offset;
   tvbuff_t	*out_tvb;
   char  	*value = NULL;
@@ -397,7 +414,7 @@ dissect_x509if_AttributeValue(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int
     /* it was a string - format it */
     value = tvb_format_text(out_tvb, 0, tvb_length(out_tvb));
 
-    if(doing_dn) {
+    if(last_rdn) {
       g_strlcat(last_rdn, value, MAX_RDN_STR_LEN);
 
       /* append it to the tree*/
@@ -407,6 +424,10 @@ dissect_x509if_AttributeValue(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int
     if((fmt = val_to_str(ava_hf_index, fmt_vals, "")) && *fmt) {
       /* we have a format */
 
+      if (!last_ava) {
+        last_ava = ep_alloc(MAX_AVA_STR_LEN);
+      }
+
     if(!(name = oid_resolved_from_string(object_identifier_id)))
       name = object_identifier_id;
     g_snprintf(last_ava, MAX_AVA_STR_LEN, "%s %s %s", name, fmt, value);
@@ -425,7 +446,7 @@ dissect_x509if_AttributeValue(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int
 
 static int
 dissect_x509if_ValuesWithContextValue(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 224 "x509if.cnf"
+#line 229 "x509if.cnf"
   offset=call_ber_oid_callback("unknown", tvb, offset, actx->pinfo, tree);
 
 
@@ -522,15 +543,14 @@ static const ber_sequence_t Attribute_sequence[] = {
 
 int
 dissect_x509if_Attribute(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 310 "x509if.cnf"
+#line 317 "x509if.cnf"
 	doing_attr = TRUE;
+	register_frame_end_routine (x509if_frame_end);
 
 	  offset = dissect_ber_sequence(implicit_tag, actx, tree, tvb, offset,
                                    Attribute_sequence, hf_index, ett_x509if_Attribute);
 
 
-	doing_attr = FALSE;
-
 
   return offset;
 }
@@ -647,10 +667,11 @@ static const ber_sequence_t AttributeValueAssertion_sequence[] = {
 
 int
 dissect_x509if_AttributeValueAssertion(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 301 "x509if.cnf"
+#line 307 "x509if.cnf"
 
 	ava_hf_index = hf_index;
 	last_ava = ep_alloc(MAX_AVA_STR_LEN); *last_ava = '\0';
+	register_frame_end_routine (x509if_frame_end);
 
 	  offset = dissect_ber_sequence(implicit_tag, actx, tree, tvb, offset,
                                    AttributeValueAssertion_sequence, hf_index, ett_x509if_AttributeValueAssertion);
@@ -740,13 +761,13 @@ dissect_x509if_AttributeTypeAndDistinguishedValue(gboolean implicit_tag _U_, tvb
 
 static int
 dissect_x509if_RelativeDistinguishedName_item(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 255 "x509if.cnf"
+#line 259 "x509if.cnf"
 
   if(!rdn_one_value) {
     top_of_rdn = tree;
   } else {
 
-   if(doing_dn)  
+   if(last_rdn)  
      /* this is an additional value - delimit */
      g_strlcat(last_rdn, "+", MAX_RDN_STR_LEN);
   }
@@ -768,13 +789,13 @@ static const ber_sequence_t RelativeDistinguishedName_set_of[1] = {
 
 int
 dissect_x509if_RelativeDistinguishedName(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 227 "x509if.cnf"
+#line 232 "x509if.cnf"
   char *temp_dn;
 
   rdn_one_value = FALSE;
   top_of_rdn = tree;
   last_rdn = ep_alloc(MAX_DN_STR_LEN); *last_rdn = '\0';
-  doing_dn = TRUE;
+  register_frame_end_routine (x509if_frame_end);
 
     offset = dissect_ber_set_of(implicit_tag, actx, tree, tvb, offset,
                                  RelativeDistinguishedName_set_of, hf_index, ett_x509if_RelativeDistinguishedName);
@@ -795,7 +816,6 @@ dissect_x509if_RelativeDistinguishedName(gboolean implicit_tag _U_, tvbuff_t *tv
     }
   }
 
-  doing_dn = FALSE;
   last_rdn = NULL; /* it will get freed when the next packet is dissected */
 
 
@@ -807,7 +827,7 @@ dissect_x509if_RelativeDistinguishedName(gboolean implicit_tag _U_, tvbuff_t *tv
 
 static int
 dissect_x509if_RDNSequence_item(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 290 "x509if.cnf"
+#line 296 "x509if.cnf"
 
   if(!dn_one_rdn)  {
     /* this is the first element - record the top */
@@ -831,12 +851,14 @@ static const ber_sequence_t RDNSequence_sequence_of[1] = {
 
 int
 dissect_x509if_RDNSequence(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 270 "x509if.cnf"
+#line 274 "x509if.cnf"
   const char *fmt; 
 
   dn_one_rdn = FALSE; /* reset */
   last_dn = ep_alloc(MAX_DN_STR_LEN); *last_dn = '\0';
   top_of_dn = NULL;
+  register_frame_end_routine (x509if_frame_end);
+
 
     offset = dissect_ber_sequence_of(implicit_tag, actx, tree, tvb, offset,
                                       RDNSequence_sequence_of, hf_index, ett_x509if_RDNSequence);
@@ -1232,7 +1254,7 @@ dissect_x509if_INTEGER(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset
 
 static int
 dissect_x509if_SelectedValues(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 215 "x509if.cnf"
+#line 220 "x509if.cnf"
   offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, tree);
 
 
@@ -1266,7 +1288,7 @@ dissect_x509if_DefaultValueType(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, in
 
 static int
 dissect_x509if_DefaultValueValues(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 221 "x509if.cnf"
+#line 226 "x509if.cnf"
   offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, tree);
 
 
@@ -1853,7 +1875,7 @@ static void dissect_SubtreeSpecification_PDU(tvbuff_t *tvb _U_, packet_info *pin
 
 
 /*--- End of included file: packet-x509if-fn.c ---*/
-#line 80 "packet-x509if-template.c"
+#line 96 "packet-x509if-template.c"
 
 const char * x509if_get_last_dn(void)
 {
@@ -2471,7 +2493,7 @@ void proto_register_x509if(void) {
         "", HFILL }},
 
 /*--- End of included file: packet-x509if-hfarr.c ---*/
-#line 125 "packet-x509if-template.c"
+#line 141 "packet-x509if-template.c"
   };
 
   /* List of subtrees */
@@ -2550,7 +2572,7 @@ void proto_register_x509if(void) {
     &ett_x509if_MRSubstitution,
 
 /*--- End of included file: packet-x509if-ettarr.c ---*/
-#line 130 "packet-x509if-template.c"
+#line 146 "packet-x509if-template.c"
   };
 
   /* Register protocol */
@@ -2604,6 +2626,6 @@ void proto_reg_handoff_x509if(void) {
 
 
 /*--- End of included file: packet-x509if-dis-tab.c ---*/
-#line 149 "packet-x509if-template.c"
+#line 165 "packet-x509if-template.c"
 }
 

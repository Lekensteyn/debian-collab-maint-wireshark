From dd945f236e92a6efff14f350443e000c30d0c90d Mon Sep 17 00:00:00 2001
From: Michael Mann <mmann78@netscape.net>
Date: Fri, 3 May 2013 14:54:39 +0000
Subject: [PATCH] Remove static packet_info *gpinfo and just use the
 packet_info provided by the function.

svn path=/trunk/; revision=49145

Conflicts:
	epan/dissectors/packet-bssgp.c
	epan/dissectors/packet-gsm_a_bssmap.c
	epan/dissectors/packet-gsm_sms.c
	epan/dissectors/packet-nas_eps.c
	epan/dissectors/packet-sgsap.c
---
 epan/dissectors/packet-bssgp.c         |   64 ++++++++++++++++----------------
 epan/dissectors/packet-gsm_a_bssmap.c  |   43 +++++++++------------
 epan/dissectors/packet-gsm_bssmap_le.c |   10 ++---
 epan/dissectors/packet-gsm_sms.c       |   57 ++++++++++++++--------------
 epan/dissectors/packet-nas_eps.c       |   39 +++++++++----------
 epan/dissectors/packet-sgsap.c         |   14 +++----
 6 files changed, 103 insertions(+), 124 deletions(-)

diff --git a/epan/dissectors/packet-bssgp.c b/epan/dissectors/packet-bssgp.c
index 44808b5..9610672 100644
--- a/epan/dissectors/packet-bssgp.c
+++ b/epan/dissectors/packet-bssgp.c
@@ -77,7 +77,6 @@
 static int bssgp_decode_nri = 0;
 static guint bssgp_nri_length = 4;
 
-static packet_info *gpinfo;
 static guint8 g_pdu_type, g_rim_application_identity;
 static proto_tree *gparent_tree;
 static dissector_handle_t llc_handle;
@@ -887,7 +886,7 @@ de_bssgp_flush_action(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, g
  */
 
 static guint16
-de_bssgp_llc_pdu(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+de_bssgp_llc_pdu(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)
 {
     tvbuff_t *next_tvb=NULL;
     guint32 curr_offset;
@@ -903,10 +902,10 @@ de_bssgp_llc_pdu(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint3
 
     if(next_tvb){
         if (llc_handle) {
-            call_dissector(llc_handle, next_tvb, gpinfo, gparent_tree);
+            call_dissector(llc_handle, next_tvb, pinfo, gparent_tree);
         }
         else if (data_handle) {
-            call_dissector(data_handle, next_tvb, gpinfo, gparent_tree);
+            call_dissector(data_handle, next_tvb, pinfo, gparent_tree);
         }
     }
 
@@ -1091,7 +1090,7 @@ static const value_string bssgp_precedence_dl[] = {
 };
 
 static guint16
-de_bssgp_qos_profile(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+de_bssgp_qos_profile(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     proto_item *pi, *pre_item;
     guint32 curr_offset;
@@ -1104,7 +1103,7 @@ de_bssgp_qos_profile(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, gu
     /* octet 3-4 Peak bit rate provided by the network (note)
      * NOTE: The bit rate 0 (zero) shall mean "best effort" in this IE.
      */
-    link_dir = gpinfo->link_dir;
+    link_dir = pinfo->link_dir;
 
     peak_bit_rate = tvb_get_ntohs(tvb, curr_offset);
     pi = proto_tree_add_text(tree, tvb, curr_offset, 1, "Peak bit rate: ");
@@ -1506,7 +1505,7 @@ de_bssgp_serv_utran_cco(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_,
  * 11.3.48  NSEI (Network Service Entity Identifier)
  */
 static guint16
-de_bssgp_nsei(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+de_bssgp_nsei(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     guint32 curr_offset;
     guint16 nsei;
@@ -1517,7 +1516,7 @@ de_bssgp_nsei(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 o
     proto_tree_add_item(tree, hf_bssgp_nsei, tvb, curr_offset, 2, ENC_BIG_ENDIAN);
     curr_offset+=2;
 
-    col_append_sep_fstr(gpinfo->cinfo, COL_INFO, BSSGP_SEP, "NSEI %u", nsei);
+    col_append_sep_fstr(pinfo->cinfo, COL_INFO, BSSGP_SEP, "NSEI %u", nsei);
 
 
     return(curr_offset-offset);
@@ -1526,7 +1525,7 @@ de_bssgp_nsei(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 o
  * 11.3.49  RRLP APDU
  */
 static guint16
-de_bssgp_rrlp_apdu(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+de_bssgp_rrlp_apdu(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     tvbuff_t *next_tvb=NULL;
     guint32 curr_offset;
@@ -1546,9 +1545,9 @@ de_bssgp_rrlp_apdu(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guin
 
     if(next_tvb){
         if (rrlp_handle) {
-            call_dissector(rrlp_handle, next_tvb, gpinfo, gparent_tree);
+            call_dissector(rrlp_handle, next_tvb, pinfo, gparent_tree);
         }else if (data_handle) {
-            call_dissector(data_handle, next_tvb, gpinfo, gparent_tree);
+            call_dissector(data_handle, next_tvb, pinfo, gparent_tree);
         }
     }
     return(len);
@@ -1739,7 +1738,7 @@ de_bssgp_ran_information_request_app_cont(tvbuff_t *tvb, proto_tree *tree, packe
             {
             asn1_ctx_t asn1_ctx;
 
-            asn1_ctx_init(&asn1_ctx, ASN1_ENC_PER, TRUE, gpinfo);
+            asn1_ctx_init(&asn1_ctx, ASN1_ENC_PER, TRUE, pinfo);
             /* 11.3.63.1.4  RAN-INFORMATION-REQUEST Application Container for the SON Transfer Application */
             /* Reporting Cell Identifier */
             /* convert to bit offset */
@@ -1756,7 +1755,7 @@ de_bssgp_ran_information_request_app_cont(tvbuff_t *tvb, proto_tree *tree, packe
              * 3GPP TS 25.413
              */
             new_tvb = tvb_new_subset_remaining(tvb, curr_offset);
-            curr_offset = curr_offset + dissect_ranap_SourceCellID_PDU(new_tvb, gpinfo, tree);
+            curr_offset = curr_offset + dissect_ranap_SourceCellID_PDU(new_tvb, pinfo, tree);
             break;
         default :
             proto_tree_add_text(tree, tvb, curr_offset, len, "Unknown RIM Application Identity");
@@ -1838,7 +1837,7 @@ de_bssgp_ran_information_app_cont_unit(tvbuff_t *tvb, proto_tree *tree, packet_i
                     if (msg_fcn_p == NULL){
                         proto_tree_add_text(si_tree, tvb, curr_offset, 21, "Unknown SI message");
                     }else{
-                        (*msg_fcn_p)(tvb, si_tree, gpinfo, curr_offset+1, 20);
+                        (*msg_fcn_p)(tvb, si_tree, pinfo, curr_offset+1, 20);
                     }
                     curr_offset+=21;
                 }
@@ -1886,14 +1885,14 @@ de_bssgp_ran_information_app_cont_unit(tvbuff_t *tvb, proto_tree *tree, packet_i
                      * Source Cell ID) as defined in 3GPP TS 25.413
                      */
                     new_tvb = tvb_new_subset_remaining(tvb, curr_offset);
-                    curr_offset = curr_offset + dissect_ranap_SourceCellID_PDU(new_tvb, gpinfo, tree);
+                    curr_offset = curr_offset + dissect_ranap_SourceCellID_PDU(new_tvb, pinfo, tree);
                     break;
                 case 2:
                     /* If the RAT discriminator field indicates E-UTRAN, this field is encoded as the E-UTRAN CGI IE as
                      * defined in 3GPP TS 36.413
                      */
                     new_tvb = tvb_new_subset_remaining(tvb, curr_offset);
-                    curr_offset = curr_offset + dissect_s1ap_Global_ENB_ID_PDU(new_tvb, gpinfo, tree);
+                    curr_offset = curr_offset + dissect_s1ap_Global_ENB_ID_PDU(new_tvb, pinfo, tree);
                     break;
                 default:
                     break;
@@ -1907,7 +1906,7 @@ de_bssgp_ran_information_app_cont_unit(tvbuff_t *tvb, proto_tree *tree, packet_i
              * (UTRAN Source Cell ID) as defined in 3GPP TS 25.413
              */
             new_tvb = tvb_new_subset_remaining(tvb, curr_offset);
-            curr_offset = curr_offset + dissect_ranap_SourceCellID_PDU(new_tvb, gpinfo, tree);
+            curr_offset = curr_offset + dissect_ranap_SourceCellID_PDU(new_tvb, pinfo, tree);
             /* Octet (m+1)-n UTRA SI Container
              * UTRA SI Container: This field contains System Information Container valid for the reporting cell
              * encoded as defined in TS 25.331
@@ -1963,7 +1962,7 @@ static const value_string bssgp_utra_si_cause_vals[] = {
 };
 
 static guint16
-de_bssgp_ran_app_error_cont(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+de_bssgp_ran_app_error_cont(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     tvbuff_t *new_tvb = NULL;
     guint32 curr_offset;
@@ -2009,7 +2008,7 @@ de_bssgp_ran_app_error_cont(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo
              * The "SON Transfer Cause" field is encoded as the SON Transfer Cause IE as defined in 3GPP TS 36.413
              */
             new_tvb = tvb_new_subset_remaining(tvb, curr_offset);
-            curr_offset = curr_offset + dissect_s1ap_SONtransferCause_PDU(new_tvb, gpinfo, tree);
+            curr_offset = curr_offset + dissect_s1ap_SONtransferCause_PDU(new_tvb, pinfo, tree);
             /* Erroneous Application Container including IEI and LI */
             proto_tree_add_text(tree, tvb, curr_offset, len-(curr_offset-offset), "Erroneous Application Container including IEI and LI");
             break;
@@ -2203,7 +2202,7 @@ static const value_string bssgp_ra_discriminator_vals[] = {
 };
 
 static guint16
-de_bssgp_rim_routing_inf(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+de_bssgp_rim_routing_inf(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     guint8 oct;
     guint16 rnc_id;
@@ -2252,7 +2251,7 @@ de_bssgp_rim_routing_inf(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_
             curr_offset = curr_offset+ de_emm_trac_area_id(tvb, tree, pinfo, curr_offset, 5, add_string, string_len);
             /* Octets 9-n contain the Global eNB ID (see 3GPP TS 36.413 [36]) of the eNodeB. */
             new_tvb = tvb_new_subset_remaining(tvb, curr_offset);
-            dissect_s1ap_Global_ENB_ID_PDU(new_tvb, gpinfo, tree);
+            dissect_s1ap_Global_ENB_ID_PDU(new_tvb, pinfo, tree);
             break;
         default:
             proto_tree_add_text(tree, tvb, curr_offset, 3, "Unknown RIM Routing Address discriminator");
@@ -2292,7 +2291,7 @@ de_bssgp_mbms_session_id(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_
  * 11.3.72  MBMS Session Duration
  */
 static guint16
-de_bssgp_mbms_session_dur(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+de_bssgp_mbms_session_dur(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     tvbuff_t *new_tvb;
     guint32 curr_offset;
@@ -2301,7 +2300,7 @@ de_bssgp_mbms_session_dur(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U
 
     /* AVP Code: 904 MBMS-Session-Duration Registered by packet-gtp.c */
     new_tvb =tvb_new_subset(tvb, offset, len, len);
-    dissector_try_uint(diameter_3gpp_avp_dissector_table, 904, new_tvb, gpinfo, tree);
+    dissector_try_uint(diameter_3gpp_avp_dissector_table, 904, new_tvb, pinfo, tree);
 
     return(curr_offset-offset);
 }
@@ -2313,7 +2312,7 @@ de_bssgp_mbms_session_dur(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U
  *
  */
 static guint16
-de_bssgp_mbms_sai_list(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)
+de_bssgp_mbms_sai_list(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)
 {
     tvbuff_t *new_tvb;
     guint32 curr_offset;
@@ -2322,7 +2321,7 @@ de_bssgp_mbms_sai_list(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_,
 
     /* AVP Code: 903 MBMS-Service-Area Registered by packet-gtp.c */
     new_tvb =tvb_new_subset(tvb, offset, len, len);
-    dissector_try_uint(diameter_3gpp_avp_dissector_table, 903, new_tvb, gpinfo, tree);
+    dissector_try_uint(diameter_3gpp_avp_dissector_table, 903, new_tvb, pinfo, tree);
 
     return(curr_offset-offset);
 }
@@ -2831,7 +2830,7 @@ de_bssgp_mbms_session_rep_no(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo
  * 11.3.94  Inter RAT Handover Info
  */
 static guint16
-de_bssgp_inter_rat_ho_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+de_bssgp_inter_rat_ho_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     tvbuff_t    *new_tvb;
     guint32 curr_offset;
@@ -2843,7 +2842,7 @@ de_bssgp_inter_rat_ho_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _
      * Inter RAT Handover Information coded as specified in 3GPP
      * Technical Specification 25.331
      */
-    dissect_rrc_InterRATHandoverInfo_PDU(new_tvb, gpinfo, tree);
+    dissect_rrc_InterRATHandoverInfo_PDU(new_tvb, pinfo, tree);
 
     return(len);
 }
@@ -3087,7 +3086,7 @@ de_bssgp_enb_id(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 off
 
     /* Octets 8-n contain the Global eNB ID (see 3GPP TS 36.413) of the eNodeB. */
     new_tvb = tvb_new_subset_remaining(tvb, curr_offset);
-    dissect_s1ap_Global_ENB_ID_PDU(new_tvb, gpinfo, tree);
+    dissect_s1ap_Global_ENB_ID_PDU(new_tvb, pinfo, tree);
 
     return(len);
 }
@@ -3095,7 +3094,7 @@ de_bssgp_enb_id(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 off
  * 11.3.104     E-UTRAN Inter RAT Handover Info
  */
 static guint16
-de_bssgp_e_utran_inter_rat_ho_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+de_bssgp_e_utran_inter_rat_ho_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     tvbuff_t    *new_tvb;
     guint32 curr_offset;
@@ -3109,7 +3108,7 @@ de_bssgp_e_utran_inter_rat_ho_info(tvbuff_t *tvb, proto_tree *tree, packet_info
      * significant bit of the first octet of the octet string contains bit 8 of
      * the first octet of the IE.
      */
-    dissect_lte_rrc_UE_EUTRA_Capability_PDU(new_tvb, gpinfo, tree);
+    dissect_lte_rrc_UE_EUTRA_Capability_PDU(new_tvb, pinfo, tree);
 
     return(len);
 }
@@ -3172,12 +3171,12 @@ de_bssgp_reliable_inter_rat_ho_inf(tvbuff_t *tvb, proto_tree *tree, packet_info
  * 11.3.108     SON Transfer Application Identity
  */
 static guint16
-de_bssgp_son_transfer_app_id(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset _U_, guint len _U_, gchar *add_string _U_, int string_len _U_)
+de_bssgp_son_transfer_app_id(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset _U_, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     /* SON Transfer Application Identity: This field is encoded as the SON Transfer Application Identity IE
      * as defined in 3GPP TS 36.413
      */
-    dissect_s1ap_SONtransferApplicationIdentity_PDU(tvb, gpinfo, tree);
+    dissect_s1ap_SONtransferApplicationIdentity_PDU(tvb, pinfo, tree);
 
     return(len);
 }
@@ -6249,7 +6248,6 @@ dissect_bssgp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
     void              (*msg_fcn)(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len);
 
     /* Save pinfo */
-    gpinfo = pinfo;
     g_rim_application_identity = 0;
     gparent_tree = tree;
     len = tvb_length(tvb);
diff --git a/epan/dissectors/packet-gsm_a_bssmap.c b/epan/dissectors/packet-gsm_a_bssmap.c
index ee76e57..b327c0e 100644
--- a/epan/dissectors/packet-gsm_a_bssmap.c
+++ b/epan/dissectors/packet-gsm_a_bssmap.c
@@ -577,7 +577,6 @@ static dissector_handle_t bssgp_handle;
 static dissector_handle_t rrc_handle;
 static dissector_handle_t rtp_handle;
 
-static packet_info *g_pinfo;
 static proto_tree *g_tree;
 static guint8 cell_discriminator = 0x0f;  /* tracks whether handover is to UMTS */
 
@@ -1607,7 +1606,7 @@ be_lsa_id_list(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32
  * Formats everything after the discriminator, shared function
  */
 guint16
-be_cell_id_aux(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string, int string_len, guint8 disc)
+be_cell_id_aux(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string, int string_len, guint8 disc)
 {
     guint32 value;
     guint32 curr_offset;
@@ -1643,9 +1642,9 @@ be_cell_id_aux(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32
         /* FALLTHRU */
     case 0x0c:  /* For identification of a UTRAN cell for cell load information: */
         if (disc != 0x0b)
-            curr_offset = dissect_e212_mcc_mnc(tvb, g_pinfo, tree, curr_offset, TRUE);
+            curr_offset = dissect_e212_mcc_mnc(tvb, pinfo, tree, curr_offset, TRUE);
         else
-            curr_offset = dissect_e212_mcc_mnc(tvb, g_pinfo, tree, curr_offset, ENC_BIG_ENDIAN);
+            curr_offset = dissect_e212_mcc_mnc(tvb, pinfo, tree, curr_offset, ENC_BIG_ENDIAN);
         /* FALLTHRU */
 
     case 0x01:
@@ -1886,7 +1885,7 @@ be_lsa_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 off
  * [2] 3.2.2.24 Layer 3 Information
  */
 static guint16
-be_l3_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)
+be_l3_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)
 {
     guint32   curr_offset;
     tvbuff_t *l3_tvb;
@@ -1921,12 +1920,12 @@ be_l3_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offs
     }
     else if ((cell_discriminator & 0x0f) < 8) {
         /* GSM */
-        call_dissector(dtap_handle, l3_tvb, g_pinfo, g_tree);
+        call_dissector(dtap_handle, l3_tvb, pinfo, g_tree);
     }
     else if ((cell_discriminator & 0x0f) < 13) {
 
         /* UMTS or CDMA 2000 */
-        dissect_rrc_HandoverToUTRANCommand_PDU(l3_tvb, g_pinfo, g_tree);
+        dissect_rrc_HandoverToUTRANCommand_PDU(l3_tvb, pinfo, g_tree);
     }
     else{
         proto_tree_add_text(tree, l3_tvb, curr_offset, len, "Unrecognised Cell Discriminator %x",cell_discriminator);
@@ -2365,7 +2364,7 @@ be_ciph_resp_mode(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint
  * [2] 3.2.2.35 Layer 3 Message Contents
  */
 static guint16
-be_l3_msg(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)
+be_l3_msg(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)
 {
     tvbuff_t *l3_tvb;
 
@@ -2379,7 +2378,7 @@ be_l3_msg(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offse
 
     /* Octet j (j = 3, 4, ..., n) is the unchanged octet j of a radio interface layer 3 message
      * as defined in 3GPP TS 24.008, n is equal to the length of that radio interface layer 3 message. */
-    call_dissector(dtap_handle, l3_tvb, g_pinfo, g_tree);
+    call_dissector(dtap_handle, l3_tvb, pinfo, g_tree);
 
     return(len);
 }
@@ -2849,13 +2848,11 @@ bssmap_old_bss_to_new_bss_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pin
         return;
     }
 
-    g_pinfo = pinfo;
     g_tree = tree;
 
     len = tvb_length(tvb);
     be_field_element_dissect(tvb, tree, pinfo, 0, len, NULL, 0);
 
-    g_pinfo = NULL;
     g_tree = NULL;
 }
 /*
@@ -2926,7 +2923,7 @@ be_loc_type(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 off
  * according to 3GPP TS 23.032.
  */
 static guint16
-be_loc_est(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+be_loc_est(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     tvbuff_t *data_tvb;
     guint32   curr_offset;
@@ -2934,7 +2931,7 @@ be_loc_est(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offs
     curr_offset = offset;
 
     data_tvb = tvb_new_subset(tvb, curr_offset, len, len);
-    dissect_geographical_description(data_tvb, g_pinfo, tree);
+    dissect_geographical_description(data_tvb, pinfo, tree);
 
     return(len);
 }
@@ -3009,7 +3006,7 @@ static const value_string gsm_a_apdu_protocol_id_strings[] = {
 };
 
 static guint16
-be_apdu(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)
+be_apdu(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)
 {
     guint32   curr_offset;
     guint8    apdu_protocol_id;
@@ -3039,7 +3036,7 @@ be_apdu(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset,
          */
         APDU_tvb = tvb_new_subset(tvb, curr_offset, len, len);
         if (gsm_bsslap_handle)
-            call_dissector(gsm_bsslap_handle, APDU_tvb, g_pinfo, g_tree);
+            call_dissector(gsm_bsslap_handle, APDU_tvb, pinfo, g_tree);
         break;
     case 2:
         /* LLP
@@ -3165,7 +3162,7 @@ be_serv_ho(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offs
  */
 
 static guint16
-be_src_rnc_to_tar_rnc_umts(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+be_src_rnc_to_tar_rnc_umts(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     tvbuff_t    *container_tvb;
     guint32 curr_offset;
@@ -3177,7 +3174,7 @@ be_src_rnc_to_tar_rnc_umts(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _
      * RANAP specification 3GPP TS 25.413, excluding RANAP tag
      */
     container_tvb = tvb_new_subset(tvb, curr_offset, len, len);
-    dissect_ranap_SourceRNC_ToTargetRNC_TransparentContainer_PDU(container_tvb, g_pinfo , tree);
+    dissect_ranap_SourceRNC_ToTargetRNC_TransparentContainer_PDU(container_tvb, pinfo, tree);
 
     return(len);
 }
@@ -3230,13 +3227,11 @@ bssmap_new_bss_to_old_bss_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pin
         return;
     }
 
-    g_pinfo = pinfo;
     g_tree = tree;
 
     len = tvb_length(tvb);
     be_field_element_dissect(tvb, tree, pinfo, 0, len, NULL, 0);
 
-    g_pinfo = NULL;
     g_tree = NULL;
 }
 
@@ -4202,7 +4197,7 @@ be_fe_target_radio_cell_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo
 
 /* 3.2.3.4  GPRS Suspend Information */
 static guint16
-be_fe_gprs_suspend_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+be_fe_gprs_suspend_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     guint32 curr_offset = offset;
 
@@ -4210,7 +4205,7 @@ be_fe_gprs_suspend_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_,
        Call the BSSGP dissector here, assuming that the encoding is per 48.018 */
 
 
-    bssgp_suspend_ack(tvb, tree, g_pinfo, offset, len);
+    bssgp_suspend_ack(tvb, tree, pinfo, offset, len);
     curr_offset += len;
 
     return(curr_offset - offset);
@@ -4254,13 +4249,13 @@ be_fe_dual_transfer_mode_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinf
 
 /* 3.2.3.7  Inter RAT Handover Info */
 static guint16
-be_fe_inter_rat_handover_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+be_fe_inter_rat_handover_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     tvbuff_t    *container_tvb;
 
     /* Octets 3-n are encoded as Inter RAT Handover Info as defined in 3GPP TS 25.331 */
     container_tvb = tvb_new_subset(tvb, offset, len, len);
-    dissect_rrc_InterRATHandoverInfo_PDU(container_tvb, g_pinfo , tree);
+    dissect_rrc_InterRATHandoverInfo_PDU(container_tvb, pinfo, tree);
 
     return len;
 }
@@ -6536,7 +6531,6 @@ dissect_bssmap(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
     offset = 0;
     saved_offset = offset;
 
-    g_pinfo = pinfo;
     g_tree = tree;
 
     len = tvb_length(tvb);
@@ -6614,7 +6608,6 @@ dissect_bssmap(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
             sccp_msg_p->data.co.assoc->app_info = cell_discriminator | 0xCDF0;
         }
     }
-    g_pinfo = NULL;
     g_tree = NULL;
 }
 
diff --git a/epan/dissectors/packet-gsm_bssmap_le.c b/epan/dissectors/packet-gsm_bssmap_le.c
index 4ba5b15..ba354a7 100644
--- a/epan/dissectors/packet-gsm_bssmap_le.c
+++ b/epan/dissectors/packet-gsm_bssmap_le.c
@@ -223,7 +223,6 @@ static gint ett_bssmap_le_msg = -1;
 
 static dissector_handle_t gsm_bsslap_handle = NULL;
 
-static packet_info *g_pinfo;
 static proto_tree *g_tree;
 
 #define	NUM_GSM_BSSMAP_LE_ELEM (sizeof(gsm_bssmap_le_elem_strings)/sizeof(value_string))
@@ -234,7 +233,7 @@ gint ett_gsm_bssmap_le_elem[NUM_GSM_BSSMAP_LE_ELEM];
  */
 
 static guint16
-de_bmaple_apdu(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)
+de_bmaple_apdu(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)
 {
 	guint32	curr_offset;
 	guint8	apdu_protocol_id;
@@ -263,7 +262,7 @@ de_bmaple_apdu(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32
 		 */
 		APDU_tvb = tvb_new_subset(tvb, curr_offset+2, len-1, len-1);
 		if(gsm_bsslap_handle)
-			call_dissector(gsm_bsslap_handle, APDU_tvb, g_pinfo, g_tree);
+			call_dissector(gsm_bsslap_handle, APDU_tvb, pinfo, g_tree);
 		break;
 	case 2:
 		/* LLP
@@ -560,7 +559,7 @@ de_bmaple_lcs_qos(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint
  * 10.20 Positioning Data
  */
 static guint16
-de_bmaple_pos_dta(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)
+de_bmaple_pos_dta(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)
 {
 	tvbuff_t *data_tvb;
 	guint32	curr_offset;
@@ -568,7 +567,7 @@ de_bmaple_pos_dta(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint
 	curr_offset = offset;
 
 	data_tvb = tvb_new_subset(tvb, curr_offset, len, len);
-	dissect_geographical_description(data_tvb, g_pinfo, tree);
+	dissect_geographical_description(data_tvb, pinfo, tree);
 
 	return(len);
 }
@@ -938,7 +937,6 @@ dissect_bssmap_le(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
 	offset = 0;
 	saved_offset = offset;
 
-	g_pinfo = pinfo;
 	g_tree = tree;
 
 	len = tvb_length(tvb);
diff --git a/epan/dissectors/packet-gsm_sms.c b/epan/dissectors/packet-gsm_sms.c
index f3d82f5..6de34e7 100644
--- a/epan/dissectors/packet-gsm_sms.c
+++ b/epan/dissectors/packet-gsm_sms.c
@@ -152,7 +152,6 @@ static gint hf_gsm_sms_tp_ud = -1;
 
 static gboolean reassemble_sms = TRUE;
 static char bigbuf[1024];
-static packet_info *g_pinfo;
 static proto_tree *g_tree;
 
 /* 3GPP TS 23.038 version 7.0.0 Release 7
@@ -2578,7 +2577,7 @@ dis_field_ud_iei(tvbuff_t *tvb, proto_tree *tree, guint32 offset, guint8 length)
 #define SMS_MAX_MESSAGE_SIZE 160
 static char    messagebuf[SMS_MAX_MESSAGE_SIZE+1];
 static void
-dis_field_ud(tvbuff_t *tvb, proto_tree *tree, guint32 offset, guint32 length, gboolean udhi, guint8 udl,
+dis_field_ud(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint32 length, gboolean udhi, guint8 udl,
     gboolean seven_bit, gboolean eight_bit, gboolean ucs2, gboolean compressed)
 {
     static guint8     fill_bits_mask[7] =
@@ -2669,9 +2668,9 @@ dis_field_ud(tvbuff_t *tvb, proto_tree *tree, guint32 offset, guint32 length, gb
     if ( is_fragmented && reassemble_sms)
     {
         try_gsm_sms_ud_reassemble = TRUE;
-        save_fragmented = g_pinfo->fragmented;
-        g_pinfo->fragmented = TRUE;
-        fd_sm = fragment_add_seq_check (tvb, offset, g_pinfo,
+        save_fragmented = pinfo->fragmented;
+        pinfo->fragmented = TRUE;
+        fd_sm = fragment_add_seq_check (tvb, offset, pinfo,
                                         g_sm_id, /* guint32 ID for fragments belonging together */
                                         g_sm_fragment_table, /* list of message fragments */
                                         g_sm_reassembled_table, /* list of reassembled messages */
@@ -2684,20 +2683,20 @@ dis_field_ud(tvbuff_t *tvb, proto_tree *tree, guint32 offset, guint32 length, gb
             reassembled_in = fd_sm->reassembled_in;
         }
 
-        sm_tvb = process_reassembled_data(tvb, offset, g_pinfo,
+        sm_tvb = process_reassembled_data(tvb, offset, pinfo,
                                           "Reassembled Short Message", fd_sm, &sm_frag_items,
                                           NULL, tree);
 
-        if(reassembled && g_pinfo->fd->num == reassembled_in)
+        if(reassembled && pinfo->fd->num == reassembled_in)
         {
             /* Reassembled */
-            col_append_str (g_pinfo->cinfo, COL_INFO,
+            col_append_str (pinfo->cinfo, COL_INFO,
                             " (Short Message Reassembled)");
         }
         else
         {
             /* Not last packet of reassembled Short Message */
-            col_append_fstr (g_pinfo->cinfo, COL_INFO,
+            col_append_fstr (pinfo->cinfo, COL_INFO,
                              " (Short Message fragment %u of %u)", g_frag, g_frags);
         }
 
@@ -2720,7 +2719,7 @@ dis_field_ud(tvbuff_t *tvb, proto_tree *tree, guint32 offset, guint32 length, gb
     {
         if (seven_bit)
         {
-            if(!(reassembled && g_pinfo->fd->num == reassembled_in))
+            if(!(reassembled && pinfo->fd->num == reassembled_in))
             {
                 /* Show unassembled SMS */
                 out_len =
@@ -2765,9 +2764,9 @@ dis_field_ud(tvbuff_t *tvb, proto_tree *tree, guint32 offset, guint32 length, gb
         {
             /*proto_tree_add_text(subtree, tvb , offset , length, "%s",
               tvb_format_text(tvb, offset, length));                                */
-            if (! dissector_try_uint(gsm_sms_dissector_tbl, g_port_src, sm_tvb, g_pinfo, subtree))
+            if (! dissector_try_uint(gsm_sms_dissector_tbl, g_port_src, sm_tvb, pinfo, subtree))
             {
-                if (! dissector_try_uint(gsm_sms_dissector_tbl, g_port_dst,sm_tvb, g_pinfo, subtree))
+                if (! dissector_try_uint(gsm_sms_dissector_tbl, g_port_dst,sm_tvb, pinfo, subtree))
                 {
                     if (subtree)
                     { /* Only display if needed */
@@ -2783,7 +2782,7 @@ dis_field_ud(tvbuff_t *tvb, proto_tree *tree, guint32 offset, guint32 length, gb
             {
                 guint8 rep_len = tvb_reported_length(sm_tvb);
 
-                if(!(reassembled && g_pinfo->fd->num == reassembled_in))
+                if(!(reassembled && pinfo->fd->num == reassembled_in))
                 {
                     /* Show unreassembled SMS */
                     utf8_text = g_convert_with_iconv(tvb_get_ptr(sm_tvb, 0, rep_len), rep_len , cd , NULL , NULL , &l_conv_error);
@@ -2850,7 +2849,7 @@ dis_field_ud(tvbuff_t *tvb, proto_tree *tree, guint32 offset, guint32 length, gb
     }
 
     if (try_gsm_sms_ud_reassemble) /* Clean up defragmentation */
-        g_pinfo->fragmented = save_fragmented;
+        pinfo->fragmented = save_fragmented;
 }
 
 /* 9.2.3.27 */
@@ -2908,7 +2907,7 @@ dis_field_pi(tvbuff_t *tvb, proto_tree *tree, guint32 offset, guint8 oct)
  * Section 9.2.2
  */
 static void
-dis_msg_deliver(tvbuff_t *tvb, proto_tree *tree, guint32 offset)
+dis_msg_deliver(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset)
 {
     guint32        saved_offset;
     guint32        length;
@@ -2957,7 +2956,7 @@ dis_msg_deliver(tvbuff_t *tvb, proto_tree *tree, guint32 offset)
     {
         offset++;
 
-        dis_field_ud(tvb, tree, offset, length - (offset - saved_offset), udhi, udl,
+        dis_field_ud(tvb, pinfo, tree, offset, length - (offset - saved_offset), udhi, udl,
             seven_bit, eight_bit, ucs2, compressed);
     }
 }
@@ -2967,7 +2966,7 @@ dis_msg_deliver(tvbuff_t *tvb, proto_tree *tree, guint32 offset)
  * Section 9.2.2
  */
 static void
-dis_msg_deliver_report(tvbuff_t *tvb, proto_tree *tree, guint32 offset)
+dis_msg_deliver_report(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset)
 {
     guint32        saved_offset;
     guint32        length;
@@ -3077,7 +3076,7 @@ dis_msg_deliver_report(tvbuff_t *tvb, proto_tree *tree, guint32 offset)
     {
         offset++;
 
-        dis_field_ud(tvb, tree, offset, length - (offset - saved_offset), udhi, udl,
+        dis_field_ud(tvb, pinfo, tree, offset, length - (offset - saved_offset), udhi, udl,
             seven_bit, eight_bit, ucs2, compressed);
     }
 }
@@ -3087,7 +3086,7 @@ dis_msg_deliver_report(tvbuff_t *tvb, proto_tree *tree, guint32 offset)
  * Section 9.2.2
  */
 static void
-dis_msg_submit(tvbuff_t *tvb, proto_tree *tree, guint32 offset)
+dis_msg_submit(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset)
 {
     guint32        saved_offset;
     guint32        length;
@@ -3144,7 +3143,7 @@ dis_msg_submit(tvbuff_t *tvb, proto_tree *tree, guint32 offset)
     {
         offset++;
 
-        dis_field_ud(tvb, tree, offset, length - (offset - saved_offset), udhi, udl,
+        dis_field_ud(tvb, pinfo, tree, offset, length - (offset - saved_offset), udhi, udl,
             seven_bit, eight_bit, ucs2, compressed);
     }
 }
@@ -3154,7 +3153,7 @@ dis_msg_submit(tvbuff_t *tvb, proto_tree *tree, guint32 offset)
  * Section 9.2.2
  */
 static void
-dis_msg_submit_report(tvbuff_t *tvb, proto_tree *tree, guint32 offset)
+dis_msg_submit_report(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset)
 {
     guint32        saved_offset;
     guint32        length;
@@ -3254,7 +3253,7 @@ dis_msg_submit_report(tvbuff_t *tvb, proto_tree *tree, guint32 offset)
 
     if (udl > 0)
     {
-        dis_field_ud(tvb, tree, offset, length - (offset - saved_offset), udhi, udl,
+        dis_field_ud(tvb, pinfo, tree, offset, length - (offset - saved_offset), udhi, udl,
             seven_bit, eight_bit, ucs2, compressed);
     }
 }
@@ -3264,7 +3263,7 @@ dis_msg_submit_report(tvbuff_t *tvb, proto_tree *tree, guint32 offset)
  * Section 9.2.2
  */
 static void
-dis_msg_status_report(tvbuff_t *tvb, proto_tree *tree, guint32 offset)
+dis_msg_status_report(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset)
 {
     guint32        saved_offset;
     guint32        length;
@@ -3373,7 +3372,7 @@ dis_msg_status_report(tvbuff_t *tvb, proto_tree *tree, guint32 offset)
     {
         offset++;
 
-        dis_field_ud(tvb, tree, offset, length - (offset - saved_offset), udhi, udl,
+        dis_field_ud(tvb, pinfo, tree, offset, length - (offset - saved_offset), udhi, udl,
             seven_bit, eight_bit, ucs2, compressed);
     }
 }
@@ -3383,7 +3382,7 @@ dis_msg_status_report(tvbuff_t *tvb, proto_tree *tree, guint32 offset)
  * Section 9.2.2
  */
 static void
-dis_msg_command(tvbuff_t *tvb, proto_tree *tree, guint32 offset)
+dis_msg_command(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, guint32 offset)
 {
     guint8        oct;
     guint8        cdl;
@@ -3436,7 +3435,7 @@ dis_msg_command(tvbuff_t *tvb, proto_tree *tree, guint32 offset)
 static gint ett_msgs[NUM_MSGS];
 #endif
 
-static void (*gsm_sms_msg_fcn[])(tvbuff_t *tvb, proto_tree *tree, guint32 offset) = {
+static void (*gsm_sms_msg_fcn[])(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset) = {
     dis_msg_deliver,        /* SMS-DELIVER */
     dis_msg_deliver_report, /* SMS-DELIVER REPORT */
     dis_msg_submit,         /* SMS-SUBMIT */
@@ -3453,7 +3452,7 @@ static void (*gsm_sms_msg_fcn[])(tvbuff_t *tvb, proto_tree *tree, guint32 offset
 static void
 dissect_gsm_sms(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
 {
-    void (*msg_fcn)(tvbuff_t *tvb, proto_tree *tree, guint32 offset) = NULL;
+    void (*msg_fcn)(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset) = NULL;
     proto_item *gsm_sms_item;
     proto_tree *gsm_sms_tree = NULL;
     guint32    offset;
@@ -3463,8 +3462,6 @@ dissect_gsm_sms(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
     const gchar *str = NULL;
     /*gint      ett_msg_idx;*/
 
-
-    g_pinfo = pinfo;
     g_is_wsp = 0;
     g_sm_id = 0;
     g_frags = 0;
@@ -3527,7 +3524,7 @@ dissect_gsm_sms(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
         }
         else
         {
-            (*msg_fcn)(tvb, gsm_sms_tree, offset);
+            (*msg_fcn)(tvb, pinfo, gsm_sms_tree, offset);
         }
     }
 }
diff --git a/epan/dissectors/packet-nas_eps.c b/epan/dissectors/packet-nas_eps.c
index 8394354..d2898fd 100644
--- a/epan/dissectors/packet-nas_eps.c
+++ b/epan/dissectors/packet-nas_eps.c
@@ -217,7 +217,6 @@ static int ett_nas_eps_gen_msg_cont = -1;
 static int ett_nas_eps_cmn_add_info = -1;
 
 /* Global variables */
-static packet_info *gpinfo;
 static gboolean g_nas_eps_dissect_plain = FALSE;
 
 guint8 eps_nas_gen_msg_cont_type = 0;
@@ -1008,7 +1007,7 @@ static const value_string nas_eps_emm_type_of_id_vals[] = {
     { 0, NULL }
 };
 static guint16
-de_emm_eps_mid(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+de_emm_eps_mid(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     guint32   curr_offset;
     guint8    octet;
@@ -1037,7 +1036,7 @@ de_emm_eps_mid(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32
         case 6:
             /* GUTI */
             curr_offset++;
-            curr_offset = dissect_e212_mcc_mnc(tvb, gpinfo, tree, curr_offset, TRUE);
+            curr_offset = dissect_e212_mcc_mnc(tvb, pinfo, tree, curr_offset, TRUE);
             /* MME Group ID octet 7 - 8 */
             proto_tree_add_item(tree, hf_nas_eps_emm_mme_grp_id, tvb, curr_offset, 2, ENC_BIG_ENDIAN);
             curr_offset+=2;
@@ -1144,7 +1143,7 @@ static const value_string nas_eps_emm_eps_update_type_vals[] = {
  * 9.9.3.15 ESM message container
  */
 static guint16
-de_emm_esm_msg_cont(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)
+de_emm_esm_msg_cont(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)
 {
     proto_item *item;
     proto_tree *sub_tree;
@@ -1160,7 +1159,7 @@ de_emm_esm_msg_cont(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, gui
     /* This IE can contain any ESM PDU as defined in subclause 8.3. */
     new_tvb = tvb_new_subset(tvb, curr_offset, len, len );
     /* Plain NAS message */
-    disect_nas_eps_esm_msg(new_tvb, gpinfo, sub_tree, 0/* offset */);
+    disect_nas_eps_esm_msg(new_tvb, pinfo, sub_tree, 0/* offset */);
 
     return(len);
 }
@@ -1323,7 +1322,7 @@ de_emm_nas_key_set_id(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, g
  * 9.9.3.22 NAS message container
  */
 static guint16
-de_emm_nas_msg_cont(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+de_emm_nas_msg_cont(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     proto_item *item;
     proto_tree *sub_tree;
@@ -1342,7 +1341,7 @@ de_emm_nas_msg_cont(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, gui
 
     new_tvb = tvb_new_subset(tvb, curr_offset, len, len );
     if (gsm_a_dtap_handle)
-        call_dissector(gsm_a_dtap_handle, new_tvb, gpinfo, sub_tree);
+        call_dissector(gsm_a_dtap_handle, new_tvb, pinfo, sub_tree);
 
     return(len);
 }
@@ -1458,7 +1457,9 @@ static const range_string nas_eps_service_type_vals[] = {
  * 9.9.3.28 Short MAC
  */
 static guint16
-de_emm_nas_short_mac(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+de_emm_nas_short_mac(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_,
+                     guint32 offset, guint len _U_,
+                     gchar *add_string _U_, int string_len _U_)
 {
     guint32 curr_offset;
 
@@ -1487,13 +1488,13 @@ de_emm_nas_short_mac(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, gu
  */
 
 guint16
-de_emm_trac_area_id(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+de_emm_trac_area_id(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     guint32 curr_offset;
 
     curr_offset = offset;
 
-    curr_offset = dissect_e212_mcc_mnc(tvb, gpinfo, tree, curr_offset, TRUE);
+    curr_offset = dissect_e212_mcc_mnc(tvb, pinfo, tree, curr_offset, TRUE);
     proto_tree_add_item(tree, hf_nas_eps_emm_tai_tac, tvb, curr_offset, 2, ENC_BIG_ENDIAN);
     curr_offset+=2;
 
@@ -1513,7 +1514,7 @@ static const value_string nas_eps_emm_tai_tol_vals[] = {
 };
 
 static guint16
-de_emm_trac_area_id_lst(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+de_emm_trac_area_id_lst(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     proto_item *item;
     guint32 curr_offset;
@@ -1545,7 +1546,7 @@ de_emm_trac_area_id_lst(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_,
              * MNC digit 3 MCC digit 3 octet 3
              * MNC digit 2 MNC digit 1 octet 4
              */
-            curr_offset = dissect_e212_mcc_mnc(tvb, gpinfo, tree, curr_offset, TRUE);
+            curr_offset = dissect_e212_mcc_mnc(tvb, pinfo, tree, curr_offset, TRUE);
             /* type of list = "000" */
             /* TAC 1             octet 5
              * TAC 1 (continued) octet 6
@@ -1568,7 +1569,7 @@ de_emm_trac_area_id_lst(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_,
              * MNC digit 3 MCC digit 3 octet 3
              * MNC digit 2 MNC digit 1 octet 4
              */
-            curr_offset = dissect_e212_mcc_mnc(tvb, gpinfo, tree, curr_offset, TRUE);
+            curr_offset = dissect_e212_mcc_mnc(tvb, pinfo, tree, curr_offset, TRUE);
             proto_tree_add_item(tree, hf_nas_eps_emm_tai_tac, tvb, curr_offset, 2, ENC_BIG_ENDIAN);
             curr_offset+=2;
             break;
@@ -1584,7 +1585,7 @@ de_emm_trac_area_id_lst(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_,
                  * MNC digit 3 MCC digit 3 octet 3
                  * MNC digit 2 MNC digit 1 octet 4
                  */
-                curr_offset = dissect_e212_mcc_mnc(tvb, gpinfo, tree, curr_offset, TRUE);
+                curr_offset = dissect_e212_mcc_mnc(tvb, pinfo, tree, curr_offset, TRUE);
                 proto_tree_add_item(tree, hf_nas_eps_emm_tai_tac, tvb, curr_offset, 2, ENC_BIG_ENDIAN);
                 curr_offset+=2;
             }
@@ -1954,7 +1955,7 @@ de_emm_lcs_ind(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32
  * 9.9.3.41 LCS client identity
  */
 static guint16
-de_emm_lcs_client_id(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+de_emm_lcs_client_id(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     guint32   curr_offset;
     tvbuff_t *new_tvb;
@@ -1966,7 +1967,7 @@ de_emm_lcs_client_id(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, gu
      * in subclause 17.7.13 of 3GPP TS 29.002 [15B](GSM MAP).
      */
     new_tvb = tvb_new_subset(tvb, curr_offset, len, len );
-    dissect_gsm_map_lcs_LCS_ClientID_PDU( new_tvb, gpinfo, tree );
+    dissect_gsm_map_lcs_LCS_ClientID_PDU( new_tvb, pinfo, tree );
 
     return(len);
 }
@@ -4624,9 +4625,6 @@ dissect_nas_eps_plain(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
     guint8      pd;
     int         offset = 0;
 
-    /* Save pinfo */
-    gpinfo = pinfo;
-
     /* make entry in the Protocol column on summary display */
     col_append_sep_str(pinfo->cinfo, COL_PROTOCOL, "/", "NAS-EPS");
 
@@ -4732,9 +4730,6 @@ dissect_nas_eps(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
         return;
     }
 
-    /* Save pinfo */
-    gpinfo = pinfo;
-
     /* make entry in the Protocol column on summary display */
     col_append_sep_str(pinfo->cinfo, COL_PROTOCOL, "/", "NAS-EPS");
 
diff --git a/epan/dissectors/packet-sgsap.c b/epan/dissectors/packet-sgsap.c
index 7e5472f..157ff03 100644
--- a/epan/dissectors/packet-sgsap.c
+++ b/epan/dissectors/packet-sgsap.c
@@ -49,7 +49,6 @@
 
 /* Global variables */
 static dissector_handle_t gsm_a_dtap_handle;
-static packet_info *gpinfo;
 static guint gbl_sgsapSctpPort=SCTP_PORT_SGSAP;
 
 
@@ -140,13 +139,13 @@ de_sgsap_err_msg(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint3
  * as specified in subclause 8.21.5 of 3GPP TS 29.274 [17A] (GTPv2-C)
  */
 static guint16
-de_sgsap_ecgi(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+de_sgsap_ecgi(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     guint32    curr_offset;
 
     curr_offset = offset;
 
-    dissect_e212_mcc_mnc(tvb, gpinfo, tree, offset, TRUE);
+    dissect_e212_mcc_mnc(tvb, pinfo, tree, offset, TRUE);
     curr_offset+=3;
 
     proto_tree_add_item(tree, hf_sgsap_eci, tvb, curr_offset, 4, ENC_BIG_ENDIAN);
@@ -165,13 +164,13 @@ de_sgsap_ecgi(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 o
  * not fill the field reserved for it, the rest of the bits are set to '0'.
  */
 static guint16
-de_sgsap_g_cn_id(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
+de_sgsap_g_cn_id(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)
 {
     guint32    curr_offset;
 
     curr_offset = offset;
 
-    dissect_e212_mcc_mnc(tvb, gpinfo, tree, offset, TRUE);
+    dissect_e212_mcc_mnc(tvb, pinfo, tree, offset, TRUE);
     curr_offset+=3;
 
     proto_tree_add_item(tree, hf_sgsap_cn_id, tvb, curr_offset, 2, ENC_BIG_ENDIAN);
@@ -369,7 +368,7 @@ de_sgsap_mme_name(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint
  * as defined in subclause 7.2 of 3GPP TS 24.011 [10]
  */
 static guint16
-de_sgsap_nas_msg_container(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)
+de_sgsap_nas_msg_container(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)
 {
 	tvbuff_t *new_tvb;
 	guint32	curr_offset;
@@ -381,7 +380,7 @@ de_sgsap_nas_msg_container(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _
 	 */
 	new_tvb = tvb_new_subset(tvb, curr_offset,len, len);
 	if(gsm_a_dtap_handle){
-		call_dissector(gsm_a_dtap_handle,new_tvb,gpinfo, tree);
+		call_dissector(gsm_a_dtap_handle,new_tvb,pinfo, tree);
 	}
 
 	return(len);
@@ -1393,7 +1392,6 @@ dissect_sgsap(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
 	guint8			oct;
 
 	/* Save pinfo */
-	gpinfo = pinfo;
 	len = tvb_length(tvb);
 
 	/* Make entry in the Protocol column on summary display */
-- 
1.7.10.4


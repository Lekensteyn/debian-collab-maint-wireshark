From 9ac773e007f52960f34cd998afa5107494adfdd7 Mon Sep 17 00:00:00 2001
From: Jakub Zawadzki <darkjames-ws@darkjames.pl>
Date: Sun, 10 Jun 2012 22:03:17 +0000
Subject: [PATCH 2/3] Clear GtkTreeStore before freeing edt

When building current data for packet details treeview we store two things.
- Generated string with item label
- Pointer to node field_info structure

After epan_dissect_{free, cleanup} pointer to field_info node is no longer
valid so we should clear GtkTreeStore before freeing.

svn path=/trunk/; revision=43188
---
 file.c                   |   21 +++++++++++++--------
 ui/gtk/main_proto_draw.c |    8 ++++----
 ui/gtk/packet_win.c      |    4 ++++
 3 files changed, 21 insertions(+), 12 deletions(-)

diff --git a/file.c b/file.c
index da4b232..19c7991 100644
--- a/file.c
+++ b/file.c
@@ -3653,6 +3653,7 @@ cf_goto_framenum(capture_file *cf)
 void
 cf_select_packet(capture_file *cf, int row)
 {
+  epan_dissect_t *old_edt;
   frame_data *fdata;
 
   /* Get the frame data struct pointer for this frame */
@@ -3703,10 +3704,8 @@ cf_select_packet(capture_file *cf, int row)
   cf->current_frame = fdata;
   cf->current_row = row;
 
+  old_edt = cf->edt;
   /* Create the logical protocol tree. */
-  if (cf->edt != NULL)
-    epan_dissect_free(cf->edt);
-
   /* We don't need the columns here. */
   cf->edt = epan_dissect_new(TRUE, TRUE);
 
@@ -3717,17 +3716,19 @@ cf_select_packet(capture_file *cf, int row)
   dfilter_macro_build_ftv_cache(cf->edt->tree);
 
   cf_callback_invoke(cf_cb_packet_selected, cf);
+
+  if (old_edt != NULL)
+    epan_dissect_free(old_edt);
+
 }
 
 /* Unselect the selected packet, if any. */
 void
 cf_unselect_packet(capture_file *cf)
 {
-  /* Destroy the epan_dissect_t for the unselected packet. */
-  if (cf->edt != NULL) {
-    epan_dissect_free(cf->edt);
-    cf->edt = NULL;
-  }
+  epan_dissect_t *old_edt = cf->edt;
+
+  cf->edt = NULL;
 
   /* No packet is selected. */
   cf->current_frame = NULL;
@@ -3737,6 +3738,10 @@ cf_unselect_packet(capture_file *cf)
 
   /* No protocol tree means no selected field. */
   cf_unselect_field(cf);
+
+  /* Destroy the epan_dissect_t for the unselected packet. */
+  if (old_edt != NULL)
+    epan_dissect_free(old_edt);
 }
 
 /* Unset the selected protocol tree field, if any. */
diff --git a/ui/gtk/main_proto_draw.c b/ui/gtk/main_proto_draw.c
index df54181..80470d5 100644
--- a/ui/gtk/main_proto_draw.c
+++ b/ui/gtk/main_proto_draw.c
@@ -2162,7 +2162,8 @@ proto_tree_draw(proto_tree *protocol_tree, GtkWidget *tree_view)
      */
     gtk_tree_store_clear(store);
 
-    proto_tree_children_foreach(protocol_tree, proto_tree_draw_node, &info);
+    if (protocol_tree)
+        proto_tree_children_foreach(protocol_tree, proto_tree_draw_node, &info);
 }
 
 
@@ -2255,9 +2256,8 @@ clear_tree_and_hex_views(void)
        displayed in the byte view notebook. */
     add_byte_tab(byte_nb_ptr_gbl, "", NULL, NULL, tree_view_gbl);
 
-    /* Clear the protocol tree by removing all nodes in the ctree.
-       This is how it's done in testgtk.c in GTK+ */
-    gtk_tree_store_clear(GTK_TREE_STORE(gtk_tree_view_get_model(GTK_TREE_VIEW(tree_view_gbl))));
+    /* Clear the protocol tree */
+    proto_tree_draw(NULL, tree_view_gbl);
 }
 
 void
diff --git a/ui/gtk/packet_win.c b/ui/gtk/packet_win.c
index 8bd2f88..300a6a8 100644
--- a/ui/gtk/packet_win.c
+++ b/ui/gtk/packet_win.c
@@ -684,6 +684,7 @@ edit_pkt_tree_row_activated_cb(GtkTreeView *tree_view, GtkTreePath *path, GtkTre
 			/* DataPtr->pseudo_header = data.pseudo_header; */
 			memcpy(DataPtr->pd, data.pd, DataPtr->frame->cap_len);
 
+			proto_tree_draw(NULL, DataPtr->tree_view);
 			epan_dissect_cleanup(&(DataPtr->edt));
 			epan_dissect_init(&(DataPtr->edt), TRUE, TRUE);
 			epan_dissect_run(&(DataPtr->edt), &DataPtr->pseudo_header, DataPtr->pd, DataPtr->frame, NULL);
@@ -806,6 +807,7 @@ edit_pkt_win_key_pressed_cb(GtkWidget *win _U_, GdkEventKey *event, gpointer use
 	/* redissect if changed */
 	if (data.val != -1) {
 		/* XXX, can be optimized? */
+		proto_tree_draw(NULL, DataPtr->tree_view);
 		epan_dissect_cleanup(&(DataPtr->edt));
 		epan_dissect_init(&(DataPtr->edt), TRUE, TRUE);
 		epan_dissect_run(&(DataPtr->edt), &DataPtr->pseudo_header, DataPtr->pd, DataPtr->frame, NULL);
@@ -841,6 +843,7 @@ edit_pkt_destroy_new_window(GObject *object _U_, gpointer user_data)
 	struct PacketWinData *DataPtr = user_data;
 
 	detail_windows = g_list_remove(detail_windows, DataPtr);
+	proto_tree_draw(NULL, DataPtr->tree_view);
 	epan_dissect_cleanup(&(DataPtr->edt));
 	g_free(DataPtr);
 
@@ -990,6 +993,7 @@ destroy_new_window(GObject *object _U_, gpointer user_data)
 	struct PacketWinData *DataPtr = user_data;
 
 	detail_windows = g_list_remove(detail_windows, DataPtr);
+	proto_tree_draw(NULL, DataPtr->tree_view);
 	epan_dissect_cleanup(&(DataPtr->edt));
 	g_free(DataPtr->pd);
 	g_free(DataPtr);
-- 
1.7.10.4


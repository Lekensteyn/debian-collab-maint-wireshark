From 14709e9a8f584a6f15affbfaa1164407b79a38f7 Mon Sep 17 00:00:00 2001
From: Michael Mann <mmann78@netscape.net>
Date: Fri, 18 Mar 2016 21:06:51 -0400
Subject: [PATCH 3/6] PKTC must be stricter with its Kerberos application
 choices.

The PKTC dissector calls the Kerberos dissector assuming certain application values.  Because different application values can have different "private" data, corruption can occur.
Ensure the Kerberos application values match the preceding comments by checking the ber identifier before calling the Kerberos dissector.

(cherry picked from commit 4cdc9eeba58f866bd5f273e9c5b3876857a7a4bf)

(cherry picked from commit 44469711f8310a53f39f535b0ad54cbb3d1fec9e)

Bug: 12206
Change-Id: I5ffd94d86f0a4689169c47b58662988c5b8e433d
Reviewed-on: https://code.wireshark.org/review/14541
Reviewed-by: Michael Mann <mmann78@netscape.net>
Reviewed-on: https://code.wireshark.org/review/15447
Reviewed-by: Balint Reczey <balint@balintreczey.hu>
---
 asn1/kerberos/kerberos.cnf        |  2 ++
 epan/dissectors/packet-kerberos.c | 36 ++++++++++++++++----------------
 epan/dissectors/packet-kerberos.h | 20 ++++++++++++++++++
 epan/dissectors/packet-pktc.c     | 43 +++++++++++++++++++++++++++++++--------
 4 files changed, 75 insertions(+), 26 deletions(-)

diff --git a/asn1/kerberos/kerberos.cnf b/asn1/kerberos/kerberos.cnf
index e142d6c..8213d9a 100644
--- a/asn1/kerberos/kerberos.cnf
+++ b/asn1/kerberos/kerberos.cnf
@@ -4,6 +4,7 @@
 
 #.EXPORTS
 ChangePasswdData
+Applications ONLY_ENUM
 
 #.FIELD_RENAME
 #EncryptedData/etype encryptedData_etype
@@ -61,6 +62,7 @@ Applications
 
 #.MAKE_DEFINES
 ADDR-TYPE TYPE_PREFIX
+Applications TYPE_PREFIX
 
 #.FN_BODY MESSAGE-TYPE VAL_PTR = &msgtype
 guint32 msgtype;
diff --git a/epan/dissectors/packet-kerberos.c b/epan/dissectors/packet-kerberos.c
index 6f06601..24c1844 100644
--- a/epan/dissectors/packet-kerberos.c
+++ b/epan/dissectors/packet-kerberos.c
@@ -3720,24 +3720,24 @@ dissect_kerberos_KRB_ERROR(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int off
 
 
 static const ber_choice_t Applications_choice[] = {
-  {   1, &hf_kerberos_ticket     , BER_CLASS_APP, 1, BER_FLAGS_NOOWNTAG, dissect_kerberos_Ticket },
-  {   2, &hf_kerberos_authenticator, BER_CLASS_APP, 2, BER_FLAGS_NOOWNTAG, dissect_kerberos_Authenticator },
-  {   3, &hf_kerberos_encTicketPart, BER_CLASS_APP, 3, BER_FLAGS_NOOWNTAG, dissect_kerberos_EncTicketPart },
-  {  10, &hf_kerberos_as_req     , BER_CLASS_APP, 10, BER_FLAGS_NOOWNTAG, dissect_kerberos_AS_REQ },
-  {  11, &hf_kerberos_as_rep     , BER_CLASS_APP, 11, BER_FLAGS_NOOWNTAG, dissect_kerberos_AS_REP },
-  {  12, &hf_kerberos_tgs_req    , BER_CLASS_APP, 12, BER_FLAGS_NOOWNTAG, dissect_kerberos_TGS_REQ },
-  {  13, &hf_kerberos_tgs_rep    , BER_CLASS_APP, 13, BER_FLAGS_NOOWNTAG, dissect_kerberos_TGS_REP },
-  {  14, &hf_kerberos_ap_req     , BER_CLASS_APP, 14, BER_FLAGS_NOOWNTAG, dissect_kerberos_AP_REQ },
-  {  15, &hf_kerberos_ap_rep     , BER_CLASS_APP, 15, BER_FLAGS_NOOWNTAG, dissect_kerberos_AP_REP },
-  {  20, &hf_kerberos_krb_safe   , BER_CLASS_APP, 20, BER_FLAGS_NOOWNTAG, dissect_kerberos_KRB_SAFE },
-  {  21, &hf_kerberos_krb_priv   , BER_CLASS_APP, 21, BER_FLAGS_NOOWNTAG, dissect_kerberos_KRB_PRIV },
-  {  22, &hf_kerberos_krb_cred   , BER_CLASS_APP, 22, BER_FLAGS_NOOWNTAG, dissect_kerberos_KRB_CRED },
-  {  25, &hf_kerberos_encASRepPart, BER_CLASS_APP, 25, BER_FLAGS_NOOWNTAG, dissect_kerberos_EncASRepPart },
-  {  26, &hf_kerberos_encTGSRepPart, BER_CLASS_APP, 26, BER_FLAGS_NOOWNTAG, dissect_kerberos_EncTGSRepPart },
-  {  27, &hf_kerberos_encAPRepPart, BER_CLASS_APP, 27, BER_FLAGS_NOOWNTAG, dissect_kerberos_EncAPRepPart },
-  {  28, &hf_kerberos_encKrbPrivPart, BER_CLASS_APP, 28, BER_FLAGS_NOOWNTAG, dissect_kerberos_ENC_KRB_PRIV_PART },
-  {  29, &hf_kerberos_encKrbCredPart, BER_CLASS_APP, 29, BER_FLAGS_NOOWNTAG, dissect_kerberos_EncKrbCredPart },
-  {  30, &hf_kerberos_krb_error  , BER_CLASS_APP, 30, BER_FLAGS_NOOWNTAG, dissect_kerberos_KRB_ERROR },
+  { KERBEROS_APPLICATIONS_TICKET, &hf_kerberos_ticket     , BER_CLASS_APP, 1, BER_FLAGS_NOOWNTAG, dissect_kerberos_Ticket },
+  { KERBEROS_APPLICATIONS_AUTHENTICATOR, &hf_kerberos_authenticator, BER_CLASS_APP, 2, BER_FLAGS_NOOWNTAG, dissect_kerberos_Authenticator },
+  { KERBEROS_APPLICATIONS_ENCTICKETPART, &hf_kerberos_encTicketPart, BER_CLASS_APP, 3, BER_FLAGS_NOOWNTAG, dissect_kerberos_EncTicketPart },
+  { KERBEROS_APPLICATIONS_AS_REQ, &hf_kerberos_as_req     , BER_CLASS_APP, 10, BER_FLAGS_NOOWNTAG, dissect_kerberos_AS_REQ },
+  { KERBEROS_APPLICATIONS_AS_REP, &hf_kerberos_as_rep     , BER_CLASS_APP, 11, BER_FLAGS_NOOWNTAG, dissect_kerberos_AS_REP },
+  { KERBEROS_APPLICATIONS_TGS_REQ, &hf_kerberos_tgs_req    , BER_CLASS_APP, 12, BER_FLAGS_NOOWNTAG, dissect_kerberos_TGS_REQ },
+  { KERBEROS_APPLICATIONS_TGS_REP, &hf_kerberos_tgs_rep    , BER_CLASS_APP, 13, BER_FLAGS_NOOWNTAG, dissect_kerberos_TGS_REP },
+  { KERBEROS_APPLICATIONS_AP_REQ, &hf_kerberos_ap_req     , BER_CLASS_APP, 14, BER_FLAGS_NOOWNTAG, dissect_kerberos_AP_REQ },
+  { KERBEROS_APPLICATIONS_AP_REP, &hf_kerberos_ap_rep     , BER_CLASS_APP, 15, BER_FLAGS_NOOWNTAG, dissect_kerberos_AP_REP },
+  { KERBEROS_APPLICATIONS_KRB_SAFE, &hf_kerberos_krb_safe   , BER_CLASS_APP, 20, BER_FLAGS_NOOWNTAG, dissect_kerberos_KRB_SAFE },
+  { KERBEROS_APPLICATIONS_KRB_PRIV, &hf_kerberos_krb_priv   , BER_CLASS_APP, 21, BER_FLAGS_NOOWNTAG, dissect_kerberos_KRB_PRIV },
+  { KERBEROS_APPLICATIONS_KRB_CRED, &hf_kerberos_krb_cred   , BER_CLASS_APP, 22, BER_FLAGS_NOOWNTAG, dissect_kerberos_KRB_CRED },
+  { KERBEROS_APPLICATIONS_ENCASREPPART, &hf_kerberos_encASRepPart, BER_CLASS_APP, 25, BER_FLAGS_NOOWNTAG, dissect_kerberos_EncASRepPart },
+  { KERBEROS_APPLICATIONS_ENCTGSREPPART, &hf_kerberos_encTGSRepPart, BER_CLASS_APP, 26, BER_FLAGS_NOOWNTAG, dissect_kerberos_EncTGSRepPart },
+  { KERBEROS_APPLICATIONS_ENCAPREPPART, &hf_kerberos_encAPRepPart, BER_CLASS_APP, 27, BER_FLAGS_NOOWNTAG, dissect_kerberos_EncAPRepPart },
+  { KERBEROS_APPLICATIONS_ENCKRBPRIVPART, &hf_kerberos_encKrbPrivPart, BER_CLASS_APP, 28, BER_FLAGS_NOOWNTAG, dissect_kerberos_ENC_KRB_PRIV_PART },
+  { KERBEROS_APPLICATIONS_ENCKRBCREDPART, &hf_kerberos_encKrbCredPart, BER_CLASS_APP, 29, BER_FLAGS_NOOWNTAG, dissect_kerberos_EncKrbCredPart },
+  { KERBEROS_APPLICATIONS_KRB_ERROR, &hf_kerberos_krb_error  , BER_CLASS_APP, 30, BER_FLAGS_NOOWNTAG, dissect_kerberos_KRB_ERROR },
   { 0, NULL, 0, 0, 0, NULL }
 };
 
diff --git a/epan/dissectors/packet-kerberos.h b/epan/dissectors/packet-kerberos.h
index 0cffc15..9339a9e 100644
--- a/epan/dissectors/packet-kerberos.h
+++ b/epan/dissectors/packet-kerberos.h
@@ -105,6 +105,26 @@ void read_keytab_file_from_preferences(void);
 
 /*--- Included file: packet-kerberos-exp.h ---*/
 #line 1 "../../asn1/kerberos/packet-kerberos-exp.h"
+
+/* enumerated values for Applications */
+#define KERBEROS_APPLICATIONS_TICKET   1
+#define KERBEROS_APPLICATIONS_AUTHENTICATOR   2
+#define KERBEROS_APPLICATIONS_ENCTICKETPART   3
+#define KERBEROS_APPLICATIONS_AS_REQ  10
+#define KERBEROS_APPLICATIONS_AS_REP  11
+#define KERBEROS_APPLICATIONS_TGS_REQ  12
+#define KERBEROS_APPLICATIONS_TGS_REP  13
+#define KERBEROS_APPLICATIONS_AP_REQ  14
+#define KERBEROS_APPLICATIONS_AP_REP  15
+#define KERBEROS_APPLICATIONS_KRB_SAFE  20
+#define KERBEROS_APPLICATIONS_KRB_PRIV  21
+#define KERBEROS_APPLICATIONS_KRB_CRED  22
+#define KERBEROS_APPLICATIONS_ENCASREPPART  25
+#define KERBEROS_APPLICATIONS_ENCTGSREPPART  26
+#define KERBEROS_APPLICATIONS_ENCAPREPPART  27
+#define KERBEROS_APPLICATIONS_ENCKRBPRIVPART  28
+#define KERBEROS_APPLICATIONS_ENCKRBCREDPART  29
+#define KERBEROS_APPLICATIONS_KRB_ERROR  30
 int dissect_kerberos_ChangePasswdData(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_);
 
 /*--- End of included file: packet-kerberos-exp.h ---*/
diff --git a/epan/dissectors/packet-pktc.c b/epan/dissectors/packet-pktc.c
index 12dd95f..e5507f9 100644
--- a/epan/dissectors/packet-pktc.c
+++ b/epan/dissectors/packet-pktc.c
@@ -32,9 +32,11 @@
 
 #include <epan/packet.h>
 #include <epan/exceptions.h>
+#include <epan/expert.h>
 #include <epan/to_str.h>
 #include <epan/asn1.h>
 #include "packet-pktc.h"
+#include "packet-ber.h"
 #include "packet-kerberos.h"
 #include "packet-snmp.h"
 
@@ -90,12 +92,15 @@ static gint ett_pktc_engineid = -1;
 
 static gint ett_pktc_mtafqdn = -1;
 
-#define KMMID_WAKEUP		0x01
-#define KMMID_AP_REQUEST	0x02
-#define KMMID_AP_REPLY		0x03
-#define KMMID_SEC_PARAM_REC	0x04
-#define KMMID_REKEY		0x05
-#define KMMID_ERROR_REPLY	0x06
+static expert_field ei_pktc_unknown_kerberos_application = EI_INIT;
+
+#define KMMID_WAKEUP            0x01
+#define KMMID_AP_REQUEST        0x02
+#define KMMID_AP_REPLY          0x03
+#define KMMID_SEC_PARAM_REC     0x04
+#define KMMID_REKEY             0x05
+#define KMMID_ERROR_REPLY       0x06
+
 static const value_string kmmid_types[] = {
     { KMMID_WAKEUP		, "Wake Up" },
     { KMMID_AP_REQUEST		, "AP Request" },
@@ -553,6 +558,9 @@ dissect_pktc_mtafqdn(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
     proto_tree *pktc_mtafqdn_tree = NULL;
     proto_item *item = NULL;
     tvbuff_t *pktc_mtafqdn_tvb;
+    gint8              ber_class;
+    gboolean           pc;
+    gint32             tag;
 
     col_set_str(pinfo->cinfo, COL_PROTOCOL, "PKTC");
 
@@ -566,11 +574,22 @@ dissect_pktc_mtafqdn(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
 
     /* KRB_AP_RE[QP] */
     pktc_mtafqdn_tvb = tvb_new_subset_remaining(tvb, offset);
-    offset += dissect_kerberos_main(pktc_mtafqdn_tvb, pinfo, pktc_mtafqdn_tree, FALSE, NULL);
+    get_ber_identifier(pktc_mtafqdn_tvb, 0, &ber_class, &pc, &tag);
+    if ((tag == KERBEROS_APPLICATIONS_AP_REQ) || (tag == KERBEROS_APPLICATIONS_AP_REP)) {
+        offset += dissect_kerberos_main(pktc_mtafqdn_tvb, pinfo, pktc_mtafqdn_tree, FALSE, NULL);
+    } else {
+        expert_add_info_format(pinfo, item, &ei_pktc_unknown_kerberos_application, "Unknown Kerberos application (%d), expected KRB_AP_RE[QP]", tag);
+        return;
+    }
 
     /* KRB_SAFE */
     pktc_mtafqdn_tvb = tvb_new_subset_remaining(tvb, offset);
-    offset += dissect_kerberos_main(pktc_mtafqdn_tvb, pinfo, pktc_mtafqdn_tree, FALSE, cb);
+    get_ber_identifier(pktc_mtafqdn_tvb, 0, &ber_class, &pc, &tag);
+    if (tag == KERBEROS_APPLICATIONS_KRB_SAFE) {
+        offset += dissect_kerberos_main(pktc_mtafqdn_tvb, pinfo, pktc_mtafqdn_tree, FALSE, cb);
+    } else {
+        expert_add_info_format(pinfo, item, &ei_pktc_unknown_kerberos_application, "Unknown Kerberos application (%d), expected KRB_SAFE", tag);
+    }
 
     proto_item_set_len(item, offset);
 }
@@ -780,8 +799,16 @@ proto_register_pktc_mtafqdn(void)
         &ett_pktc_mtafqdn,
     };
 
+    static ei_register_info ei[] = {
+        { &ei_pktc_unknown_kerberos_application, { "pktc.mtafqdn.unknown_kerberos_application", PI_PROTOCOL, PI_WARN, "Unknown Kerberos application", EXPFILL }},
+    };
+
+    expert_module_t* expert_pktc;
+
     proto_register_field_array(proto_pktc, hf, array_length(hf));
     proto_register_subtree_array(ett, array_length(ett));
+    expert_pktc = expert_register_protocol(proto_pktc);
+    expert_register_field_array(expert_pktc, ei, array_length(ei));
 }
 
 void
-- 
2.1.4


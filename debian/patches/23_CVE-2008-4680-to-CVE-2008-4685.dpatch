#! /bin/sh /usr/share/dpatch/dpatch-run
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Backport security fixes from 1.0.4 <jmm@debian.org>

@DPATCH@
diff -Naur wireshark-1.0.2.orig/epan/dissectors/packet-bthci_acl.c wireshark-1.0.2/epan/dissectors/packet-bthci_acl.c
--- wireshark-1.0.2.orig/epan/dissectors/packet-bthci_acl.c	2008-07-10 19:39:27.000000000 +0200
+++ wireshark-1.0.2/epan/dissectors/packet-bthci_acl.c	2008-11-13 16:43:15.000000000 +0100
@@ -169,9 +169,9 @@
 				mfp->first_frame=pinfo->fd->num;
 				mfp->last_frame=0;
 				mfp->tot_len=l2cap_length+4;
-				mfp->reassembled=se_alloc(l2cap_length+4);
-				tvb_memcpy(tvb, (guint8*)mfp->reassembled, offset, tvb_length_remaining(tvb, offset));
-				mfp->cur_off=tvb_length_remaining(tvb, offset);
+				mfp->reassembled=se_alloc(mfp->tot_len);
+				tvb_memcpy(tvb, (guint8*)mfp->reassembled, offset, mfp->tot_len);
+				mfp->cur_off=mfp->tot_len;
 				se_tree_insert32(chandle_data->start_fragments, pinfo->fd->num, mfp);
 			} else {
 				mfp=se_tree_lookup32(chandle_data->start_fragments, pinfo->fd->num);
diff -Naur wireshark-1.0.2.orig/epan/dissectors/packet-btrfcomm.c wireshark-1.0.2/epan/dissectors/packet-btrfcomm.c
--- wireshark-1.0.2.orig/epan/dissectors/packet-btrfcomm.c	2008-07-10 19:39:24.000000000 +0200
+++ wireshark-1.0.2/epan/dissectors/packet-btrfcomm.c	2008-11-13 16:43:30.000000000 +0100
@@ -284,14 +284,9 @@
 	if(!pinfo->fd->flags.visited){
 		dlci_state=se_tree_lookup32(dlci_table, dlci);
 		if(!dlci_state){
-			dlci_state=se_alloc(sizeof(dlci_state_t));
-			dlci_state->do_credit_fc=0;
-			dlci_state->direction[0].len=0;
+			dlci_state=se_alloc0(sizeof(dlci_state_t));
 			dlci_state->direction[0].current=-1;
-			dlci_state->direction[0].stream_buf=NULL;
-			dlci_state->direction[1].len=0;
 			dlci_state->direction[1].current=-1;
-			dlci_state->direction[1].stream_buf=NULL;
 			se_tree_insert32(dlci_table, dlci, dlci_state);
 		}
 
@@ -642,14 +637,9 @@
 
 	dlci_state=se_tree_lookup32(dlci_table, dlci);
 	if(!dlci_state){
-		dlci_state=se_alloc(sizeof(dlci_state_t));
-		dlci_state->do_credit_fc=0;
-		dlci_state->direction[0].len=0;
+		dlci_state=se_alloc0(sizeof(dlci_state_t));
 		dlci_state->direction[0].current=-1;
-		dlci_state->direction[0].stream_buf=NULL;
-		dlci_state->direction[1].len=0;
 		dlci_state->direction[1].current=-1;
-		dlci_state->direction[1].stream_buf=NULL;
 		se_tree_insert32(dlci_table, dlci, dlci_state);
 	}
 
diff -Naur wireshark-1.0.2.orig/epan/dissectors/packet-frame.c wireshark-1.0.2/epan/dissectors/packet-frame.c
--- wireshark-1.0.2.orig/epan/dissectors/packet-frame.c	2008-07-10 19:39:27.000000000 +0200
+++ wireshark-1.0.2/epan/dissectors/packet-frame.c	2008-11-13 16:43:43.000000000 +0100
@@ -351,7 +351,49 @@
 		pinfo->layer_names = NULL;
 	}
 
-	call_all_postdissectors(tvb, pinfo, parent_tree);
+	/*  Call postdissectors if we have any (while trying to avoid another
+	 *  TRY/CATCH)
+	 */
+	if (have_postdissector()) {
+	    TRY {
+#ifdef _MSC_VER
+	    /* Win32: Visual-C Structured Exception Handling (SEH) to trap hardware exceptions like memory access violations */
+	    /* (a running debugger will be called before the except part below) */
+	    __try {
+#endif
+		call_all_postdissectors(tvb, pinfo, parent_tree);
+#ifdef _MSC_VER
+	    } __except(TRUE /* handle all exceptions */) {
+		switch(GetExceptionCode()) {
+		case(STATUS_ACCESS_VIOLATION):
+			    show_exception(tvb, pinfo, parent_tree, DissectorError,
+			"STATUS_ACCESS_VIOLATION: dissector accessed an invalid memory address");
+		    break;
+		case(STATUS_INTEGER_DIVIDE_BY_ZERO):
+			    show_exception(tvb, pinfo, parent_tree, DissectorError,
+			"STATUS_INTEGER_DIVIDE_BY_ZERO: dissector tried an integer division by zero");
+		    break;
+		case(STATUS_STACK_OVERFLOW):
+			    show_exception(tvb, pinfo, parent_tree, DissectorError,
+			"STATUS_STACK_OVERFLOW: dissector overflowed the stack (e.g. endless loop)");
+		    /* XXX - this will have probably corrupted the stack, which makes problems later in the exception code */
+		    break;
+		/* XXX - add other hardware exception codes as required */
+		default:
+			    show_exception(tvb, pinfo, parent_tree, DissectorError,
+			g_strdup_printf("dissector caused an unknown exception: 0x%x", GetExceptionCode()));
+		}
+	    }
+#endif
+	    }
+	    CATCH(OutOfMemoryError) {
+		    RETHROW;
+	    }
+	    CATCH_ALL {
+		    show_exception(tvb, pinfo, parent_tree, EXCEPT_CODE, GET_MESSAGE);
+	    }
+	    ENDTRY;
+	}
 
 	tap_queue_packet(frame_tap, pinfo, NULL);
 
diff -Naur wireshark-1.0.2.orig/epan/dissectors/packet-q931.c wireshark-1.0.2/epan/dissectors/packet-q931.c
--- wireshark-1.0.2.orig/epan/dissectors/packet-q931.c	2008-07-10 19:39:26.000000000 +0200
+++ wireshark-1.0.2/epan/dissectors/packet-q931.c	2008-11-13 16:43:57.000000000 +0100
@@ -1182,8 +1182,8 @@
 	{ 0x00, NULL }
 };
 
-void
-dissect_q931_cause_ie(tvbuff_t *tvb, int offset, int len,
+static void
+dissect_q931_cause_ie_unsafe(tvbuff_t *tvb, int offset, int len,
     proto_tree *tree, int hf_cause_value, guint8 *cause_value)
 {
 	guint8 octet;
@@ -1341,6 +1341,16 @@
 	}
 }
 
+void
+dissect_q931_cause_ie(tvbuff_t *tvb, int offset, int len,
+    proto_tree *tree, int hf_cause_value, guint8 *cause_value)
+{
+  gboolean have_valid_q931_pi_save = have_valid_q931_pi;
+  have_valid_q931_pi = FALSE;
+  dissect_q931_cause_ie_unsafe(tvb, offset, len, tree, hf_cause_value, cause_value);
+  have_valid_q931_pi =  have_valid_q931_pi_save;
+}
+
 /*
  * Dissect a Call state information element.
  */
@@ -2768,7 +2778,7 @@
 					break;
 
 				case CS0 | Q931_IE_CAUSE:
-					dissect_q931_cause_ie(tvb,
+					dissect_q931_cause_ie_unsafe(tvb,
 						offset + 2, info_element_len,
 						ie_tree,
 						hf_q931_cause_value, &dummy);
diff -Naur wireshark-1.0.2.orig/epan/dissectors/packet-usb.c wireshark-1.0.2/epan/dissectors/packet-usb.c
--- wireshark-1.0.2.orig/epan/dissectors/packet-usb.c	2008-07-10 19:39:25.000000000 +0200
+++ wireshark-1.0.2/epan/dissectors/packet-usb.c	2008-11-13 16:44:09.000000000 +0100
@@ -242,10 +242,9 @@
     usb_conv_info = conversation_get_proto_data(conversation, proto_usb);
     if(!usb_conv_info){
         /* no not yet so create some */
-        usb_conv_info = se_alloc(sizeof(usb_conv_info_t));
+        usb_conv_info = se_alloc0(sizeof(usb_conv_info_t));
         usb_conv_info->interfaceClass=IF_CLASS_UNKNOWN;
         usb_conv_info->transactions=se_tree_create_non_persistent(EMEM_TREE_TYPE_RED_BLACK, "usb transactions");
-        usb_conv_info->class_data=NULL;
 
         conversation_add_proto_data(conversation, proto_usb, usb_conv_info);
     }
@@ -504,10 +503,9 @@
     /* save the class so we can access it later in the endpoint descriptor */
     usb_conv_info->interfaceClass=tvb_get_guint8(tvb, offset);
     if(!pinfo->fd->flags.visited){
-        usb_trans_info->interface_info=se_alloc(sizeof(usb_conv_info_t));
+        usb_trans_info->interface_info=se_alloc0(sizeof(usb_conv_info_t));
         usb_trans_info->interface_info->interfaceClass=tvb_get_guint8(tvb, offset);
         usb_trans_info->interface_info->transactions=se_tree_create_non_persistent(EMEM_TREE_TYPE_RED_BLACK, "usb transactions");
-        usb_trans_info->interface_info->class_data=NULL;
     }
     offset++;
 
@@ -1052,12 +1050,9 @@
         /* this is a request */
         usb_trans_info=se_tree_lookup32(usb_conv_info->transactions, pinfo->fd->num);
         if(!usb_trans_info){
-            usb_trans_info=se_alloc(sizeof(usb_trans_info_t));
+            usb_trans_info=se_alloc0(sizeof(usb_trans_info_t));
             usb_trans_info->request_in=pinfo->fd->num;
-            usb_trans_info->response_in=0;
             usb_trans_info->req_time=pinfo->fd->abs_ts;
-            usb_trans_info->requesttype=0;
-            usb_trans_info->request=0;
             se_tree_insert32(usb_conv_info->transactions, pinfo->fd->num, usb_trans_info);
         }
         usb_conv_info->usb_trans_info=usb_trans_info;
diff -Naur wireshark-1.0.2.orig/wiretap/commview.c wireshark-1.0.2/wiretap/commview.c
--- wireshark-1.0.2.orig/wiretap/commview.c	2008-07-10 19:39:33.000000000 +0200
+++ wireshark-1.0.2/wiretap/commview.c	2008-11-13 16:42:59.000000000 +0100
@@ -160,6 +160,11 @@
 	case MEDIUM_TOKEN_RING :
 		wth->phdr.pkt_encap = WTAP_ENCAP_TOKEN_RING;
 		break;
+	default:
+		*err = WTAP_ERR_BAD_RECORD;
+		*err_info = g_strdup_printf("commview: unsupported encap: %u",
+					    cv_hdr.flags & FLAGS_MEDIUM);
+		return FALSE;
 	}
 
 	buffer_assure_space(wth->frame_buffer, cv_hdr.data_len);

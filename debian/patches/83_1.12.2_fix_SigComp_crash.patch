From 63b971cd752ac9cdb48d297a48e86851ef7e4ac1 Mon Sep 17 00:00:00 2001
From: Evan Huus <eapache@gmail.com>
Date: Tue, 4 Nov 2014 21:31:17 -0500
Subject: [PATCH 4/5] sigcomp-udvm: fix invalid access

Way back in 2006, svn r20041 (now gd408f2f6fc) worked around a problem by
limiting the amount of buffer dealt with in the udvm_state_access call (changing
it from state_minimum_access_length_buff[n] to STATE_MIN_ACCESS_LEN).

The very next line however, tries to read the same amount of buffer to display
to the user - since it seems nobody ever applied a proper fix for the original
case, just apply the same workaround to the second call.

Conflicts:
	epan/sigcomp-udvm.c

Bug: 10662
Change-Id: I32c81ee2a8eb7b30ff7ab1fbbb6ea5f206385d4b
Reviewed-on: https://code.wireshark.org/review/5125
Reviewed-by: Evan Huus <eapache@gmail.com>
Reviewed-on: https://code.wireshark.org/review/5331
Reviewed-by: Michael Mann <mmann78@netscape.net>
Reviewed-on: https://code.wireshark.org/review/5355
---
 epan/sigcomp-udvm.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/epan/sigcomp-udvm.c b/epan/sigcomp-udvm.c
index dc5cfdb..929234f 100644
--- a/epan/sigcomp-udvm.c
+++ b/epan/sigcomp-udvm.c
@@ -2707,7 +2707,7 @@ execute_next_instruction:
 				udvm_state_create(sha1buff, sha1_digest_buf, STATE_MIN_ACCESS_LEN);
 /* end partial state-id change cco@iptel.org */
 				proto_tree_add_text(udvm_tree,bytecode_tvb, 0, -1,"### Creating state ###");
-				proto_tree_add_string(udvm_tree,hf_id, bytecode_tvb, 0, 0, bytes_to_str(sha1_digest_buf, state_minimum_access_length_buff[n]));
+				proto_tree_add_string(udvm_tree,hf_id, bytecode_tvb, 0, 0, bytes_to_str(sha1_digest_buf, STATE_MIN_ACCESS_LEN));
 
 				n++;
 
-- 
2.1.3


#! /bin/sh /usr/share/dpatch/dpatch-run
## 21_CVE-2008-3934.dpatch by  <andete@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad lenny~/epan/dissectors/packet-k12.c lenny/epan/dissectors/packet-k12.c
--- lenny~/epan/dissectors/packet-k12.c	2008-07-10 19:39:24.000000000 +0200
+++ lenny/epan/dissectors/packet-k12.c	2008-09-16 19:33:33.000000000 +0200
@@ -1,9 +1,9 @@
 /* packet-k12.c
-* Routines for displaying frames from k12 rf5 files
+* Helper-dissector for Tektronix k12xx-k15xx .rf5 file type
 *
-* Luis E. Garcia Ontanon <luis.ontanon@gmail.com>
+* Luis E. Garcia Ontanon <luis@ontanon.org>
 *
-* $Id: packet-k12.c 24580 2008-03-06 22:13:24Z stig $
+* $Id$
 *
 * Wireshark - Network traffic analyzer
 * By Gerald Combs <gerald@wireshark.org>
@@ -41,7 +41,6 @@
 #include <epan/strutil.h>
 #include "packet-sscop.h"
 #include "packet-umts_fp.h"
-#include <epan/ws_strsplit.h>
 
 typedef struct _k12_hdls_t {
 	char* match;
@@ -99,6 +98,9 @@
 	if (!p_fp_info || length < 22)
 		return;
 
+	/* Store division type */
+	p_fp_info->division = radio_mode;
+
 	/* Format used by K15, later fields are shifted by 8 bytes. */
 	if (pntohs(extra_info+2) == 5)
 		adj = 8;
@@ -166,9 +168,12 @@
 
 	if (info_type == 0x30) { /* data frame */
 		p_fp_info->num_chans = extra_info[23 + adj];
+		/* For each channel */
 		for (i = 0; i < (guint)p_fp_info->num_chans && (36+i*104+adj) <= length; ++i) {
+			/* Read TB size */
 			p_fp_info->chan_tf_size[i] = pntohl(extra_info+28+i*104+adj);
 			if (p_fp_info->chan_tf_size[i])
+				/* Work out number of TBs on this channel */
 				p_fp_info->chan_num_tbs[i] = pntohl(extra_info+32+i*104+adj)
 							     / p_fp_info->chan_tf_size[i];
 		}
@@ -275,12 +280,10 @@
 		if (handles[i] == sscop_handle) {
 			sscop_payload_info *p_sscop_info = p_get_proto_data(pinfo->fd, proto_sscop);
 			if (!p_sscop_info) {
-				p_sscop_info = ep_alloc0(sizeof(sscop_payload_info));
-				if (p_sscop_info)
-					p_add_proto_data(pinfo->fd, proto_sscop, p_sscop_info);
+				p_sscop_info = se_alloc0(sizeof(sscop_payload_info));
+                p_add_proto_data(pinfo->fd, proto_sscop, p_sscop_info);
+                p_sscop_info->subdissector = handles[i+1];
 			}
-			if (p_sscop_info)
-				p_sscop_info->subdissector = handles[i+1];
 		}
 		/* Add more protocols here */
 	}
@@ -291,14 +294,13 @@
 	if (sub_handle == fp_handle) {
 		fp_info *p_fp_info = p_get_proto_data(pinfo->fd, proto_fp);
 		if (!p_fp_info) {
-			p_fp_info = ep_alloc0(sizeof(fp_info));
-			if (p_fp_info)
-				p_add_proto_data(pinfo->fd, proto_fp, p_fp_info);
-		}
+			p_fp_info = se_alloc0(sizeof(fp_info));
+            p_add_proto_data(pinfo->fd, proto_fp, p_fp_info);
 
-		fill_fp_info(p_fp_info,
-			     pinfo->pseudo_header->k12.extra_info,
-			     pinfo->pseudo_header->k12.extra_length);
+            fill_fp_info(p_fp_info,
+                         pinfo->pseudo_header->k12.extra_info,
+                         pinfo->pseudo_header->k12.extra_length);
+		}
 	}
 
 	call_dissector(sub_handle, tvb, pinfo, tree);
@@ -367,7 +369,7 @@
 	guint num_protos, i;
 
 	g_strstrip(line);
-	g_strdown(line);
+	g_ascii_strdown(line,len);
 
 	protos = ep_strsplit(line,":",0);
 

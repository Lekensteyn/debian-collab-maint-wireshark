#! /bin/sh /usr/share/dpatch/dpatch-run
## 22_CVE-2008-3146_3932.dpatch by  <andete@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Removed whitespace changes of the original fix (balint@balintreczey.hu)

@DPATCH@
--- lenny/epan/dissectors/packet-ncp2222.inc.orig	2009-12-25 23:06:36.000000000 +0100
+++ lenny/epan/dissectors/packet-ncp2222.inc	2009-12-25 23:27:12.000000000 +0100
@@ -60,6 +60,7 @@
         guint32         nds_length;
         guint32         nds_frag;
         gboolean        nds_fragmented;
+        guint8          sequence;
 } frag_info;
 
 frag_info           frags[100];
@@ -1468,6 +1469,7 @@
 #define NDS_PTYPE_INTERNAL	0x0000000c
 #define NDS_PTYPE_URL		0x0000000d
 #define NDS_PTYPE_DNS       0x0000000e
+#define NDS_PTYPE_CNT       0x0000000f
 
 static const value_string nds_protocol_type[] = {
         { NDS_PTYPE_IPX,           "(IPX Protocol)" },
@@ -1485,6 +1487,7 @@
         { NDS_PTYPE_INTERNAL,      "(Internal Protocol)" },
         { NDS_PTYPE_URL,           "(URL Protocol)" },
         { NDS_PTYPE_DNS,           "(DNS Protocol)" },
+        { NDS_PTYPE_CNT,           "(Number of protocol types defined)" },
 	{ 0,	NULL }
 };
 
@@ -1970,9 +1973,7 @@
 	guint	second;
 } nw_time_t;
 
-typedef struct {
-	char   buffer[1024];
-} nw_uni_t;
+#define NW_UNI_MAX 1024
 
 #define VTYPE_NONE		0	/* no value */
 #define VTYPE_UINT8		1
@@ -2046,6 +2047,7 @@
         guint8          mvtype;
         guint32         vflags;
         guint32         nds_version;
+        guint32         pflags; /* NDS Protocol Flags */
 } nds_val;
 
 
@@ -2124,14 +2126,15 @@
 /* Convert a string from little-endian unicode to ascii.  At the moment we
    fake it by taking every odd byte.  )-:  The caller must free the
    result returned. */
+/* XXX This prints the proto_item name, but not its value. */
 static proto_item*
 padd_uni(ptvcursor_t *ptvc, const ptvc_record *rec)
 {
 	proto_item      *item;
-        nw_uni_t        nw_uni;
+	/* nw_uni_t        nw_uni; */
         guint            offset;
 
-	nw_uni.buffer[0] = '\0';
+	/* nw_uni.buffer[0] = '\0'; */
         offset = ptvcursor_current_offset(ptvc);
 
 	item = ptvcursor_add(ptvc, *rec->hf_ptr,
@@ -2139,8 +2142,8 @@
 
 	if (item) {
 		proto_item_set_text(item, "%s", get_item_name(item));
-		proto_item_append_text(item, " %s",
-				nw_uni.buffer);
+		/* proto_item_append_text(item, " %s",
+				nw_uni.buffer); */
 	}
 
 	return item;
@@ -2444,23 +2447,29 @@
        return 0;
 }
 
-static void
-get_string(tvbuff_t* tvb, guint offset, guint str_length, char *dest_buf)
+static char *
+get_string(tvbuff_t* tvb, guint offset, guint str_length)
 {
+        char *dest_buf;
         gint i;
         guint16 c_char;
         gint length_remaining = 0;
+        gint max_length = (str_length < NW_UNI_MAX) ? str_length : NW_UNI_MAX;
 
         length_remaining = tvb_length_remaining(tvb, offset);
         if((gint)str_length > length_remaining)
         {
                 THROW(ReportedBoundsError);
         }
-        dest_buf[0] = '\0';
+
         if(str_length == 0)
         {
-                return;
+                return "";
         }
+
+        dest_buf = ep_alloc(max_length + 1);
+        dest_buf[0] = '\0';
+
         for ( i = 0; i < (gint)str_length; i++ )
         {
                 c_char = tvb_get_guint8(tvb, offset );
@@ -2487,9 +2496,9 @@
                 if(length_remaining==1)
                 {
                         dest_buf[i+1] = '\0';
-                        return;
+                        return dest_buf;
                 }
-                if (i >= 1023) { /* Don't process beyond the size of our varible */
+                if (i >= 1023) { /* Don't process beyond the size of our variable */
                     break;       /* If string is too long just return the first 1K. */
                 }
         }
@@ -2497,7 +2506,7 @@
                 i = 0;
         }
         dest_buf[i] = '\0';
-        return;
+        return dest_buf;
 }
 
 static void
@@ -2732,7 +2741,9 @@
  * and their associated values. Store results in passed buffer.
  */
 static void
-build_expert_data(proto_tree *ncp_tree, char *hf_name, char *buffer, int repeat_lookup, gboolean search_structs)
+build_expert_data(proto_tree *ncp_tree, const char *hf_name, char *buffer,
+                  size_t buffer_size, int repeat_lookup,
+		  gboolean search_structs)
 {
 	proto_tree		*tree_pointer;
 	proto_tree		*tree_loc;
@@ -2755,23 +2766,24 @@
 			{
             case 3:				/* uint8 */
             case 4:				/* uint16 */
-                g_snprintf(buffer, get_finfo_length(tree_pointer->finfo)*4, "%d", get_finfo_value_integer(tree_pointer->finfo));
+                g_snprintf(buffer, buffer_size, "%u", get_finfo_value_integer(tree_pointer->finfo));
 				break;
 
             case 6:             /* uint32 */
-                g_snprintf(buffer, get_finfo_length(tree_pointer->finfo)*4, "%08x", get_finfo_value_integer(tree_pointer->finfo));
+                g_snprintf(buffer, buffer_size, "%08x", get_finfo_value_integer(tree_pointer->finfo));
 				break;
             case 17:
             case 18:
             case 19:
 			case 20:			/* string */
+                /* XXX: Should we verify: buffer_size is as large as value returned by get_finfo_length(...)  ???      */
 		        uni_to_string(get_finfo_value_string(tree_pointer->finfo), get_finfo_length(tree_pointer->finfo), buffer);
                 if (repeat_lookup > 0) {
                     if (strlen(temp_buffer) + strlen(buffer) < 250) {
                         g_strlcat(temp_buffer, buffer, 256);
                         repeat_lookup--;
                         if (repeat_lookup == 0) {
-                            g_strlcpy(buffer, temp_buffer, 256);
+                            g_strlcpy(buffer, temp_buffer, buffer_size);
                             break;
                         }
                         else
@@ -2791,10 +2803,10 @@
                 }
             case 21:
             case 22:             /* Bytes */
-                g_snprintf(buffer, (get_finfo_length(tree_pointer->finfo))*4, "%s", bytes_to_str(get_finfo_value_string(tree_pointer->finfo), get_finfo_length(tree_pointer->finfo)));
+                g_snprintf(buffer, buffer_size, "%s", bytes_to_str(get_finfo_value_string(tree_pointer->finfo), get_finfo_length(tree_pointer->finfo)));
                 break;
 			default:			/* Dont currently handle. Only need string, integers, and bytes */
-				buffer = "Unsupported Expert Type\0";
+                g_snprintf(buffer, buffer_size, "Unsupported Expert Type");
 				return;
 			}
             if (repeat_lookup ==0) {
@@ -2807,7 +2819,7 @@
         }
 	}
     if (strlen(buffer)==0) {
-        buffer = "No Value\0";
+        g_snprintf(buffer, buffer_size, "No Value");
     }
     return;
 }
@@ -2832,38 +2844,48 @@
             if (ncp_rec->func == 66) {
                 char p_filehandle[15]="\0";
 
-                build_expert_data(ncp_tree, "ncp.file_handle", p_filehandle, 0, FALSE);
+                build_expert_data(ncp_tree, "ncp.file_handle", p_filehandle,
+                                  sizeof p_filehandle, 0, FALSE);
 
                 expert_add_info_format(pinfo, NULL, PI_REQUEST_CODE, PI_CHAT, "Close file handle %s", p_filehandle);
             }
             /* The following allows for oplock level 1 file opens echoed to expert tap. */
             if ((ncp_rec->func == 89 || ncp_rec->func == 87) && (ncp_rec->subfunc == 1 || ncp_rec->subfunc == 30 || ncp_rec->subfunc == 32 || ncp_rec->subfunc == 33)) {
-                char oaction[2]="\0";
+                char oaction[3]="\0";
                 char p_filename[256]="\0";
-                char p_rights[2]="\0";
-                char p_path_count[2]="\0";
+                char p_rights[3]="\0";
+                char p_path_count[3]="\0";
 
-                build_expert_data(ncp_tree, "ncp.open_create_mode", oaction, 0, FALSE);
-                build_expert_data(ncp_tree, "ncp.desired_access_rights", p_rights, 0, FALSE);
-                build_expert_data(ncp_tree, "ncp.path_count", p_path_count, 0, FALSE);
+                build_expert_data(ncp_tree, "ncp.open_create_mode", oaction,
+                                  sizeof oaction, 0, FALSE);
+                build_expert_data(ncp_tree, "ncp.desired_access_rights",
+                                  p_rights, sizeof p_rights, 0, FALSE);
+                build_expert_data(ncp_tree, "ncp.path_count", p_path_count,
+                                  sizeof p_path_count, 0, FALSE);
 
                 if (ncp_rec->func == 87) {
-                    build_expert_data(ncp_tree, "ncp.path", p_filename, atoi(p_path_count), FALSE);
+                    build_expert_data(ncp_tree, "ncp.path", p_filename,
+                                      sizeof p_filename,  atoi(p_path_count),
+				      FALSE);
                 }
                 else
                 {
-                    build_expert_data(ncp_tree, "ncp.path16", p_filename, atoi(p_path_count), FALSE);
+                    build_expert_data(ncp_tree, "ncp.path16", p_filename,
+                                      sizeof p_filename,  atoi(p_path_count),
+                                      FALSE);
                 }
 
                 expert_add_info_format(pinfo, NULL, PI_REQUEST_CODE, PI_CHAT, "%s: %s, Rights:(%s)", match_strval((atoi(oaction) & 0xeb), open_create_mode_vals), p_filename, match_strval((atoi(p_rights) & 0x5f), ncp_rights_vals));
             }
             /* The following allows for oplock ack's and level 2 request echoed to expert tap. */
             if (ncp_rec->func == 87 && ncp_rec->subfunc == 34) {
-                char cc_function[2]="\0";
+                char cc_function[3]="\0";
                 char p_filehandle[15]="\0";
 
-                build_expert_data(ncp_tree, "ncp.cc_file_handle", p_filehandle, 0, FALSE);
-                build_expert_data(ncp_tree, "ncp.cc_function", cc_function, 0, FALSE);
+                build_expert_data(ncp_tree, "ncp.cc_file_handle",
+                                  p_filehandle, sizeof p_filehandle, 0, FALSE);
+                build_expert_data(ncp_tree, "ncp.cc_function",
+                                  cc_function, sizeof cc_function, 0, FALSE);
 
                 expert_add_info_format(pinfo, NULL, PI_REQUEST_CODE, PI_CHAT, "Op-lock on handle %s - %s", p_filehandle, match_strval(atoi(cc_function), ncp_cc_function_vals));
             }
@@ -2873,9 +2895,12 @@
                 char n_rights[20]="\0";
                 char p_filehandle[15]="\0";
 
-                build_expert_data(ncp_tree, "ncp.file_handle", p_filehandle, 0, FALSE);
-                build_expert_data(ncp_tree, "ncp.access_rights_mask_word", p_rights, 0, FALSE);
-                build_expert_data(ncp_tree, "ncp.new_access_rights_mask", n_rights, 0, FALSE);
+                build_expert_data(ncp_tree, "ncp.file_handle",
+                                  p_filehandle, sizeof p_filehandle, 0, FALSE);
+                build_expert_data(ncp_tree, "ncp.access_rights_mask_word",
+                                  p_rights, sizeof p_rights, 0, FALSE);
+                build_expert_data(ncp_tree, "ncp.new_access_rights_mask",
+                                  n_rights, sizeof n_rights, 0, FALSE);
                 expert_add_info_format(pinfo, NULL, PI_REQUEST_CODE, PI_CHAT, "Change handle %s rights from:(%s) to:(%s)", p_filehandle, match_strval((atoi(p_rights) & 0x1ff), access_rights_vals), match_strval((atoi(n_rights) & 0x1ff), access_rights_vals));
             }
         }
@@ -2886,19 +2911,22 @@
         if (ncp_echo_file) { /* Echo File System Data */
             /* The following allows for oplock level 1 file opens echoed to expert tap. */
             if ((ncp_rec->func == 89 || ncp_rec->func == 87) && (ncp_rec->subfunc == 32 || ncp_rec->subfunc == 1)) {
-                char oaction[2]="\0";
-                char oplockflg[2]="\0";
+                char oaction[3]="\0";
+                char oplockflg[3]="\0";
                 char p_filehandle[15]="\0";
 
-                build_expert_data(ncp_tree, "ncp.open_create_action", oaction, 0, FALSE);
-                build_expert_data(ncp_tree, "ncp.file_handle", p_filehandle, 0, FALSE);
+                build_expert_data(ncp_tree, "ncp.open_create_action",
+                                  oaction, sizeof oaction, 0, FALSE);
+                build_expert_data(ncp_tree, "ncp.file_handle",
+                                  p_filehandle, sizeof p_filehandle, 0, FALSE);
 
                 if (ncp_rec->subfunc == 1) {
                     expert_add_info_format(pinfo, NULL, PI_RESPONSE_CODE, PI_CHAT, "%s - File handle %s", match_strval((atoi(oaction) & 0x8f), open_create_action_vals), p_filehandle);
                 }
                 else
                 {
-                    build_expert_data(ncp_tree, "ncp.o_c_ret_flags", oplockflg, 0, FALSE);
+                    build_expert_data(ncp_tree, "ncp.o_c_ret_flags",
+                                      oplockflg, sizeof oplockflg, 0, FALSE);
                     expert_add_info_format(pinfo, NULL, PI_RESPONSE_CODE, PI_CHAT, "%s - File handle %s, %s", match_strval((atoi(oaction) & 0x8f), open_create_action_vals), p_filehandle, match_strval(atoi(oplockflg), ncp_o_c_ret_flags_vals));
                 }
             }
@@ -2907,8 +2935,10 @@
                 char p_rights[20]="\0";
                 char p_filehandle[15]="\0";
 
-                build_expert_data(ncp_tree, "ncp.file_handle", p_filehandle, 0, FALSE);
-                build_expert_data(ncp_tree, "ncp.effective_rights", p_rights, 0, FALSE);
+                build_expert_data(ncp_tree, "ncp.file_handle",
+                                  p_filehandle, sizeof p_filehandle, 0, FALSE);
+                build_expert_data(ncp_tree, "ncp.effective_rights",
+                                  p_rights, sizeof p_rights, 0, FALSE);
                 expert_add_info_format(pinfo, NULL, PI_RESPONSE_CODE, PI_CHAT, "Handle %s effective rights:(%s)", p_filehandle, match_strval((atoi(p_rights) & 0x1ff), access_rights_vals));
             }
         }
@@ -2921,11 +2951,16 @@
             char p_lang[3]="\0";
 
             /* Get Server name and version info */
-            build_expert_data(ncp_tree, "ncp.server_name", fsname, 0, FALSE);
-            build_expert_data(ncp_tree, "ncp.product_major_version", p_maj_ver, 0, FALSE);
-            build_expert_data(ncp_tree, "ncp.product_minor_version", p_min_ver, 0, FALSE);
-            build_expert_data(ncp_tree, "ncp.product_revision_version", p_rev, 0, FALSE);
-            build_expert_data(ncp_tree, "ncp.os_language_id", p_lang, 0, FALSE);
+            build_expert_data(ncp_tree, "ncp.server_name",
+                              fsname, sizeof fsname, 0, FALSE);
+            build_expert_data(ncp_tree, "ncp.product_major_version",
+                              p_maj_ver, sizeof p_maj_ver, 0, FALSE);
+            build_expert_data(ncp_tree, "ncp.product_minor_version",
+                              p_min_ver, sizeof p_min_ver, 0, FALSE);
+            build_expert_data(ncp_tree, "ncp.product_revision_version",
+                              p_rev, sizeof p_rev, 0, FALSE);
+            build_expert_data(ncp_tree, "ncp.os_language_id",
+                              p_lang, sizeof p_lang, 0, FALSE);
             expert_add_info_format(pinfo, NULL, PI_RESPONSE_CODE, PI_CHAT, "Server %s, version %s.%s, support pack %s, language %s", fsname,
                                    p_maj_ver, p_min_ver, p_rev, p_lang);
         }
@@ -2961,10 +2996,10 @@
         nds_val         temp_values;
 
         voffset = vvalues->voffset;
-        if(tvb_get_guint8(tvb, voffset) == 0x00)
+        /*if(tvb_get_guint8(tvb, voffset) == 0x00)
         {
                 voffset = voffset+2;
-        }
+        }*/
 
         number_of_values = tvb_get_letohl(tvb, voffset);
 
@@ -2995,7 +3030,7 @@
                                {
                                        value1 = tvb_get_letohl(tvb, voffset);
                                        voffset = voffset + 4;
-                                       get_string(tvb, voffset, value1, vvalues->vstring);
+                                        vvalues->vstring = get_string(tvb, voffset, value1);
                                        proto_tree_add_string(nvtree, hf_value_string, tvb, voffset,
                                            value1, vvalues->vstring);
                                        voffset = voffset + value1;
@@ -3079,7 +3114,8 @@
                                tvb_ensure_bytes_exist(tvb, voffset, value1);
                                if (strcmp(vvalues->vstring, "zendmSearchType")==0) {
                                    proto_tree_add_uint_format(nvtree, hf_nds_uint32value, tvb, voffset,
-                                            value1, value2, "Value (%d) = %s", value2, match_strval(value2, zensearchenum));
+								   value1, value2, 
+								   "Value (%d) = %s", value2, match_strval(value2, zensearchenum));
                                }
                                else
                                {
@@ -3091,7 +3127,7 @@
                        case 0x0000000b:        /* Fax Number */
                                value1 = tvb_get_letohl(tvb, voffset); /* length of field */
                                voffset = voffset+4;
-                               get_string(tvb, voffset, value1, vvalues->vstring);
+				vvalues->vstring = get_string(tvb, voffset, value1);
                                proto_tree_add_string(nvtree, hf_value_string, tvb, voffset,
                                         value1, vvalues->vstring);
                                voffset = voffset + value1;
@@ -3139,7 +3175,7 @@
                                                 break;
                                         case NDS_PTYPE_URL:
                                         case NDS_PTYPE_DNS:
-                                                get_string(tvb, voffset, value3, vvalues->vstring);
+                                                vvalues->vstring = get_string(tvb, voffset, value3);
                                                 proto_tree_add_string(nvtree, hf_value_string, tvb, voffset,
                                                         value3, vvalues->vstring);
                                                 break;
@@ -3163,14 +3199,14 @@
                                voffset = voffset+4;
                                value3 = tvb_get_letohl(tvb, voffset); /* Length of Volume name */
                                voffset = voffset+4;
-                               get_string(tvb, voffset, value3, vvalues->vstring);
+				vvalues->vstring = get_string(tvb, voffset, value3);
                                proto_tree_add_string(nvtree, hf_value_string, tvb, voffset,
                                         value3, vvalues->vstring);
                                voffset = voffset+value3;
                                voffset += align_4(tvb, voffset);
                                value4 = tvb_get_letohl(tvb, voffset); /* Length of Path name */
                                voffset = voffset+4;
-                               get_string(tvb, voffset, value4, vvalues->vstring);
+				vvalues->vstring = get_string(tvb, voffset, value4);
                                proto_tree_add_string(nvtree, hf_value_string, tvb, voffset,
                                         value4, vvalues->vstring);
                                voffset = voffset+value4;
@@ -3181,7 +3217,7 @@
                                voffset = voffset + 4;
                                value2 = tvb_get_letohl(tvb, voffset); /* Length of Server name */
                                voffset = voffset+4;
-                               get_string(tvb, voffset, value2, vvalues->vstring);
+				vvalues->vstring = get_string(tvb, voffset, value2);
                                proto_tree_add_string(nvtree, hf_value_string, tvb, voffset,
                                         value2, vvalues->vstring);
                                voffset = voffset+value2;
@@ -3208,6 +3244,13 @@
                                proto_tree_add_uint_format(nvtree, hf_replica_number, tvb, voffset,
                                         4, value3, "Replica Number %d", value3);
                                voffset = voffset+4;
+                               if(vvalues->pflags & 0x8000)
+                               {
+                                   /* If this request flag is set then this is a server. Server structures
+                                    * include the RootID as part of the replica data. */
+                                   proto_tree_add_item(nvtree, hf_nds_partition_root_id, tvb, voffset, 4, FALSE);
+                                   voffset += 4; 
+                               }
                                number_of_items = tvb_get_letohl(tvb, voffset);  /* Number of Addresses */
                                aditem = proto_tree_add_uint_format(nvtree, hf_nds_uint32value, tvb, voffset,
                                         4, number_of_items, "Number of Addresses: %u", number_of_items);
@@ -3216,6 +3259,11 @@
                                voffset = voffset+4;
                                for (r=1; r <= number_of_items; r++)
                                {
+                                        /* Trap for end of packet */
+                                        if(tvb_length_remaining(tvb, voffset)<12)
+                                        {
+                                               THROW(ReportedBoundsError);
+                                        }
                                         voffset += align_4(tvb, voffset);
                                         value4 = tvb_get_letohl(tvb, voffset); /* type of Protocol */
                                         valuestr = match_strval(value4, nds_protocol_type);
@@ -3249,7 +3297,7 @@
                                                         break;
                                                 case NDS_PTYPE_URL:
                                                 case NDS_PTYPE_DNS:
-                                                        get_string(tvb, voffset, value5, vvalues->vstring);
+                                                        vvalues->vstring = get_string(tvb, voffset, value5);
                                                         proto_tree_add_string(adtree, hf_value_string, tvb, voffset,
                                                                 value5, vvalues->vstring);
                                                         break;
@@ -3265,7 +3313,7 @@
                                voffset = voffset + 4;
                                value2 = tvb_get_letohl(tvb, voffset);
                                voffset = voffset + 4;
-                               get_string(tvb, voffset, value2, vvalues->vstring); /* Unicode String */
+				vvalues->vstring = get_string(tvb, voffset, value2); /* Unicode String */
                                proto_tree_add_string(nvtree, hf_value_string, tvb, voffset,
                                    value2, vvalues->vstring);
                                if (strcmp(vvalues->vstring, "[Entry Rights]")) {
@@ -3279,7 +3327,7 @@
                                voffset += align_4(tvb, voffset);
                                value3 = tvb_get_letohl(tvb, voffset);
                                voffset = voffset + 4;
-                               get_string(tvb, voffset, value3, vvalues->vstring); /* Unicode Subject Name */
+				vvalues->vstring = get_string(tvb, voffset, value3); /* Unicode Subject Name */
                                proto_tree_add_string(nvtree, hf_value_string, tvb, voffset,
                                    value3, vvalues->vstring);
                                voffset = voffset + value3;
@@ -3367,7 +3415,7 @@
                        case 0x00000013:        /* Time Stamp */
                                value1 = tvb_get_letohl(tvb, voffset);         /* Seconds */
                                proto_tree_add_uint_format(nvtree, hf_nds_uint32value, tvb, voffset,
-                                        4, value1, "Length of Record: %d", value1);
+							   4, value1, "Length of Record: %u", value1);
                                voffset = voffset+4;
                                ns.secs = tvb_get_letohl(tvb, voffset);
                                ns.nsecs = 0;
@@ -3394,7 +3442,7 @@
                                voffset = voffset+4;
                                value3 = tvb_get_letohl(tvb, voffset);         /* Length of string */
                                voffset = voffset+4;
-                               get_string(tvb, voffset, value3, vvalues->vstring);
+				vvalues->vstring = get_string(tvb, voffset, value3);
                                proto_tree_add_string_format(nvtree, hf_value_string, tvb, voffset,
                                         value3, vvalues->vstring,
                                         "Server Distinguished Name - %s", vvalues->vstring);
@@ -3423,7 +3471,7 @@
                                voffset = voffset+4;
                                value4 = tvb_get_letohl(tvb, voffset);         /* Distinguished Name */
                                voffset = voffset+4;
-                               get_string(tvb, voffset, value4, vvalues->vstring);
+				vvalues->vstring = get_string(tvb, voffset, value4);
                                proto_tree_add_string_format(nvtree, hf_value_string, tvb, voffset,
                                         value4, vvalues->vstring,
                                         "Distinguished Name - %s", vvalues->vstring);
@@ -3441,7 +3489,7 @@
                                voffset = voffset+4;
                                value3 = tvb_get_letohl(tvb, voffset);         /* Subject */
                                voffset = voffset+4;
-                               get_string(tvb, voffset, value3, vvalues->vstring);
+				vvalues->vstring = get_string(tvb, voffset, value3);
                                proto_tree_add_string_format(nvtree, hf_value_string, tvb, voffset,
                                         value3, vvalues->vstring,
                                         "Subject - %s", vvalues->vstring);
@@ -3460,56 +3508,56 @@
                                value1 = tvb_get_letohl(tvb, voffset);
                                voffset = voffset + 4;
                                if (strcmp(vvalues->vstring, "zendmSearchOrder")==0) {
-                                   get_string(tvb, voffset, value1, vvalues->vstring);
+					vvalues->vstring = get_string(tvb, voffset, value1);
                                    if (strcmp(vvalues->vstring, "0")==0) {
                                        vvalues->vstring = "Value (0) = Object";
                                    }
-                                   if (strcmp(vvalues->vstring, "1")==0) {
+					else if (strcmp(vvalues->vstring, "1")==0) {
                                        vvalues->vstring = "Value (1) = Group";
                                    }
-                                   if (strcmp(vvalues->vstring, "2")==0) {
+					else if (strcmp(vvalues->vstring, "2")==0) {
                                        vvalues->vstring = "Value (2) = Container";
                                    }
-                                   if (strcmp(vvalues->vstring, "01")==0) {
+					else if (strcmp(vvalues->vstring, "01")==0) {
                                        vvalues->vstring = "Value (01) = Object, Group";
                                    }
-                                   if (strcmp(vvalues->vstring, "02")==0) {
+					else if (strcmp(vvalues->vstring, "02")==0) {
                                        vvalues->vstring = "Value (02) = Object, Container";
                                    }
-                                   if (strcmp(vvalues->vstring, "10")==0) {
+					else if (strcmp(vvalues->vstring, "10")==0) {
                                        vvalues->vstring = "Value (10) = Group, Object";
                                    }
-                                   if (strcmp(vvalues->vstring, "12")==0) {
+					else if (strcmp(vvalues->vstring, "12")==0) {
                                        vvalues->vstring = "Value (12) = Group, Container";
                                    }
-                                   if (strcmp(vvalues->vstring, "20")==0) {
+					else if (strcmp(vvalues->vstring, "20")==0) {
                                        vvalues->vstring = "Value (20) = Container, Object";
                                    }
-                                   if (strcmp(vvalues->vstring, "21")==0) {
+					else if (strcmp(vvalues->vstring, "21")==0) {
                                        vvalues->vstring = "Value (21) = Container, Group";
                                    }
-                                   if (strcmp(vvalues->vstring, "012")==0) {
+					else if (strcmp(vvalues->vstring, "012")==0) {
                                        vvalues->vstring = "Value (012) = Object, Group, Container";
                                    }
-                                   if (strcmp(vvalues->vstring, "021")==0) {
+					else if (strcmp(vvalues->vstring, "021")==0) {
                                        vvalues->vstring = "Value (021) = Object, Container, Group";
                                    }
-                                   if (strcmp(vvalues->vstring, "102")==0) {
+					else if (strcmp(vvalues->vstring, "102")==0) {
                                        vvalues->vstring = "Value (102) = Group, Object, Container";
                                    }
-                                   if (strcmp(vvalues->vstring, "120")==0) {
+					else if (strcmp(vvalues->vstring, "120")==0) {
                                        vvalues->vstring = "Value (120) = Group, Container, Object";
                                    }
-                                   if (strcmp(vvalues->vstring, "201")==0) {
+					else if (strcmp(vvalues->vstring, "201")==0) {
                                        vvalues->vstring = "Value (201) = Container, Object, Group";
                                    }
-                                   if (strcmp(vvalues->vstring, "210")==0) {
+					else if (strcmp(vvalues->vstring, "210")==0) {
                                        vvalues->vstring = "Value (210) = Container, Group, Object";
                                    }
                                }
                                else
                                {
-                                   get_string(tvb, voffset, value1, vvalues->vstring);
+					vvalues->vstring = get_string(tvb, voffset, value1);
                                }
                                proto_tree_add_string(nvtree, hf_value_string, tvb, voffset,
                                    value1, vvalues->vstring);
@@ -3536,7 +3584,6 @@
         guint32         i;
         guint16         replica_num;
         guint16         event_num;
-        nw_uni_t        mval_buf;
         proto_tree      *nestree;
 	    proto_item      *nesitem;
         proto_tree      *sub1tree;
@@ -3546,8 +3593,6 @@
         const char      *vstring="";
         nstime_t        ns;
 
-       	mval_buf.buffer[0] = '\0';
-
         switch (vtype)
         {
                 case 0: /* No Specifier Type */
@@ -3557,18 +3602,16 @@
                         ioffset = ioffset + 4;
                         break;
                 case 1: /* Unicode String */
-                        value1 = tvb_get_letohl(tvb, ioffset);   /* Delimeter Set */
+                        value1 = tvb_get_letohl(tvb, ioffset);   /* Delimiter Set */
                         ioffset = ioffset + 4;
-                        get_string(tvb, ioffset, value1, mval_buf.buffer);
-                        values->vstring = mval_buf.buffer;
+                        values->vstring = get_string(tvb, ioffset, value1);
                         proto_tree_add_string_format(estree, hf_mv_string, tvb, ioffset,
-                                value1, values->vstring, "Delimeter ->%s", values->vstring);
+                                value1, values->vstring, "Delimiter ->%s", values->vstring);
                         ioffset=ioffset + value1;
                         ioffset += align_4(tvb, ioffset);
                         value2 = tvb_get_letohl(tvb, ioffset);
                         ioffset = ioffset + 4;
-                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                        values->vstring = mval_buf.buffer;
+                        values->vstring = get_string(tvb, ioffset, value2);
                         proto_tree_add_string(estree, hf_mv_string, tvb, ioffset,
                                 value2, values->vstring);
                         values->voffset=ioffset + value2;
@@ -3595,18 +3638,16 @@
                                         ioffset = ioffset + 4;
                                         break;
                                 case 1: /* Unicode String */
-                                        value2 = tvb_get_letohl(tvb, ioffset);   /* Delimeter Set */
+                                        value2 = tvb_get_letohl(tvb, ioffset);   /* Delimiter Set */
                                         ioffset = ioffset + 4;
-                                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                        values->vstring = mval_buf.buffer;
+                                        values->vstring = get_string(tvb, ioffset, value2);
                                         proto_tree_add_string_format(nestree, hf_mv_string, tvb, ioffset,
-                                                value2, values->vstring, "Delimeter ->%s", values->vstring);
+                                                value2, values->vstring, "Delimiter ->%s", values->vstring);
                                         ioffset=ioffset + value2;
                                         ioffset += align_4(tvb, ioffset);
                                         value3 = tvb_get_letohl(tvb, ioffset);
                                         ioffset = ioffset + 4;
-                                        get_string(tvb, ioffset, value3, mval_buf.buffer);
-                                        values->vstring = mval_buf.buffer;
+                                        values->vstring = get_string(tvb, ioffset, value3);
                                         proto_tree_add_string(nestree, hf_mv_string, tvb, ioffset,
                                                 value3, values->vstring);
                                         values->voffset=ioffset + value3;
@@ -3638,18 +3679,16 @@
                                                         2, event_num);
                                                 ioffset = ioffset + 2;
                                         }
-                                        value4 = tvb_get_letohl(tvb, ioffset);   /* Delimeter Set */
+                                        value4 = tvb_get_letohl(tvb, ioffset);   /* Delimiter Set */
                                         ioffset = ioffset + 4;
-                                        get_string(tvb, ioffset, value4, mval_buf.buffer);
-                                        values->vstring = mval_buf.buffer;
+                                        values->vstring = get_string(tvb, ioffset, value4);
                                         proto_tree_add_string(nestree, hf_mv_string, tvb, ioffset,
                                                 value4, values->vstring);
                                         ioffset=ioffset + value4;
                                         ioffset += align_4(tvb, ioffset);
                                         value5 = tvb_get_letohl(tvb, ioffset);   /* RDN */
                                         ioffset = ioffset + 4;
-                                        get_string(tvb, ioffset, value5, mval_buf.buffer);
-                                        values->vstring = mval_buf.buffer;
+                                        values->vstring = get_string(tvb, ioffset, value5);
                                         proto_tree_add_string(nestree, hf_rdn_string, tvb, ioffset,
                                                 value5, values->vstring);
                                         ioffset=ioffset + value5;
@@ -3684,18 +3723,16 @@
                                         ioffset = ioffset + 4;
                                         break;
                                 case 1: /* Unicode String */
-                                        value2 = tvb_get_letohl(tvb, ioffset);   /* Delimeter Set */
+                                        value2 = tvb_get_letohl(tvb, ioffset);   /* Delimiter Set */
                                         ioffset = ioffset + 4;
-                                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                        values->vstring = mval_buf.buffer;
+                                        values->vstring = get_string(tvb, ioffset, value2);
                                         proto_tree_add_string_format(estree, hf_mv_string, tvb, ioffset,
-                                                value2, values->vstring, "Delimeter ->%s", values->vstring);
+                                                value2, values->vstring, "Delimiter ->%s", values->vstring);
                                         ioffset=ioffset + value2;
                                         ioffset += align_4(tvb, ioffset);
                                         value3 = tvb_get_letohl(tvb, ioffset);
                                         ioffset = ioffset + 4;
-                                        get_string(tvb, ioffset, value3, mval_buf.buffer);
-                                        values->vstring = mval_buf.buffer;
+                                        values->vstring = get_string(tvb, ioffset, value3);
                                         proto_tree_add_string(estree, hf_mv_string, tvb, ioffset,
                                                 value3, values->vstring);
                                         values->voffset=ioffset + value3;
@@ -3727,18 +3764,16 @@
                                                         2, event_num);
                                                 ioffset = ioffset + 2;
                                         }
-                                        value4 = tvb_get_letohl(tvb, ioffset);   /* Delimeter Set */
+                                        value4 = tvb_get_letohl(tvb, ioffset);   /* Delimiter Set */
                                         ioffset = ioffset + 4;
-                                        get_string(tvb, ioffset, value4, mval_buf.buffer);
-                                        values->vstring = mval_buf.buffer;
+                                        values->vstring = get_string(tvb, ioffset, value4);
                                         proto_tree_add_string(estree, hf_mv_string, tvb, ioffset,
                                                 value4, values->vstring);
                                         ioffset=ioffset + value4;
                                         ioffset += align_4(tvb, ioffset);
                                         value5 = tvb_get_letohl(tvb, ioffset);   /* RDN */
                                         ioffset = ioffset + 4;
-                                        get_string(tvb, ioffset, value5, mval_buf.buffer);
-                                        values->vstring = mval_buf.buffer;
+                                        values->vstring = get_string(tvb, ioffset, value5);
                                         proto_tree_add_string(estree, hf_rdn_string, tvb, ioffset,
                                                 value5, values->vstring);
                                         ioffset=ioffset + value5;
@@ -3767,7 +3802,7 @@
                                 value1 = tvb_get_letohl(tvb, ioffset);
 
 	                        proto_tree_add_uint_format(sub1tree, hf_referral_addcount, tvb, ioffset, 4,
-        	                        value1, "Number of Addresses in Referral - %d", value1);
+        	                        value1, "Number of Addresses in Referral - %u", value1);
 
                                 ioffset = ioffset + 4;
                                 for (i = 1 ; i <= value1; i++ )
@@ -3804,7 +3839,7 @@
                                                         break;
                                                 case NDS_PTYPE_URL:
                                                 case NDS_PTYPE_DNS:
-                                                        get_string(tvb, ioffset, value3, values->vstring);
+                                                        values->vstring = get_string(tvb, ioffset, value3);
                                                         proto_tree_add_string(sub1tree, hf_value_string, tvb, ioffset,
                                                                 value3, values->vstring);
                                                         break;
@@ -3835,18 +3870,16 @@
                                         ioffset = ioffset + 4;
                                         break;
                                 case 1: /* Unicode String */
-                                        value2 = tvb_get_letohl(tvb, ioffset);   /* Delimeter Set */
+                                        value2 = tvb_get_letohl(tvb, ioffset);   /* Delimiter Set */
                                         ioffset = ioffset + 4;
-                                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                        values->vstring = mval_buf.buffer;
+                                        values->vstring = get_string(tvb, ioffset, value2);
                                         proto_tree_add_string_format(estree, hf_mv_string, tvb, ioffset,
-                                                value2, values->vstring, "Delimeter ->%s", values->vstring);
+                                                value2, values->vstring, "Delimiter ->%s", values->vstring);
                                         ioffset=ioffset + value2;
                                         ioffset += align_4(tvb, ioffset);
                                         value3 = tvb_get_letohl(tvb, ioffset);
                                         ioffset = ioffset + 4;
-                                        get_string(tvb, ioffset, value3, mval_buf.buffer);
-                                        values->vstring = mval_buf.buffer;
+                                        values->vstring = get_string(tvb, ioffset, value3);
                                         proto_tree_add_string(estree, hf_mv_string, tvb, ioffset,
                                                 value3, values->vstring);
                                         values->voffset=ioffset + value3;
@@ -3878,18 +3911,16 @@
                                                         2, event_num);
                                                 ioffset = ioffset + 2;
                                         }
-                                        value4 = tvb_get_letohl(tvb, ioffset);   /* Delimeter Set */
+                                        value4 = tvb_get_letohl(tvb, ioffset);   /* Delimiter Set */
                                         ioffset = ioffset + 4;
-                                        get_string(tvb, ioffset, value4, mval_buf.buffer);
-                                        values->vstring = mval_buf.buffer;
+                                        values->vstring = get_string(tvb, ioffset, value4);
                                         proto_tree_add_string(estree, hf_mv_string, tvb, ioffset,
                                                 value4, values->vstring);
                                         ioffset=ioffset + value4;
                                         ioffset += align_4(tvb, ioffset);
                                         value5 = tvb_get_letohl(tvb, ioffset);   /* RDN */
                                         ioffset = ioffset + 4;
-                                        get_string(tvb, ioffset, value5, mval_buf.buffer);
-                                        values->vstring = mval_buf.buffer;
+                                        values->vstring = get_string(tvb, ioffset, value5);
                                         proto_tree_add_string(estree, hf_rdn_string, tvb, ioffset,
                                                 value5, values->vstring);
                                         ioffset=ioffset + value5;
@@ -3909,12 +3940,12 @@
                 case 4: /* Tuned */
                         value1 = tvb_get_letohl(tvb, ioffset);
                         sub1item = proto_tree_add_uint_format(estree, hf_es_rdn_count, tvb, ioffset,
-                                4, value1, "Number of RDN Items %d", value1);
+                                4, value1, "Number of RDN Items %u", value1);
                         sub1tree = proto_item_add_subtree(sub1item, ett_nds);
                         ioffset = ioffset + 4;
                         for (r = 1 ; r <= value1; r++ )
                         {
-                                sub2item = proto_tree_add_text(sub1tree, tvb, ioffset, 0, "Item %d", r);
+                                sub2item = proto_tree_add_text(sub1tree, tvb, ioffset, 0, "Item %u", r);
                                 sub2tree = proto_item_add_subtree(sub2item, ett_nds);
 
                                 ns.secs = tvb_get_letohl(tvb, ioffset);   /* Seconds */
@@ -3931,18 +3962,16 @@
                                         2, event_num);
                                 ioffset = ioffset + 2;
                         }
-                        value3 = tvb_get_letohl(tvb, ioffset);   /* Delimeter Set */
+                        value3 = tvb_get_letohl(tvb, ioffset);   /* Delimiter Set */
                         ioffset = ioffset + 4;
-                        get_string(tvb, ioffset, value3, mval_buf.buffer);
-                        values->vstring = mval_buf.buffer;
+                        values->vstring = get_string(tvb, ioffset, value3);
                         proto_tree_add_string(sub1tree, hf_mv_string, tvb, ioffset,
                                 value3, values->vstring);
                         ioffset=ioffset + value3;
                         ioffset += align_4(tvb, ioffset);
                         value4 = tvb_get_letohl(tvb, ioffset);   /* RDN */
                         ioffset = ioffset + 4;
-                        get_string(tvb, ioffset, value4, mval_buf.buffer);
-                        values->vstring = mval_buf.buffer;
+                        values->vstring = get_string(tvb, ioffset, value4);
                         proto_tree_add_string(sub1tree, hf_rdn_string, tvb, ioffset,
                                 value4, values->vstring);
                         ioffset=ioffset + value4;
@@ -3992,7 +4021,7 @@
         /* start of DCWPutAttribute */
         values->vvalue = tvb_get_letohl(tvb, ioffset);
         ioffset = ioffset + 4;
-        get_string(tvb, ioffset, values->vvalue, values->vstring);
+	values->vstring = get_string(tvb, ioffset, values->vvalue);
         proto_tree_add_string(it_tree, hf_mv_string, tvb, ioffset,
                 values->vvalue, values->vstring);
         ioffset += values->vvalue;
@@ -4012,7 +4041,7 @@
         ioffset = ioffset + 4;
         values->vvalue = tvb_get_letohl(tvb, ioffset);
         ioffset = ioffset + 4;
-        get_string(tvb, ioffset, values->vvalue, values->vstring);
+	values->vstring = get_string(tvb, ioffset, values->vvalue);
         proto_tree_add_string(it_tree, hf_mv_string, tvb, ioffset,
                 values->vvalue, values->vstring);
         ioffset += values->vvalue;
@@ -4023,7 +4052,7 @@
             /* start of DCWPutAttribute */
             values->vvalue = tvb_get_letohl(tvb, ioffset);
             ioffset = ioffset + 4;
-            get_string(tvb, ioffset, values->vvalue, values->vstring);
+	values->vstring = get_string(tvb, ioffset, values->vvalue);
             proto_tree_add_string(it_tree, hf_mv_string, tvb, ioffset,
                     values->vvalue, values->vstring);
             ioffset = ioffset + values->vvalue;
@@ -4037,7 +4066,7 @@
 
             values->vvalue = tvb_get_letohl(tvb, ioffset);
             ioffset = ioffset + 4;
-            get_string(tvb, ioffset, values->vvalue, values->vstring);
+	values->vstring = get_string(tvb, ioffset, values->vvalue);
             proto_tree_add_string(it_tree, hf_mv_string, tvb, ioffset,
                     values->vvalue, values->vstring);
             ioffset += values->vvalue;
@@ -4059,7 +4088,7 @@
         ioffset = ioffset + 4;*/
         values->vvalue = tvb_get_letohl(tvb, ioffset);
         ioffset = ioffset + 4;
-        get_string(tvb, ioffset, values->vvalue, values->vstring);
+	values->vstring = get_string(tvb, ioffset, values->vvalue);
         proto_tree_add_string(it_tree, hf_mv_string, tvb, ioffset,
                 values->vvalue, values->vstring);
         ioffset += values->vvalue;
@@ -4081,7 +4110,7 @@
             /* start of DCWPutAttribute */
             values->vvalue = tvb_get_letohl(tvb, ioffset);
             ioffset = ioffset + 4;
-            get_string(tvb, ioffset, values->vvalue, values->vstring);
+	values->vstring = get_string(tvb, ioffset, values->vvalue);
             proto_tree_add_string(it_tree, hf_mv_string, tvb, ioffset,
                     values->vvalue, values->vstring);
             ioffset += values->vvalue;
@@ -4101,7 +4130,7 @@
             ioffset = ioffset + 4;
             values->vvalue = tvb_get_letohl(tvb, ioffset);
             ioffset = ioffset + 4;
-            get_string(tvb, ioffset, values->vvalue, values->vstring);
+	values->vstring = get_string(tvb, ioffset, values->vvalue);
             proto_tree_add_string(it_tree, hf_mv_string, tvb, ioffset,
                     values->vvalue, values->vstring);
             ioffset += values->vvalue;
@@ -4123,7 +4152,7 @@
             /* start of DCWPutAttribute */
             values->vvalue = tvb_get_letohl(tvb, ioffset);
             ioffset = ioffset + 4;
-            get_string(tvb, ioffset, values->vvalue, values->vstring);
+	values->vstring = get_string(tvb, ioffset, values->vvalue);
             proto_tree_add_string(it_tree, hf_mv_string, tvb, ioffset,
                     values->vvalue, values->vstring);
             ioffset += values->vvalue;
@@ -4143,7 +4172,7 @@
             ioffset = ioffset + 4;
             values->vvalue = tvb_get_letohl(tvb, ioffset);
             ioffset = ioffset + 4;
-            get_string(tvb, ioffset, values->vvalue, values->vstring);
+	values->vstring = get_string(tvb, ioffset, values->vvalue);
             proto_tree_add_string(it_tree, hf_mv_string, tvb, ioffset,
                     values->vvalue, values->vstring);
             ioffset += values->vvalue;
@@ -4168,7 +4197,7 @@
             ioffset = ioffset + 4;
             values->vvalue = tvb_get_letohl(tvb, ioffset);
             ioffset = ioffset + 4;
-            get_string(tvb, ioffset, values->vvalue, values->vstring);
+	values->vstring = get_string(tvb, ioffset, values->vvalue);
             proto_tree_add_string(it_tree, hf_mv_string, tvb, ioffset,
                     values->vvalue, values->vstring);
             ioffset += values->vvalue;
@@ -4202,7 +4231,7 @@
         ioffset += 4;
         for (i = 0; i < number_of_items; i++)
         {
-            it_subitem1 = proto_tree_add_text(it_subtree, tvb, ioffset, -1, "Item #: %d", i+1);
+            it_subitem1 = proto_tree_add_text(it_subtree, tvb, ioffset, -1, "Item #: %u", i+1);
             it_subtree1 = proto_item_add_subtree(it_subitem1, ett_nds);
 
             values->voffset = ioffset;
@@ -4242,7 +4271,7 @@
     /* start of DCWPutAttribute */
     values->vvalue = tvb_get_letohl(tvb, ioffset);
     ioffset = ioffset + 4;
-    get_string(tvb, ioffset, values->vvalue, values->vstring);
+    values->vstring = get_string(tvb, ioffset, values->vvalue);
     proto_tree_add_string(it_tree, hf_mv_string, tvb, ioffset,
             values->vvalue, values->vstring);
     ioffset = ioffset + values->vvalue;
@@ -4262,7 +4291,7 @@
     ioffset = ioffset + 4;
     values->vvalue = tvb_get_letohl(tvb, ioffset);
     ioffset = ioffset + 4;
-    get_string(tvb, ioffset, values->vvalue, values->vstring);
+    values->vstring = get_string(tvb, ioffset, values->vvalue);
     proto_tree_add_string(it_tree, hf_mv_string, tvb, ioffset,
             values->vvalue, values->vstring);
     ioffset += values->vvalue;
@@ -4325,10 +4354,9 @@
 {
     guint32     iter_flags, ioffset = values->voffset;
     guint16     replica_num, event_num;
-    char        temp_string[256];
     nstime_t    ns;
 
-    values->vstring = temp_string;
+    values->vstring = NULL;
     ioffset += align_4(tvb, ioffset);
     iter_flags = tvb_get_letohl(tvb, ioffset);
 
@@ -4544,50 +4572,50 @@
     if (iter_flags & DSI_BASE_CLASS) { /* Base Class */
         values->vvalue = tvb_get_letohl(tvb, ioffset);         /* Length of string */
         ioffset = ioffset+4;
-        get_string(tvb, ioffset, values->vvalue, values->vstring);
+        values->vstring = get_string(tvb, ioffset, values->vvalue);
         proto_tree_add_string_format(it_tree, hf_value_string, tvb, ioffset,
-                values->vvalue, temp_string,
-                "Base Class: - %s", temp_string);
+                values->vvalue, values->vstring,
+                "Base Class: - %s", values->vstring);
         ioffset = ioffset+values->vvalue;
         ioffset += align_4(tvb, ioffset);
     }
     if (iter_flags & DSI_ENTRY_RDN) { /* Relative Distiguished Name */
         values->vvalue = tvb_get_letohl(tvb, ioffset);         /* Length of string */
         ioffset = ioffset+4;
-        get_string(tvb, ioffset, values->vvalue, values->vstring);
+        values->vstring = get_string(tvb, ioffset, values->vvalue);
         proto_tree_add_string_format(it_tree, hf_value_string, tvb, ioffset,
-                 values->vvalue, temp_string,
-                 "Relative Distinguished Name - %s", temp_string);
+                 values->vvalue, values->vstring,
+                 "Relative Distinguished Name - %s", values->vstring);
         ioffset = ioffset+values->vvalue;
         ioffset += align_4(tvb, ioffset);
     }
     if (iter_flags & DSI_ENTRY_DN) { /* Distinguished Name */
         values->vvalue = tvb_get_letohl(tvb, ioffset);         /* Length of string */
         ioffset = ioffset+4;
-        get_string(tvb, ioffset, values->vvalue, values->vstring);
+        values->vstring = get_string(tvb, ioffset, values->vvalue);
         proto_tree_add_string_format(it_tree, hf_value_string, tvb, ioffset,
-                 values->vvalue, temp_string,
-                 "Distinguished Name - %s", temp_string);
+                 values->vvalue, values->vstring,
+                 "Distinguished Name - %s", values->vstring);
         ioffset = ioffset+values->vvalue;
         ioffset += align_4(tvb, ioffset);
     }
     if (iter_flags & DSI_PARTITION_ROOT_DN) { /* Root Distinguished Name */
         values->vvalue = tvb_get_letohl(tvb, ioffset);         /* Length of string */
         ioffset = ioffset+4;
-        get_string(tvb, ioffset, values->vvalue, values->vstring);
+        values->vstring = get_string(tvb, ioffset, values->vvalue);
         proto_tree_add_string_format(it_tree, hf_value_string, tvb, ioffset,
-                 values->vvalue, temp_string,
-                 "Root Distinguished Name - %s", temp_string);
+                 values->vvalue, values->vstring,
+                 "Root Distinguished Name - %s", values->vstring);
         ioffset = ioffset+values->vvalue;
         ioffset += align_4(tvb, ioffset);
     }
     if (iter_flags & DSI_PARENT_DN) { /* Parent Distinguished Name */
         values->vvalue = tvb_get_letohl(tvb, ioffset);         /* Length of string */
         ioffset = ioffset+4;
-        get_string(tvb, ioffset, values->vvalue, values->vstring);
+        values->vstring = get_string(tvb, ioffset, values->vvalue);
         proto_tree_add_string_format(it_tree, hf_value_string, tvb, ioffset,
-                 values->vvalue, temp_string,
-                 "Parent Distinguished Name - %s", temp_string);
+                 values->vvalue, values->vstring,
+                 "Parent Distinguished Name - %s", values->vstring);
         ioffset = ioffset+values->vvalue;
         ioffset += align_4(tvb, ioffset);
     }
@@ -4601,9 +4629,9 @@
     if (iter_flags & DSI_DEREFERENCED_BASE_CLASS) { /* Dereference Base Class */
         values->vvalue = tvb_get_letohl(tvb, ioffset);
         ioffset = ioffset + 4;
-        get_string(tvb, ioffset, values->vvalue, values->vstring);
+        values->vstring = get_string(tvb, ioffset, values->vvalue);
         proto_tree_add_string(it_tree, hf_deref_base, tvb, ioffset,
-                values->vvalue, temp_string);
+                values->vvalue, values->vstring);
         ioffset = ioffset + values->vvalue;
     }
     if (iter_flags & DSI_REPLICA_NUMBER) { /* Replica Number */
@@ -4713,8 +4741,8 @@
     values.vlength = 0;
     values.voffset = 0;
     values.hfname = 0;
-    values.vdesc = "\0";
-    values.vstring = "\0";
+    values.vdesc = "";
+    values.vstring = NULL;
     values.mvtype = 0;
     values.vflags = 0;
 
@@ -4787,25 +4815,27 @@
                 ioffset += 4;
                 for (i=0; i < number_of_items; i++) {
                     /* Process the attribute tag */
-                    values.vvalue = tvb_get_letohl(tvb, ioffset);
+                    /*values.vvalue = tvb_get_letohl(tvb, ioffset);
                     values.vstring = (char *)match_strval(values.vvalue, nds_tags);
                     if(values.vstring == NULL)
                     {
                             values.vstring = "No Tags Set";
                     }
-                    proto_tree_add_string(it_subtree, hf_nds_tag_string, tvb, ioffset, 4, values.vstring);
+                    proto_tree_add_string(it_subtree, hf_nds_tag_string, tvb, ioffset, 4, values.vstring);*/
+
+                    proto_tree_add_item(it_subtree, hf_iter_index, tvb, ioffset, 4, TRUE);
                     ioffset = ioffset + 4;
 
                     /* start of DCWPutAttribute */
-                    values.vvalue = tvb_get_letohl(tvb, ioffset);
+                    /*values.vvalue = tvb_get_letohl(tvb, ioffset);
                     ioffset = ioffset + 4;
-                    get_string(tvb, ioffset, values.vvalue, values.vstring);
+                    values.vstring = get_string(tvb, ioffset, values.vvalue);
                     proto_tree_add_string(it_subtree, hf_mv_string, tvb, ioffset,
                             values.vvalue, values.vstring);
-                    ioffset = ioffset + values.vvalue;
+                    ioffset = ioffset + values.vvalue;*/
                     /* end of DCWPutAttribute */
 
-                    ioffset += align_4(tvb, ioffset);
+                    /*ioffset += align_4(tvb, ioffset);*/
                     if (tvb_length_remaining(tvb, ioffset) < 4) {
                         THROW(ReportedBoundsError);
                         return;
@@ -4845,7 +4875,7 @@
                 }
                 values.vvalue = tvb_get_letohl(tvb, ioffset);
                 ioffset = ioffset + 4;
-                get_string(tvb, ioffset, values.vvalue, values.vstring);
+                values.vstring = get_string(tvb, ioffset, values.vvalue);
                 proto_tree_add_string(it_subtree, hf_mv_string, tvb, ioffset,
                         values.vvalue, values.vstring);
                 ioffset = ioffset + values.vvalue;
@@ -4916,7 +4946,7 @@
                 ioffset += 4;
 				for (i = 0; i < number_of_items; i++)
 				{
-                    it_subitem1 = proto_tree_add_text(it_subtree, tvb, ioffset, -1, "Item #: %d", i+1);
+                    it_subitem1 = proto_tree_add_text(it_subtree, tvb, ioffset, -1, "Item #: %u", i+1);
                     it_subtree1 = proto_item_add_subtree(it_subitem1, ett_nds);
 
                     ioffset += align_4(tvb, ioffset);
@@ -5007,7 +5037,6 @@
 	    proto_item      *nitem;
         proto_item      *aitem;
         guint32         number_of_referrals = 0;
-        nw_uni_t        mval_buf;
         proto_tree      *estree;
 	    proto_item      *esitem;
         guint16         replica_num = 0;
@@ -5021,8 +5050,8 @@
 	    gint		    length_remaining;
         nstime_t        ns;
 
-       	mval_buf.buffer[0] = '\0';
         mv_resolve_name_string[0] = '\0';
+        values->vstring = "";
 
         /* Is the value passed a string or UINT32? */
         if(values->mvtype != MVTYPE_LIST_PARTITIONS && values->mvtype != MVTYPE_PROCESS_TAGS)
@@ -5047,8 +5076,7 @@
                                 ioffset += align_4(tvb, ioffset);
                                 value1 = tvb_get_letohl(tvb, ioffset);
                                 ioffset = ioffset + 4;
-                                get_string(tvb, ioffset, value1, mval_buf.buffer);
-                                values->vstring = mval_buf.buffer;
+                                values->vstring = get_string(tvb, ioffset, value1);
                                 proto_tree_add_string(ntree, hf_mv_string, tvb, ioffset,
                                         value1, values->vstring);
                                 ioffset = ioffset + value1;
@@ -5064,8 +5092,7 @@
                                                 ioffset += align_4(tvb, ioffset);
                                                 value1 = tvb_get_letohl(tvb, ioffset);
                                                 ioffset = ioffset + 4;
-                                                get_string(tvb, ioffset, value1, mval_buf.buffer);
-                                                values->vstring = mval_buf.buffer;
+                                                values->vstring = get_string(tvb, ioffset, value1);
                                                 proto_tree_add_string(ntree, hf_mv_string, tvb, ioffset,
                                                         value1, values->vstring);
                                                 ioffset = ioffset + value1;
@@ -5085,8 +5112,7 @@
                                                 ioffset = ioffset + 4;
                                                 value2 = tvb_get_letohl(tvb, ioffset);
                                                 ioffset = ioffset + 4;
-                                                get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                                values->vstring = mval_buf.buffer;
+                                                values->vstring = get_string(tvb, ioffset, value2);
                                                 proto_tree_add_string(ntree, hf_mv_string, tvb, ioffset,
                                                         value2, values->vstring);
                                                 ioffset += value2;
@@ -5111,8 +5137,7 @@
                                                 ioffset = ioffset + 4;
                                                 value2 = tvb_get_letohl(tvb, ioffset);
                                                 ioffset = ioffset + 4;
-                                                get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                                values->vstring = mval_buf.buffer;
+                                                values->vstring = get_string(tvb, ioffset, value2);
                                                 proto_tree_add_string(ntree, hf_mv_string, tvb, ioffset,
                                                         value2, values->vstring);
                                                 values->voffset=ioffset + value2;
@@ -5121,7 +5146,7 @@
                                                 value3 = tvb_get_letohl(tvb, ioffset);
 
                 	                            proto_tree_add_uint_format(ntree, hf_nds_uint32value, tvb, ioffset, 4,
-                        	                        value3, "Number of Values - %d", value3);
+                        	                        value3, "Number of Values - %u", value3);
 
                                                 ioffset = ioffset + 4;
                                                 for (r = 1 ; r <= value3; r++ )
@@ -5150,8 +5175,7 @@
                                                 ioffset = ioffset + 4;
                                                 value2 = tvb_get_letohl(tvb, ioffset);
                                                 ioffset = ioffset + 4;
-                                                get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                                values->vstring = mval_buf.buffer;
+                                                values->vstring = get_string(tvb, ioffset, value2);
                                                 proto_tree_add_string(ntree, hf_mv_string, tvb, ioffset,
                                                         value2, values->vstring);
                                                 ioffset = ioffset + value2;
@@ -5159,7 +5183,7 @@
                                                 value3 = tvb_get_letohl(tvb, ioffset);
 
                 	                        aitem = proto_tree_add_uint_format(ntree, hf_nds_uint32value, tvb, ioffset, 4,
-                        	                        value3, "Number of Values - %d", value3);
+                        	                        value3, "Number of Values - %u", value3);
 
                                                 atree = proto_item_add_subtree(aitem, ett_nds);
 
@@ -5246,15 +5270,14 @@
                                                 ioffset = ioffset + 4;
                                                 value2 = tvb_get_letohl(tvb, ioffset);
                                                 ioffset = ioffset + 4;
-                                                get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                                values->vstring = mval_buf.buffer;
+                                                values->vstring = get_string(tvb, ioffset, value2);
                                                 proto_tree_add_string(ntree, hf_mv_string, tvb, ioffset,
                                                         value2, values->vstring);
                                                 ioffset = ioffset + value2;
                                                 value3 = tvb_get_letohl(tvb, ioffset);
 
                 	                        proto_tree_add_uint_format(ntree, hf_nds_uint32value, tvb, ioffset, 4,
-                        	                        value3, "Number of Values - %d", value3);
+                        	                        value3, "Number of Values - %u", value3);
 
                                                 ioffset = ioffset + 4;
                                                 for (r = 1 ; r <= value3; r++ )
@@ -5346,8 +5369,7 @@
                         {
                                 value1 = tvb_get_letohl(tvb, ioffset);
                                 ioffset = ioffset + 4;
-                                get_string(tvb, ioffset, value1, mval_buf.buffer);
-                                values->vstring = mval_buf.buffer;
+                                values->vstring = get_string(tvb, ioffset, value1);
                                 proto_tree_add_string(ntree, hf_mv_string, tvb, ioffset,
                                         value1, values->vstring);
                                 ioffset = ioffset + value1;
@@ -5364,8 +5386,7 @@
                                 ioffset += align_4(tvb, ioffset);
                                 value1 = tvb_get_letohl(tvb, ioffset);
                                 ioffset = ioffset + 4;
-                                get_string(tvb, ioffset, value1, mval_buf.buffer);
-                                values->vstring = mval_buf.buffer;
+                                values->vstring = get_string(tvb, ioffset, value1);
                                 proto_tree_add_string(ntree, hf_nds_base, tvb, ioffset,
                                         value1, values->vstring);
                                 values->mvtype = MVTYPE_ATTR_REQUEST;
@@ -5376,12 +5397,10 @@
                 case MVTYPE_READ_REPLICAS:	/* Read Replicas */
                         for (i = 1 ; i <= values->vvalue; i++ )
                         {
-
                                 bvalue = 0x00000001;
 
                                 for (r = 0 ; r < 9; r++ )
                                 {
-
                                         if (values->vflags & bvalue)
                                         {
                                                 switch(bvalue)
@@ -5475,8 +5494,7 @@
                                                         case 0x00000040:                /*p3values.bit7 = "Distinguished Name"*/
                                                                 value1 = tvb_get_letohl(tvb, ioffset);
                                                                 ioffset = ioffset + 4;
-                                                                get_string(tvb, ioffset, value1, mval_buf.buffer);
-                                                                temp_values.vstring = mval_buf.buffer;
+                                                                temp_values.vstring = get_string(tvb, ioffset, value1);
                                                                 proto_tree_add_string(ntree, hf_nds_name, tvb, ioffset,
                                                                         value1, temp_values.vstring);
                                                                 ioffset = ioffset + value1;
@@ -5508,7 +5526,6 @@
                                                                 break;
                                                         default:
                                                                 break;
-
                                                 }
                                         }
                                         bvalue = bvalue*2;
@@ -5541,8 +5558,7 @@
                                ioffset = ioffset+4;
                                value2 = tvb_get_letohl(tvb, ioffset);
                                ioffset = ioffset + 4;
-                               get_string(tvb, ioffset, value2, mval_buf.buffer);   /* Name of Attribute */
-                               temp_values.vstring = mval_buf.buffer;
+                               temp_values.vstring = get_string(tvb, ioffset, value2);   /* Name of Attribute */
                                proto_tree_add_string(ntree, hf_mv_string, tvb, ioffset,
                                        value2, temp_values.vstring);
                                ioffset = ioffset + value2;
@@ -5550,6 +5566,7 @@
                                if(value1 != 1 && value1 != 6)
                                {
                                        values->voffset = ioffset;
+                                       /* XX: Is values.vstring set properly at this point ?? */
                                        print_nds_values(ntree, tvb, 9, values);
                                        ioffset = values->voffset;
                                }
@@ -5559,7 +5576,6 @@
                 case MVTYPE_ADDR_REFERRAL_REQUEST: /* Address Referral Request */
                         for (i = 0 ; i < values->vvalue; i++ )
                         {
-
                                value1 = tvb_get_letohl(tvb, ioffset);
                                valuestr = match_strval(value1, nds_protocol_type);
                                if (valuestr == NULL)
@@ -5585,7 +5601,7 @@
                                 value1 = tvb_get_letohl(tvb, ioffset);
 
 	                        proto_tree_add_uint_format(atree, hf_referral_addcount, tvb, ioffset, 4,
-        	                        value1, "Number of Addresses in Referral - %d", value1);
+        	                        value1, "Number of Addresses in Referral - %u", value1);
 
                                 ioffset = ioffset + 4;
                                 for (i = 1 ; i <= value1; i++ )
@@ -5623,7 +5639,7 @@
                                                         break;
                                                 case NDS_PTYPE_URL:
                                                 case NDS_PTYPE_DNS:
-                                                        get_string(tvb, ioffset, value3, values->vstring);
+                                                        values->vstring = get_string(tvb, ioffset, value3);
                                                         proto_tree_add_string(atree, hf_value_string, tvb, ioffset,
                                                                 value3, values->vstring);
                                                         break;
@@ -5680,7 +5696,7 @@
                                                 break;
                                         case NDS_PTYPE_URL:
                                         case NDS_PTYPE_DNS:
-                                                get_string(tvb, ioffset, value3, values->vstring);
+                                                values->vstring = get_string(tvb, ioffset, value3);
                                                 proto_tree_add_string(atree, hf_value_string, tvb, ioffset,
                                                       value3, values->vstring);
                                                 break;
@@ -5719,7 +5735,7 @@
                         g_strlcpy(mv_resolve_name_string, values->vstring, 128);
                         value4 = tvb_get_letohl(tvb, ioffset);
 		                aitem = proto_tree_add_uint_format(ntree, hf_referral_record, tvb, ioffset, 4,
-		                    value4, "Referral Protocols - %d", value4);
+		                    value4, "Referral Protocols - %u", value4);
                         atree = proto_item_add_subtree(aitem, ett_nds);
                         ioffset += 4;
                         for (i = 0 ; i < value4; i++ )
@@ -5736,7 +5752,7 @@
                         }
                         value6 = tvb_get_letohl(tvb, ioffset);
 		                aitem = proto_tree_add_uint_format(ntree, hf_referral_record, tvb, ioffset, 4,
-		                    value6, "Tree Walking Protocols - %d", value6);
+		                    value6, "Tree Walking Protocols - %u", value6);
                         atree = proto_item_add_subtree(aitem, ett_nds);
                         ioffset += 4;
                         for (i = 0 ; i < value6; i++ )
@@ -5768,7 +5784,7 @@
                 case MVTYPE_LIST_PARTITIONS:	/* List Partitions */
                         number_of_referrals = values->vvalue;
                         /* A bad packet could put us in a tight loop so trap for anything
-                         * over 256 referals.
+                         * over 256 referrals.
                          */
                         if (number_of_referrals > 256) {
                             proto_tree_add_text(ntree, tvb, 0, 0, "[ Bad referal at offset: %u ]", ioffset);
@@ -5789,7 +5805,6 @@
                                                         case 0x00000001:                /* Information Flags */
                                                                 temp_values.vvalue = tvb_get_letohs(tvb, ioffset);
                                                                 temp_values.vtype = VTYPE_BITFIELD;
-                                                                temp_values.vstring = mval_buf.buffer;
                                                                 temp_values.vdesc = "Information Flags (low) Byte:";
                                                                 temp_values.vlength = 2;
                                                                 temp_values.hfname= hf_nds_rflags;
@@ -5830,7 +5845,6 @@
                                                                 ioffset = ioffset+2;
                                                                 temp_values.vvalue = tvb_get_letohs(tvb, ioffset);
                                                                 temp_values.vtype = VTYPE_BITFIELD;
-                                                                temp_values.vstring = mval_buf.buffer;
                                                                 temp_values.vdesc = "Information Flags (high) Byte:";
                                                                 temp_values.vlength = 2;
                                                                 temp_values.hfname= hf_nds_rflags;
@@ -5879,7 +5893,6 @@
                                                         case 0x00000004:                /* Entry Flags */
                                                                 temp_values.vvalue = tvb_get_letohl(tvb, ioffset);
                                                                 temp_values.vtype = VTYPE_BITFIELD;
-                                                                temp_values.vstring = mval_buf.buffer;
                                                                 temp_values.vdesc = "Entry Flags:";
                                                                 temp_values.vlength = 2;
                                                                 temp_values.hfname= hf_nds_eflags;
@@ -5922,7 +5935,7 @@
                                                         case 0x0000008:                 /* Subordinate Count */
                                                                 value1 = tvb_get_letohl(tvb, ioffset);
                                                                 proto_tree_add_uint_format(ntree, hf_sub_count, tvb, ioffset,
-                                                                        4, value1, "Subordinate Count %d", value1);
+                                                                        4, value1, "Subordinate Count %u", value1);
                                                                 ioffset = ioffset + 4;
                                                                 break;
                                                         case 0x0000010:                 /* Modification Time */
@@ -5977,7 +5990,7 @@
                                                         case 0x00000200:                /* Revision Count */
                                                                 value1 = tvb_get_letohl(tvb, ioffset);
                                                                 proto_tree_add_uint_format(ntree, hf_nds_revision, tvb, ioffset,
-                                                                        4, value1, "Revision Count %d", value1);
+                                                                        4, value1, "Revision Count %u", value1);
                                                                 ioffset = ioffset + 4;
                                                                 break;
                                                         case 0x00000400:                /* Replica Type & State */
@@ -6003,8 +6016,7 @@
                                                         case 0x00000800:                /* Base Class */
                                                                 value1 = tvb_get_letohl(tvb, ioffset);
                                                                 ioffset = ioffset + 4;
-                                                                get_string(tvb, ioffset, value1, mval_buf.buffer);
-                                                                temp_values.vstring = mval_buf.buffer;
+                                                                temp_values.vstring = get_string(tvb, ioffset, value1);
                                                                 proto_tree_add_string(ntree, hf_nds_base, tvb, ioffset,
                                                                         value1, temp_values.vstring);
                                                                 ioffset = ioffset + value1;
@@ -6012,8 +6024,7 @@
                                                         case 0x00001000:                /* Relative Distinguished Name */
                                                                 value1 = tvb_get_letohl(tvb, ioffset);
                                                                 ioffset = ioffset + 4;
-                                                                get_string(tvb, ioffset, value1, mval_buf.buffer);
-                                                                temp_values.vstring = mval_buf.buffer;
+                                                                temp_values.vstring = get_string(tvb, ioffset, value1);
                                                                 proto_tree_add_string(ntree, hf_nds_relative_dn, tvb, ioffset,
                                                                         value1, temp_values.vstring);
                                                                 ioffset = ioffset + value1;
@@ -6021,8 +6032,7 @@
                                                         case 0x00002000:                /* Distinguished Name */
                                                                 value1 = tvb_get_letohl(tvb, ioffset);
                                                                 ioffset = ioffset + 4;
-                                                                get_string(tvb, ioffset, value1, mval_buf.buffer);
-                                                                temp_values.vstring = mval_buf.buffer;
+                                                                temp_values.vstring = get_string(tvb, ioffset, value1);
                                                                 proto_tree_add_string(ntree, hf_nds_name, tvb, ioffset,
                                                                         value1, temp_values.vstring);
                                                                 ioffset = ioffset + value1;
@@ -6030,8 +6040,7 @@
                                                         case 0x00004000:                /* Root Distinguished Name */
                                                                 value1 = tvb_get_letohl(tvb, ioffset);
                                                                 ioffset = ioffset + 4;
-                                                                get_string(tvb, ioffset, value1, mval_buf.buffer);
-                                                                temp_values.vstring = mval_buf.buffer;
+                                                                temp_values.vstring = get_string(tvb, ioffset, value1);
                                                                 proto_tree_add_string(ntree, hf_nds_name, tvb, ioffset,
                                                                         value1, temp_values.vstring);
                                                                 ioffset = ioffset + value1;
@@ -6039,8 +6048,7 @@
                                                         case 0x00008000:                /* Parent Distinguished Name */
                                                                 value1 = tvb_get_letohl(tvb, ioffset);
                                                                 ioffset = ioffset + 4;
-                                                                get_string(tvb, ioffset, value1, mval_buf.buffer);
-                                                                temp_values.vstring = mval_buf.buffer;
+                                                                temp_values.vstring = get_string(tvb, ioffset, value1);
                                                                 proto_tree_add_string(ntree, hf_nds_name, tvb, ioffset,
                                                                         value1, temp_values.vstring);
                                                                 ioffset = ioffset + value1;
@@ -6055,8 +6063,7 @@
                                                         case 0x00020000:                /* Dereference Base Class */
                                                                 value1 = tvb_get_letohl(tvb, ioffset);
                                                                 ioffset = ioffset + 4;
-                                                                get_string(tvb, ioffset, value1, mval_buf.buffer);
-                                                                temp_values.vstring = mval_buf.buffer;
+                                                                temp_values.vstring = get_string(tvb, ioffset, value1);
                                                                 proto_tree_add_string(ntree, hf_deref_base, tvb, ioffset,
                                                                         value1, temp_values.vstring);
                                                                 ioffset = ioffset + value1;
@@ -6093,8 +6100,7 @@
                                 ioffset += align_4(tvb, ioffset);
                                 value1 = tvb_get_letohl(tvb, ioffset);
                                 ioffset = ioffset + 4;
-                                get_string(tvb, ioffset, value1, mval_buf.buffer);
-                                temp_values.vstring = mval_buf.buffer;
+                                temp_values.vstring = get_string(tvb, ioffset, value1);
                                 sub1item = proto_tree_add_string(ntree, hf_nds_base_class, tvb, ioffset,
                                         value1, temp_values.vstring);
                                 sub1tree = proto_item_add_subtree(sub1item, ett_nds);
@@ -6104,7 +6110,6 @@
                                 {
                                         temp_values.vvalue = tvb_get_letohl(tvb, ioffset);
                                         temp_values.vtype = VTYPE_BITFIELD;
-                                        temp_values.vstring = mval_buf.buffer;
                                         temp_values.vdesc = "Class Flags:";
                                         temp_values.vlength = 2;
                                         temp_values.hfname= hf_nds_cflags;
@@ -6161,15 +6166,14 @@
                                         {
                                                 value1 = tvb_get_letohl(tvb, ioffset);  /* Super Classes */
                                                 sub2item = proto_tree_add_uint_format(sub1tree, hf_nds_number_of_items, tvb, ioffset,
-                                                        4, value1, "Super Classes %d", value1);
+                                                        4, value1, "Super Classes %u", value1);
                                                 sub2tree = proto_item_add_subtree(sub2item, ett_nds);
                                                 ioffset = ioffset + 4;
                                                 for (r = 0; r < value1; r++)
                                                 {
                                                         value2 = tvb_get_letohl(tvb, ioffset);
                                                         ioffset = ioffset + 4;
-                                                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                                        temp_values.vstring = mval_buf.buffer;
+                                                        temp_values.vstring = get_string(tvb, ioffset, value2);
                                                         proto_tree_add_string(sub2tree, hf_nds_super, tvb, ioffset,
                                                                 value2, temp_values.vstring);
                                                         ioffset = ioffset + value2;
@@ -6177,15 +6181,14 @@
                                                 }
                                                 value1 = tvb_get_letohl(tvb, ioffset);  /* Containment Classes */
                                                 sub2item = proto_tree_add_uint_format(sub1tree, hf_nds_number_of_items, tvb, ioffset,
-                                                        4, value1, "Containment Classes %d", value1);
+                                                        4, value1, "Containment Classes %u", value1);
                                                 sub2tree = proto_item_add_subtree(sub2item, ett_nds);
                                                 ioffset = ioffset + 4;
                                                 for (r = 0; r < value1; r++)
                                                 {
                                                         value2 = tvb_get_letohl(tvb, ioffset);
                                                         ioffset = ioffset + 4;
-                                                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                                        temp_values.vstring = mval_buf.buffer;
+                                                        temp_values.vstring = get_string(tvb, ioffset, value2);
                                                         proto_tree_add_string(sub2tree, hf_nds_base_class, tvb, ioffset,
                                                                 value2, temp_values.vstring);
                                                         ioffset = ioffset + value2;
@@ -6193,15 +6196,14 @@
                                                 }
                                                 value1 = tvb_get_letohl(tvb, ioffset);  /* Naming Attributes */
                                                 sub2item = proto_tree_add_uint_format(sub1tree, hf_nds_number_of_items, tvb, ioffset,
-                                                        4, value1, "Naming Attributes %d", value1);
+                                                        4, value1, "Naming Attributes %u", value1);
                                                 sub2tree = proto_item_add_subtree(sub2item, ett_nds);
                                                 ioffset = ioffset + 4;
                                                 for (r = 0; r < value1; r++)
                                                 {
                                                         value2 = tvb_get_letohl(tvb, ioffset);
                                                         ioffset = ioffset + 4;
-                                                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                                        temp_values.vstring = mval_buf.buffer;
+                                                        temp_values.vstring = get_string(tvb, ioffset, value2);
                                                         proto_tree_add_string(sub2tree, hf_mv_string, tvb, ioffset,
                                                                 value2, temp_values.vstring);
                                                         ioffset = ioffset + value2;
@@ -6209,15 +6211,14 @@
                                                 }
                                                 value1 = tvb_get_letohl(tvb, ioffset);  /* Mandatory Attributes */
                                                 sub2item = proto_tree_add_uint_format(sub1tree, hf_nds_number_of_items, tvb, ioffset,
-                                                        4, value1, "Mandatory Attributes %d", value1);
+                                                        4, value1, "Mandatory Attributes %u", value1);
                                                 sub2tree = proto_item_add_subtree(sub2item, ett_nds);
                                                 ioffset = ioffset + 4;
                                                 for (r = 0; r < value1; r++)
                                                 {
                                                         value2 = tvb_get_letohl(tvb, ioffset);
                                                         ioffset = ioffset + 4;
-                                                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                                        temp_values.vstring = mval_buf.buffer;
+                                                        temp_values.vstring = get_string(tvb, ioffset, value2);
                                                         proto_tree_add_string(sub2tree, hf_mv_string, tvb, ioffset,
                                                                 value2, temp_values.vstring);
                                                         ioffset = ioffset + value2;
@@ -6225,7 +6226,7 @@
                                                 }
                                                 value1 = tvb_get_letohl(tvb, ioffset);  /* Optional Attributes */
                                                 sub2item = proto_tree_add_uint_format(sub1tree, hf_nds_number_of_items, tvb, ioffset,
-                                                        4, value1, "Optional Attributes %d", value1);
+                                                        4, value1, "Optional Attributes %u", value1);
                                                 sub2tree = proto_item_add_subtree(sub2item, ett_nds);
                                                 ioffset = ioffset + 4;
                                                 for (r = 0; r < value1; r++)
@@ -6233,8 +6234,7 @@
                                                         ioffset += align_4(tvb, ioffset);
                                                         value2 = tvb_get_letohl(tvb, ioffset);
                                                         ioffset = ioffset + 4;
-                                                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                                        temp_values.vstring = mval_buf.buffer;
+                                                        temp_values.vstring = get_string(tvb, ioffset, value2);
                                                         proto_tree_add_string(sub2tree, hf_mv_string, tvb, ioffset,
                                                                 value2, temp_values.vstring);
                                                         ioffset = ioffset + value2;
@@ -6249,15 +6249,14 @@
                                         {
                                                 value1 = tvb_get_letohl(tvb, ioffset);  /* Containment Classes */
                                                 sub2item = proto_tree_add_uint_format(sub1tree, hf_nds_number_of_items, tvb, ioffset,
-                                                        4, value1, "Containment Classes %d", value1);
+                                                        4, value1, "Containment Classes %u", value1);
                                                 sub2tree = proto_item_add_subtree(sub2item, ett_nds);
                                                 ioffset = ioffset + 4;
                                                 for (r = 0; r < value1; r++)
                                                 {
                                                         value2 = tvb_get_letohl(tvb, ioffset);
                                                         ioffset = ioffset + 4;
-                                                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                                        temp_values.vstring = mval_buf.buffer;
+                                                        temp_values.vstring = get_string(tvb, ioffset, value2);
                                                         proto_tree_add_string(sub2tree, hf_nds_base_class, tvb, ioffset,
                                                                 value2, temp_values.vstring);
                                                         ioffset = ioffset + value2;
@@ -6265,15 +6264,14 @@
                                                 }
                                                 value1 = tvb_get_letohl(tvb, ioffset);  /* Naming Attributes */
                                                 sub2item = proto_tree_add_uint_format(sub1tree, hf_nds_number_of_items, tvb, ioffset,
-                                                        4, value1, "Naming Attributes %d", value1);
+                                                        4, value1, "Naming Attributes %u", value1);
                                                 sub2tree = proto_item_add_subtree(sub2item, ett_nds);
                                                 ioffset = ioffset + 4;
                                                 for (r = 0; r < value1; r++)
                                                 {
                                                         value2 = tvb_get_letohl(tvb, ioffset);
                                                         ioffset = ioffset + 4;
-                                                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                                        temp_values.vstring = mval_buf.buffer;
+                                                        temp_values.vstring = get_string(tvb, ioffset, value2);
                                                         proto_tree_add_string(sub2tree, hf_mv_string, tvb, ioffset,
                                                                 value2, temp_values.vstring);
                                                         ioffset = ioffset + value2;
@@ -6281,15 +6279,14 @@
                                                 }
                                                 value1 = tvb_get_letohl(tvb, ioffset);  /* Mandatory Attributes */
                                                 sub2item = proto_tree_add_uint_format(sub1tree, hf_nds_number_of_items, tvb, ioffset,
-                                                        4, value1, "Mandatory Attributes %d", value1);
+                                                        4, value1, "Mandatory Attributes %u", value1);
                                                 sub2tree = proto_item_add_subtree(sub2item, ett_nds);
                                                 ioffset = ioffset + 4;
                                                 for (r = 0; r < value1; r++)
                                                 {
                                                         value2 = tvb_get_letohl(tvb, ioffset);
                                                         ioffset = ioffset + 4;
-                                                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                                        temp_values.vstring = mval_buf.buffer;
+                                                        temp_values.vstring = get_string(tvb, ioffset, value2);
                                                         proto_tree_add_string(sub2tree, hf_mv_string, tvb, ioffset,
                                                                 value2, temp_values.vstring);
                                                         ioffset = ioffset + value2;
@@ -6297,15 +6294,14 @@
                                                 }
                                                 value1 = tvb_get_letohl(tvb, ioffset);  /* Optional Attributes */
                                                 sub2item = proto_tree_add_uint_format(sub1tree, hf_nds_number_of_items, tvb, ioffset,
-                                                        4, value1, "Optional Attributes %d", value1);
+                                                        4, value1, "Optional Attributes %u", value1);
                                                 sub2tree = proto_item_add_subtree(sub2item, ett_nds);
                                                 ioffset = ioffset + 4;
                                                 for (r = 0; r < value1; r++)
                                                 {
                                                         value2 = tvb_get_letohl(tvb, ioffset);
                                                         ioffset = ioffset + 4;
-                                                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                                        temp_values.vstring = mval_buf.buffer;
+                                                        temp_values.vstring = get_string(tvb, ioffset, value2);
                                                         proto_tree_add_string(sub2tree, hf_mv_string, tvb, ioffset,
                                                                 value2, temp_values.vstring);
                                                         ioffset = ioffset + value2;
@@ -6351,15 +6347,14 @@
                                                 /* Class Definition */
                                                 value1 = tvb_get_letohl(tvb, ioffset);  /* Super Classes */
                                                 sub2item = proto_tree_add_uint_format(sub1tree, hf_nds_number_of_items, tvb, ioffset,
-                                                        4, value1, "Super Classes %d", value1);
+                                                        4, value1, "Super Classes %u", value1);
                                                 sub2tree = proto_item_add_subtree(sub2item, ett_nds);
                                                 ioffset = ioffset + 4;
                                                 for (r = 0; r < value1; r++)
                                                 {
                                                         value2 = tvb_get_letohl(tvb, ioffset);
                                                         ioffset = ioffset + 4;
-                                                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                                        temp_values.vstring = mval_buf.buffer;
+                                                        temp_values.vstring = get_string(tvb, ioffset, value2);
                                                         proto_tree_add_string(sub2tree, hf_nds_super, tvb, ioffset,
                                                                 value2, temp_values.vstring);
                                                         ioffset = ioffset + value2;
@@ -6367,15 +6362,14 @@
                                                 }
                                                 value1 = tvb_get_letohl(tvb, ioffset);  /* Containment Classes */
                                                 sub2item = proto_tree_add_uint_format(sub1tree, hf_nds_number_of_items, tvb, ioffset,
-                                                        4, value1, "Containment Classes %d", value1);
+                                                        4, value1, "Containment Classes %u", value1);
                                                 sub2tree = proto_item_add_subtree(sub2item, ett_nds);
                                                 ioffset = ioffset + 4;
                                                 for (r = 0; r < value1; r++)
                                                 {
                                                         value2 = tvb_get_letohl(tvb, ioffset);
                                                         ioffset = ioffset + 4;
-                                                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                                        temp_values.vstring = mval_buf.buffer;
+                                                        temp_values.vstring = get_string(tvb, ioffset, value2);
                                                         proto_tree_add_string(sub2tree, hf_nds_base_class, tvb, ioffset,
                                                                 value2, temp_values.vstring);
                                                         ioffset = ioffset + value2;
@@ -6383,15 +6377,14 @@
                                                 }
                                                 value1 = tvb_get_letohl(tvb, ioffset);  /* Naming Attributes */
                                                 sub2item = proto_tree_add_uint_format(sub1tree, hf_nds_number_of_items, tvb, ioffset,
-                                                        4, value1, "Naming Attributes %d", value1);
+                                                        4, value1, "Naming Attributes %u", value1);
                                                 sub2tree = proto_item_add_subtree(sub2item, ett_nds);
                                                 ioffset = ioffset + 4;
                                                 for (r = 0; r < value1; r++)
                                                 {
                                                         value2 = tvb_get_letohl(tvb, ioffset);
                                                         ioffset = ioffset + 4;
-                                                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                                        temp_values.vstring = mval_buf.buffer;
+                                                        temp_values.vstring = get_string(tvb, ioffset, value2);
                                                         proto_tree_add_string(sub2tree, hf_mv_string, tvb, ioffset,
                                                                 value2, temp_values.vstring);
                                                         ioffset = ioffset + value2;
@@ -6399,15 +6392,14 @@
                                                 }
                                                 value1 = tvb_get_letohl(tvb, ioffset);  /* Mandatory Attributes */
                                                 sub2item = proto_tree_add_uint_format(sub1tree, hf_nds_number_of_items, tvb, ioffset,
-                                                        4, value1, "Mandatory Attributes %d", value1);
+                                                        4, value1, "Mandatory Attributes %u", value1);
                                                 sub2tree = proto_item_add_subtree(sub2item, ett_nds);
                                                 ioffset = ioffset + 4;
                                                 for (r = 0; r < value1; r++)
                                                 {
                                                         value2 = tvb_get_letohl(tvb, ioffset);
                                                         ioffset = ioffset + 4;
-                                                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                                        temp_values.vstring = mval_buf.buffer;
+                                                        temp_values.vstring = get_string(tvb, ioffset, value2);
                                                         proto_tree_add_string(sub2tree, hf_mv_string, tvb, ioffset,
                                                                 value2, temp_values.vstring);
                                                         ioffset = ioffset + value2;
@@ -6415,15 +6407,14 @@
                                                 }
                                                 value1 = tvb_get_letohl(tvb, ioffset);  /* Optional Attributes */
                                                 sub2item = proto_tree_add_uint_format(sub1tree, hf_nds_number_of_items, tvb, ioffset,
-                                                        4, value1, "Optional Attributes %d", value1);
+                                                        4, value1, "Optional Attributes %u", value1);
                                                 sub2tree = proto_item_add_subtree(sub2item, ett_nds);
                                                 ioffset = ioffset + 4;
                                                 for (r = 0; r < value1; r++)
                                                 {
                                                         value2 = tvb_get_letohl(tvb, ioffset);
                                                         ioffset = ioffset + 4;
-                                                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                                        temp_values.vstring = mval_buf.buffer;
+                                                        temp_values.vstring = get_string(tvb, ioffset, value2);
                                                         proto_tree_add_string(sub2tree, hf_mv_string, tvb, ioffset,
                                                                 value2, temp_values.vstring);
                                                         ioffset = ioffset + value2;
@@ -6448,8 +6439,7 @@
                                 ioffset += align_4(tvb, ioffset);
                                 value1 = tvb_get_letohl(tvb, ioffset);
                                 ioffset = ioffset + 4;
-                                get_string(tvb, ioffset, value1, mval_buf.buffer);
-                                values->vstring = mval_buf.buffer;
+                                values->vstring = get_string(tvb, ioffset, value1);
                                 proto_tree_add_string(ntree, hf_mv_string, tvb, ioffset,
                                         value1, values->vstring);
                                 ioffset = ioffset + value1;
@@ -6461,15 +6451,14 @@
                         ioffset += align_4(tvb, ioffset);
                         value1 = tvb_get_letohl(tvb, ioffset);
                         proto_tree_add_uint_format(ntree, hf_nds_att_del, tvb, ioffset,
-                                4, value1, "Attribute Names to Delete %d", value1);
+                                4, value1, "Attribute Names to Delete %u", value1);
                         ioffset = ioffset + 4;
                         for (i = 1 ; i <= value1; i++ )   /* Attribute Names to delete*/
                         {
                                 ioffset += align_4(tvb, ioffset);
                                 value2 = tvb_get_letohl(tvb, ioffset);
                                 ioffset = ioffset + 4;
-                                get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                values->vstring = mval_buf.buffer;
+                                values->vstring = get_string(tvb, ioffset, value2);
                                 proto_tree_add_string(ntree, hf_mv_string, tvb, ioffset,
                                         value2, values->vstring);
                                 ioffset = ioffset + value2;
@@ -6481,23 +6470,21 @@
                         ioffset += align_4(tvb, ioffset);
                         value1 = tvb_get_letohl(tvb, ioffset);
                         proto_tree_add_uint_format(ntree, hf_nds_acl_add, tvb, ioffset,
-                                4, value1, "ACL Templates to Add %d", value1);
+                                4, value1, "ACL Templates to Add %u", value1);
                         ioffset = ioffset + 4;
                         for (i = 1 ; i <= value1; i++ )   /* ACL templates to add*/
                         {
                                 ioffset += align_4(tvb, ioffset);
                                 value2 = tvb_get_letohl(tvb, ioffset);  /* Attribute Name */
                                 ioffset = ioffset + 4;
-                                get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                values->vstring = mval_buf.buffer;
+                                values->vstring = get_string(tvb, ioffset, value2);
                                 proto_tree_add_string(ntree, hf_nds_attribute_dn, tvb, ioffset,
                                         value2, values->vstring);
                                 ioffset = ioffset + value2;
                                 ioffset += align_4(tvb, ioffset);
                                 value2 = tvb_get_letohl(tvb, ioffset);  /* DN of Trustee */
                                 ioffset = ioffset + 4;
-                                get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                values->vstring = mval_buf.buffer;
+                                values->vstring = get_string(tvb, ioffset, value2);
                                 proto_tree_add_string(ntree, hf_nds_trustee_dn, tvb, ioffset,
                                         value2, values->vstring);
                                 ioffset = ioffset + value2;
@@ -6514,23 +6501,21 @@
                         ioffset += align_4(tvb, ioffset);
                         value1 = tvb_get_letohl(tvb, ioffset);
                         proto_tree_add_uint_format(ntree, hf_nds_acl_del, tvb, ioffset,
-                                4, value1, "ACL Templates to Delete %d", value1);
+                                4, value1, "ACL Templates to Delete %u", value1);
                         ioffset = ioffset + 4;
                         for (i = 1 ; i <= value1; i++ )   /* ACL templates to delete*/
                         {
                                 ioffset += align_4(tvb, ioffset);
                                 value2 = tvb_get_letohl(tvb, ioffset);  /* Attribute Name */
                                 ioffset = ioffset + 4;
-                                get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                values->vstring = mval_buf.buffer;
+                                values->vstring = get_string(tvb, ioffset, value2);
                                 proto_tree_add_string(ntree, hf_nds_attribute_dn, tvb, ioffset,
                                         value2, values->vstring);
                                 ioffset = ioffset + value2;
                                 ioffset += align_4(tvb, ioffset);
                                 value2 = tvb_get_letohl(tvb, ioffset);  /* DN of Trustee */
                                 ioffset = ioffset + 4;
-                                get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                values->vstring = mval_buf.buffer;
+                                values->vstring = get_string(tvb, ioffset, value2);
                                 proto_tree_add_string(ntree, hf_nds_trustee_dn, tvb, ioffset,
                                         value2, values->vstring);
                                 ioffset = ioffset + value2;
@@ -6541,6 +6526,7 @@
                                 ioffset = ioffset + 4;
                         }
                         break;
+
             case MVTYPE_PROCESS_TAGS: /* Process tags and paths depending on name type returned. */
                         switch (values->vflags) {
 
@@ -6560,8 +6546,7 @@
                             if (value1 == 0) { /* RDN Hint - really just returns the dist name + timestamp info */
                                 value2 = tvb_get_letohl(tvb, ioffset);  /* Distinguished Name Len, String[len]*/
                                 ioffset = ioffset + 4;
-                                get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                values->vstring = mval_buf.buffer;
+				    values->vstring = get_string(tvb, ioffset, value2);
                                 proto_tree_add_string(ntree, hf_mv_string, tvb, ioffset,
                                         value2, values->vstring);
                                 ioffset += value2;
@@ -6584,12 +6569,11 @@
                             {
                                 value1 = tvb_get_letohl(tvb, ioffset);
                                 sub1item = proto_tree_add_uint_format(ntree, hf_nds_acl_del, tvb, ioffset,
-                                        4, value1, "Number of RDN Items %d", value1);
+									  4, value1, "Number of RDN Items %u", value1);
                                 sub1tree = proto_item_add_subtree(sub1item, ett_nds);
                                 ioffset = ioffset + 4;
                                 for (i=1; i <= value1; i++) {
-
-                                    sub2item = proto_tree_add_text(sub1tree, tvb, ioffset, 0, "Item %d", i);
+					    sub2item = proto_tree_add_text(sub1tree, tvb, ioffset, 0, "Item %u", i);
                                     sub2tree = proto_item_add_subtree(sub2item, ett_nds);
                                     ioffset += align_4(tvb, ioffset);
 
@@ -6618,28 +6602,33 @@
                                         ioffset = ioffset + 2;
                                         value2 = tvb_get_letohl(tvb, ioffset);  /* Distinguished Name Len, String[len]*/
                                         ioffset = ioffset + 4;
-                                        get_string(tvb, ioffset, value2, mval_buf.buffer);
-                                        values->vstring = mval_buf.buffer;
+						    values->vstring = get_string(tvb, ioffset, value2);
                                         proto_tree_add_string(sub2tree, hf_mv_string, tvb, ioffset,
                                                 value2, values->vstring);
                                         ioffset += value2;
-
                                     }
+					    /* XXX: What if "multiple items" ?                 */
+					    /*      What if "Undefined ... " ?                 */  
+					    /*      For now: we'll just keep on walking...     */
+					    /*      Presumably we'll get a ReportedBoundsError */
+					    /*       pretty quickly.                           */
+					    else   /* Undefined or "multiple items" ... */
+					    {
+						    ioffset += 4;
                             }
+				    } /* for */
+			    } /* else */
                             values->voffset=ioffset;
                             break;
                         default: /* All other name types are just a string */
-                            get_string(tvb, ioffset, values->vlength, mval_buf.buffer);
-                            values->vstring = mval_buf.buffer;
+                            values->vstring = get_string(tvb, ioffset, values->vlength);
                             proto_tree_add_string(ntree, hf_mv_string, tvb, ioffset,
                                     values->vlength, values->vstring);
                             values->voffset=ioffset + values->vlength;
                             ioffset = values->voffset;
                             ioffset += align_4(tvb, ioffset);
                             break;
-                        }
-                        break;
-                }
+                        } /* switch (values->vflags) */
                 break;
             case MVTYPE_PROCESS_ITERATOR: /* Process Iterator subverbs. */
                 temp_values.vvalue = tvb_get_letohl(tvb, ioffset);
@@ -6739,17 +6728,16 @@
                 ioffset += 4;
                 value2 = tvb_get_letohl(tvb, ioffset);
                 sub1item = proto_tree_add_uint_format(ntree, hf_nds_number_of_items, tvb, ioffset,
-                        4, value2, "Number of Attributes %d", value2);
+							      4, value2, "Number of Attributes %u", value2);
                 sub1tree = proto_item_add_subtree(sub1item, ett_nds);
                 ioffset += 4;
                 for (i=1; i<=value2; i++) {
-                    sub2item = proto_tree_add_text(sub1tree, tvb, ioffset, 0, "Attribute %d", i);
+				sub2item = proto_tree_add_text(sub1tree, tvb, ioffset, 0, "Attribute %u", i);
                     sub2tree = proto_item_add_subtree(sub2item, ett_nds);
                     ioffset += align_4(tvb, ioffset);
                     value3 = tvb_get_letohl(tvb, ioffset);  /* Attribute Name */
                     ioffset = ioffset + 4;
-                    get_string(tvb, ioffset, value3, mval_buf.buffer);
-                    values->vstring = mval_buf.buffer;
+				values->vstring = get_string(tvb, ioffset, value3);
                     proto_tree_add_string(sub2tree, hf_nds_attribute_dn, tvb, ioffset,
                             value3, values->vstring);
                     ioffset = ioffset + value3;
@@ -6769,17 +6757,15 @@
                 ioffset += 4;
                 dissect_nds_iterator(ntree, tvb, pinfo, value4, value5, ioffset, TRUE);
 
-                g_strlcpy(mval_buf.buffer, " (", 1024);
-                g_strlcat(mval_buf.buffer, values->vstring, 1024);
-                g_strlcat(mval_buf.buffer, ") ", 1024);
-                values->vstring = mval_buf.buffer;
+			values->vstring = ep_strdup_printf("(%s)", values->vstring);
                 break;
             default:
                         break;
         }
 }
 
-static void dissect_ncp_89_6_request(tvbuff_t *tvb, proto_tree *volatile ncp_tree, guint32 offset)
+static void
+dissect_ncp_89_6_request(tvbuff_t *tvb, proto_tree *volatile ncp_tree, guint32 offset)
 {
     guint32 string_len, datatype, count, i;
 
@@ -6844,7 +6830,7 @@
     loffset = 40;
     for (x = 1; x <= number_of_items; x++)
     {
-        aitem = proto_tree_add_text(ncp_tree, tvb, loffset, -1, "Network Address - %d", x);
+        aitem = proto_tree_add_text(ncp_tree, tvb, loffset, -1, "Network Address - %u", x);
         atree = proto_item_add_subtree(aitem, ett_ncp);
 
         addr_type = tvb_get_guint8(tvb, loffset);
@@ -6930,7 +6916,7 @@
     loffset = 20;
     for (x = 1; x <= number_of_items; x++ )
     {
-        aitem = proto_tree_add_text(ncp_tree, tvb, loffset, -1, "Information Item %d", x);
+        aitem = proto_tree_add_text(ncp_tree, tvb, loffset, -1, "Information Item %u", x);
         atree = proto_item_add_subtree(aitem, ett_ncp);
         /* Data Stream Space Allocated */
         if (request_value->req_mask & 0x0002) {
@@ -7249,8 +7235,10 @@
     char value_format[2]="\0";
     char param_string[256]="\0";
 
-    build_expert_data(ncp_tree, "ncp.set_cmd_type", value_format, 0, FALSE);
-    build_expert_data(ncp_tree, "ncp.set_cmd_name", param_string, 0, FALSE);
+    build_expert_data(ncp_tree, "ncp.set_cmd_type",
+                      value_format, sizeof value_format, 0, FALSE);
+    build_expert_data(ncp_tree, "ncp.set_cmd_name",
+                      param_string, sizeof param_string, 0, FALSE);
     switch (atoi(value_format)) {
     case 0:   /* { 0x00,	"Numeric Value" }, */
     case 2:   /* { 0x02,	"Ticks Value" }, */
@@ -7289,7 +7277,7 @@
  * the last fragment packet number.
  *
  * Also the NDS dissection requires the values of NDS Verb, Version, and Flags.
- * Without this values being remembered from the first request packet then
+ * Without these values being remembered from the first request packet then
  * we will be unable to dissect the reply packet. For this reason we remember
  * these values on the first fragment and then populate the values in the final
  * fragment. We only do this on the first dissection.
@@ -7372,6 +7360,7 @@
                         frags[i].nds_length = 0;
                         frags[i].nds_frag = nds_frag;
                         frags[i].nds_fragmented = TRUE;
+                    frags[i].sequence = 0;
                 }
                 break;
         }
@@ -7420,13 +7409,33 @@
                 frags[frag_count].nds_frag_flags = request_value->req_nds_flags;
                 frags[frag_count].nds_frag_prot_flags = request_value->req_nds_prot_flags;
                 fd_head = fragment_add_seq_next(tvb, 0, pinfo, tid, nds_fragment_table, nds_reassembled_table, len, request_value->nds_frag);
+                frags[frag_count].sequence = sequence;
                 frags[frag_count].nds_length = 1;
             }
             else
             {
                 /* Subsequent fragments should be offset by 16 since we do not need */
                 /* the additional fragment handle and size fields in our composite data */
+                /* Also do not add retransmitted packets, just mark and return */
+                if (!pinfo->fd->flags.visited)
+                {
+                    if (sequence != frags[frag_count].sequence) {
+                        fd_head = fragment_add_seq_next(tvb, 16, pinfo, tid, nds_fragment_table, nds_reassembled_table, len-16, request_value->nds_frag);
+                        frags[frag_count].sequence = sequence;
+                    }
+                    else
+                    {
+                        if (check_col(pinfo->cinfo, COL_INFO)) {
+                            col_add_fstr(pinfo->cinfo, COL_INFO, "[Retransmitted NDS Fragment 0x%08x]", frags[frag_count].nds_frag);
+                        }
+                        return;
+                    }
+                }
+                else
+                {
                 fd_head = fragment_add_seq_next(tvb, 16, pinfo, tid, nds_fragment_table, nds_reassembled_table, len-16, request_value->nds_frag);
+                    frags[frag_count].sequence = sequence;
+                }
             }
             if (fd_head != NULL)
             {
@@ -7491,7 +7500,7 @@
                     {
                       if (request_value->nds_frag)
                       {
-                        col_add_fstr(pinfo->cinfo, COL_INFO, "[NDS Fragment %08x]", frags[frag_count].nds_frag);
+                        col_add_fstr(pinfo->cinfo, COL_INFO, "[NDS Fragment 0x%08x]", frags[frag_count].nds_frag);
                       }
                     }
                 }
@@ -7503,7 +7512,7 @@
                 {
                   if (request_value->nds_frag)
                   {
-                     col_add_fstr(pinfo->cinfo, COL_INFO, "[NDS Fragment %08x]", frags[frag_count].nds_frag);
+                     col_add_fstr(pinfo->cinfo, COL_INFO, "[NDS Fragment 0x%08x]", frags[frag_count].nds_frag);
                   }
                 }
                 frag_tvb = NULL;
@@ -7535,8 +7544,15 @@
     else
     {
         /* This is not any fragment packet */
-        frags[frag_count].nds_length = 0;
         request_value->nds_frag = FALSE;
+        /* Trap for retransmitted end fragment */
+        if (request_value->nds_end_frag < pinfo->fd->num) {
+            if (check_col(pinfo->cinfo, COL_INFO)) {
+                col_add_fstr(pinfo->cinfo, COL_INFO, "[Retransmitted end of NDS Fragment 0x%08x, see packet #%d for details.]", request_value->nds_frag_num, request_value->nds_end_frag);
+            }
+        }
+        else
+        { 
         dissect_ncp_reply(tvb, pinfo, nw_connection, sequence, type, tree, ncp_tap);
     }
 }
@@ -7607,7 +7623,7 @@
 		case NCP_DEALLOCATE_SLOT:
 			ncp_rec = &ncp5555_request;
             if (ncp_echo_conn) {
-                expert_add_info_format(pinfo, NULL, PI_RESPONSE_CODE, PI_CHAT, "Destroy Connection %d Request", nw_connection);
+                               expert_add_info_format(pinfo, NULL, PI_RESPONSE_CODE, PI_CHAT, "Destroy Connection %u Request", nw_connection);
             }
 			break;
 		case NCP_BROADCAST_SLOT:
@@ -7941,9 +7957,12 @@
             char ret_info_string[16];
             char ret_info_string_ext[16];
 
-            build_expert_data(ncp_tree, "ncp.ret_info_mask", ret_info_string, 0, FALSE);
+                        build_expert_data(ncp_tree, "ncp.ret_info_mask",
+                              ret_info_string, sizeof ret_info_string, 0, FALSE);
             request_value->req_mask = atoi(ret_info_string);
-            build_expert_data(ncp_tree, "ncp.ext_info", ret_info_string_ext, 0, FALSE);
+                        build_expert_data(ncp_tree, "ncp.ext_info",
+                              ret_info_string_ext, sizeof ret_info_string_ext,
+                              0, FALSE);
             request_value->req_mask_ext = atoi(ret_info_string_ext);
         }
         /* NCP function 89/6 passes either ASCII or UTF8 data */
@@ -7967,7 +7986,7 @@
 dissect_nds_ping_reply(tvbuff_t *tvb, packet_info *pinfo _U_,
 	proto_tree *ncp_tree, ncp_req_hash_value *request_value)
 {
-        nw_uni_t                        reply_buffer;
+        char *                          reply_buffer;
         guint8                          ping_version;
         guint32                         nds_string_len;
         guint32                         nds_offset;
@@ -7977,8 +7996,6 @@
 	    int             				i;
         nstime_t                        ns;
 
-	reply_buffer.buffer[0] = '\0';
-
         ping_version = tvb_get_guint8(tvb, 8);
         proto_tree_add_item(ncp_tree, hf_ping_version, tvb, 8, 1, TRUE);
         if (ping_version == 9) {
@@ -8224,9 +8241,9 @@
                                                 }
                                                 nds_string_len = tvb_get_letohl(tvb, nds_offset);
                                                 nds_offset += 4;
-                                                get_string(tvb, nds_offset, nds_string_len, reply_buffer.buffer);
+                                                reply_buffer = get_string(tvb, nds_offset, nds_string_len);
                                                 tvb_ensure_bytes_exist(tvb, nds_offset, nds_string_len);
-                                                proto_tree_add_text(ncp_tree, tvb, nds_offset, nds_string_len, "SAP Name: %s", reply_buffer.buffer);
+                                                proto_tree_add_text(ncp_tree, tvb, nds_offset, nds_string_len, "SAP Name: %s", reply_buffer);
                                                 nds_offset += nds_string_len;
                                                 nds_offset += align_4(tvb, nds_offset);
                                                 break;
@@ -8237,9 +8254,9 @@
                                                 }
                                                 nds_string_len = tvb_get_letohl(tvb, nds_offset);
                                                 nds_offset += 4;
-                                                get_string(tvb, nds_offset, nds_string_len, reply_buffer.buffer);
+                                                reply_buffer = get_string(tvb, nds_offset, nds_string_len);
                                                 tvb_ensure_bytes_exist(tvb, nds_offset, nds_string_len);
-                                                proto_tree_add_text(ncp_tree, tvb, nds_offset, nds_string_len, "NDS Tree Name: %s", reply_buffer.buffer);
+                                                proto_tree_add_text(ncp_tree, tvb, nds_offset, nds_string_len, "NDS Tree Name: %s", reply_buffer);
                                                 nds_offset += nds_string_len;
                                                 nds_offset += align_4(tvb, nds_offset);
                                                 break;
@@ -8250,9 +8267,9 @@
                                                 }
                                                 nds_string_len = tvb_get_letohl(tvb, nds_offset);
                                                 nds_offset += 4;
-                                                get_string(tvb, nds_offset, nds_string_len, reply_buffer.buffer);
+                                                reply_buffer = get_string(tvb, nds_offset, nds_string_len);
                                                 tvb_ensure_bytes_exist(tvb, nds_offset, nds_string_len);
-                                                proto_tree_add_text(ncp_tree, tvb, nds_offset, nds_string_len, "OS Name: %s", reply_buffer.buffer);
+                                                proto_tree_add_text(ncp_tree, tvb, nds_offset, nds_string_len, "OS Name: %s", reply_buffer);
                                                 nds_offset += nds_string_len;
                                                 nds_offset += align_4(tvb, nds_offset);
                                                 break;
@@ -8263,9 +8280,9 @@
                                                 }
                                                 nds_string_len = tvb_get_letohl(tvb, nds_offset);
                                                 nds_offset += 4;
-                                                get_string(tvb, nds_offset, nds_string_len, reply_buffer.buffer);
+                                                reply_buffer = get_string(tvb, nds_offset, nds_string_len);
                                                 tvb_ensure_bytes_exist(tvb, nds_offset, nds_string_len);
-                                                proto_tree_add_text(ncp_tree, tvb, nds_offset, nds_string_len, "Hardware Name: %s", reply_buffer.buffer);
+                                                proto_tree_add_text(ncp_tree, tvb, nds_offset, nds_string_len, "Hardware Name: %s", reply_buffer);
                                                 nds_offset += nds_string_len;
                                                 nds_offset += align_4(tvb, nds_offset);
                                                 break;
@@ -8276,9 +8293,9 @@
                                                 }
                                                 nds_string_len = tvb_get_letohl(tvb, nds_offset);
                                                 nds_offset += 4;
-                                                get_string(tvb, nds_offset, nds_string_len, reply_buffer.buffer);
+                                                reply_buffer = get_string(tvb, nds_offset, nds_string_len);
                                                 tvb_ensure_bytes_exist(tvb, nds_offset, nds_string_len);
-                                                proto_tree_add_text(ncp_tree, tvb, nds_offset, nds_string_len, "Vendor Name: %s", reply_buffer.buffer);
+                                                proto_tree_add_text(ncp_tree, tvb, nds_offset, nds_string_len, "Vendor Name: %s", reply_buffer);
                                                 nds_offset += nds_string_len;
                                                 nds_offset += align_4(tvb, nds_offset);
                                                 break;
@@ -8302,7 +8319,6 @@
         guint32                         nds_frag;
         const char                      *verb_string;
         nds_val                         pvalues[9];
-        char                            string_buffer[9][1024];
         gboolean                        resolve_eid=FALSE;
         guint32                         global_eid=0;
         gboolean                        add_eid = FALSE;
@@ -8348,8 +8364,7 @@
 			    pvalues[i].voffset = 0;
 			    pvalues[i].hfname = 0;
 			    pvalues[i].vdesc = "";
-			    string_buffer[i][0] = '\0';
-			    pvalues[i].vstring = string_buffer[i];
+                        pvalues[i].vstring = NULL;
 			    pvalues[i].mvtype = 0;
 		    }
             verb_string = val_to_str(request_value->nds_request_verb,
@@ -8430,7 +8445,7 @@
                                                         }
                                                         pvalues[1].voffset = nds_offset+4;
                                                         nds_offset += 4;
-                                                        get_string(tvb, pvalues[1].voffset, pvalues[1].vlength, pvalues[1].vstring);
+                                                pvalues[1].vstring = get_string(tvb, pvalues[1].voffset, pvalues[1].vlength);
                                                         nds_offset += pvalues[1].vlength;
                                                         nds_offset += align_4(tvb, nds_offset);
                                                         pvalues[1].hfname= hf_nds_name;
@@ -8522,7 +8537,7 @@
                                         pvalues[2].mvtype = MVTYPE_ATTR_REPLY;
                                         pvalues[2].vflags = request_value->req_nds_flags;
                                         pvalues[2].nds_version = request_value->nds_version;
-                                        break;
+                                        pvalues[2].pflags = request_value->req_nds_prot_flags;
                         case 0x04:
                                 pvalues[0].vvalue = tvb_get_guint8(tvb, nds_offset);
                                 if (pvalues[0].vvalue == 0)
@@ -8660,7 +8675,7 @@
                                 }
                                 pvalues[1].voffset = nds_offset+4;
                                 nds_offset += 4;
-                                get_string(tvb, pvalues[1].voffset, pvalues[1].vlength, pvalues[1].vstring);
+                                pvalues[1].vstring = get_string(tvb, pvalues[1].voffset, pvalues[1].vlength);
                                 nds_offset += pvalues[1].vlength;
                                 nds_offset += align_4(tvb, nds_offset);
                                 pvalues[1].hfname= hf_nds_name;
@@ -9266,8 +9281,12 @@
                             char    eid_string[10];
                             char    global_object_name[256];
 
-                            build_expert_data(ncp_tree, "ncp.directory_services_object_id", eid_string, 0, TRUE);
-                            build_expert_data(ncp_tree, "ncp.volume_name_len", global_object_name, 0, FALSE);
+                                build_expert_data(ncp_tree, "ncp.directory_services_object_id",
+                                                  eid_string, sizeof eid_string,
+                                                  0, TRUE);
+                                build_expert_data(ncp_tree, "ncp.volume_name_len",
+                                                  global_object_name, sizeof global_object_name,
+                                                  0, FALSE);
 
                             /* Echo EID data to expert Chat window */
                             if (nds_echo_eid) {
@@ -9321,10 +9340,8 @@
 	guint32                 nds_frag = 0;
 	gboolean                added_arrow;
 	nds_val	                pvalues[9], prot_flags[1];
-	char                    string_buffer[9][1024];
 	guint8                  nds_version = 0;
 	guint32                 foffset = 0;
-	nw_uni_t                req_buffer;
 	char                    global_object_name[256];
 	guint32                 global_eid=0;
 	gboolean                resolve_eid=FALSE;
@@ -9338,13 +9355,11 @@
 		pvalues[i].voffset = 0;
 		pvalues[i].hfname = 0;
 		pvalues[i].vdesc = "";
-		string_buffer[i][0] = '\0';
-		pvalues[i].vstring = string_buffer[i];
+		pvalues[i].vstring = NULL;
 		pvalues[i].mvtype = 0;
 		pvalues[i].vflags = 0;
 	}
 
-        req_buffer.buffer[0] = '\0';
         global_object_name[0] = '\0';
 
         func = tvb_get_guint8(tvb, 6);
@@ -9448,9 +9463,8 @@
                                         }
                                         pvalues[3].voffset = foffset+4;
                                         foffset = foffset + 4;
-                                        get_string(tvb, pvalues[3].voffset, pvalues[3].vlength, req_buffer.buffer);
-                                        pvalues[3].vstring = req_buffer.buffer;
-                                        g_strlcpy(global_object_name, req_buffer.buffer, 256);
+                                        pvalues[3].vstring = get_string(tvb, pvalues[3].voffset, pvalues[3].vlength);
+                                        g_strlcpy(global_object_name, pvalues[3].vstring, 256);
                                         pvalues[3].hfname= hf_nds_name;
                                         foffset = foffset+pvalues[3].vlength;
                                         foffset += align_4(tvb, foffset);
@@ -9517,8 +9531,7 @@
                                         pvalues[7].vlength = tvb_get_letohl(tvb, foffset);
                                         pvalues[7].voffset = foffset+4;
                                         foffset = foffset + 4;
-                                        get_string(tvb, pvalues[7].voffset, pvalues[7].vlength, req_buffer.buffer);
-                                        pvalues[7].vstring = req_buffer.buffer;
+                                        pvalues[7].vstring = get_string(tvb, pvalues[7].voffset, pvalues[7].vlength);
                                         pvalues[7].hfname= hf_nds_output_delimiter;
                                         foffset = foffset+pvalues[7].vlength;
                                         foffset += align_4(tvb, foffset);
@@ -9898,6 +9911,11 @@
                                 pvalues[0].voffset = foffset;
                                 pvalues[0].hfname= hf_nds_ver;
                                 foffset = foffset+pvalues[0].vlength;
+                                if (pvalues[0].vvalue == 1) {
+                                    /* Version 1 specifies for this offset value to always be a value of 1*/
+                                    /* No need to display to user */
+                                    foffset += 4; 
+                                }
                                 pvalues[1].vvalue = tvb_get_letohl(tvb, foffset);
                                 pvalues[1].vtype = VTYPE_UINT32;
                                 pvalues[1].vdesc = "Entry ID: 0x%08x";
@@ -9921,9 +9939,8 @@
                                 }
                                 pvalues[2].voffset = foffset+4;
                                 foffset = foffset + 4;
-                                get_string(tvb, pvalues[2].voffset, pvalues[2].vlength, req_buffer.buffer);
-                                pvalues[2].vstring = req_buffer.buffer;
-                                g_strlcpy(global_object_name, req_buffer.buffer, 256);
+                                pvalues[2].vstring = get_string(tvb, pvalues[2].voffset, pvalues[2].vlength);
+                                g_strlcpy(global_object_name, pvalues[2].vstring, 256);
                                 pvalues[2].hfname= hf_nds_name;
                                 foffset = foffset+pvalues[2].vlength;
                                 foffset += align_4(tvb, foffset);
@@ -9936,7 +9953,7 @@
                                 pvalues[3].vlength = tvb_get_letohl(tvb, foffset);
                                 pvalues[3].voffset = foffset+4;
                                 foffset = foffset + 4;
-                                get_string(tvb, pvalues[3].voffset, pvalues[3].vlength, pvalues[3].vstring);
+                                pvalues[3].vstring = get_string(tvb, pvalues[3].voffset, pvalues[3].vlength);
                                 pvalues[3].hfname= hf_value_string;
                                 foffset = foffset+pvalues[3].vlength;
                                 break;
@@ -10089,7 +10106,7 @@
                                 pvalues[6].vlength = tvb_get_letohl(tvb, foffset);
                                 pvalues[6].voffset = foffset+4;
                                 foffset = foffset + 4;
-                                get_string(tvb, pvalues[6].voffset, pvalues[6].vlength, pvalues[6].vstring);
+                                pvalues[6].vstring = get_string(tvb, pvalues[6].voffset, pvalues[6].vlength);
                                 pvalues[6].hfname= hf_nds_name_filter;
                                 foffset = foffset+pvalues[6].vlength;
                                 if(pvalues[0].vvalue == 0)
@@ -10105,7 +10122,7 @@
                                 pvalues[7].vlength = tvb_get_letohl(tvb, foffset);
                                 pvalues[7].voffset = foffset+4;
                                 foffset = foffset + 4;
-                                get_string(tvb, pvalues[7].voffset, pvalues[7].vlength, pvalues[7].vstring);
+                                pvalues[7].vstring = get_string(tvb, pvalues[7].voffset, pvalues[7].vlength);
                                 pvalues[7].hfname= hf_nds_class_filter;
                                 foffset = foffset+pvalues[7].vlength;
                                 if(pvalues[0].vvalue == 1)
@@ -10340,9 +10357,8 @@
                                         }
                                         pvalues[3].voffset = foffset+4;
                                         foffset = foffset + 4;
-                                        get_string(tvb, pvalues[3].voffset, pvalues[3].vlength, req_buffer.buffer);
-                                        pvalues[3].vstring = req_buffer.buffer;
-                                        g_strlcpy(global_object_name, req_buffer.buffer, 256);
+                                        pvalues[3].vstring = get_string(tvb, pvalues[3].voffset, pvalues[3].vlength);
+                                        g_strlcpy(global_object_name, pvalues[3].vstring, 256);
                                         pvalues[3].hfname= hf_nds_relative_dn;
                                         foffset = foffset+pvalues[3].vlength;
                                         foffset += align_4(tvb, foffset);
@@ -10389,9 +10405,8 @@
                                         }
                                         pvalues[4].voffset = foffset+4;
                                         foffset = foffset + 4;
-                                        get_string(tvb, pvalues[4].voffset, pvalues[4].vlength, req_buffer.buffer);
-                                        pvalues[4].vstring = req_buffer.buffer;
-                                        g_strlcpy(global_object_name, req_buffer.buffer, 256);
+                                        pvalues[4].vstring = get_string(tvb, pvalues[4].voffset, pvalues[4].vlength);
+                                        g_strlcpy(global_object_name, pvalues[4].vstring, 256);
                                         pvalues[4].hfname= hf_nds_relative_dn;
                                         foffset = foffset+pvalues[4].vlength;
                                         foffset += align_4(tvb, foffset);
@@ -10532,7 +10547,7 @@
                                 pvalues[3].vlength = tvb_get_letohl(tvb, foffset);
                                 pvalues[3].voffset = foffset+4;
                                 foffset = foffset + 4;
-                                get_string(tvb, pvalues[3].voffset, pvalues[3].vlength, pvalues[3].vstring);
+                                pvalues[3].vstring = get_string(tvb, pvalues[3].voffset, pvalues[3].vlength);
                                 pvalues[3].hfname= hf_nds_new_rdn;
                                 foffset = foffset+pvalues[3].vlength;
                                 break;
@@ -10597,9 +10612,8 @@
                                 }
                                 pvalues[2].voffset = foffset+4;
                                 foffset = foffset + 4;
-                                get_string(tvb, pvalues[2].voffset, pvalues[2].vlength, req_buffer.buffer);
-                                pvalues[2].vstring = req_buffer.buffer;
-                                g_strlcpy(global_object_name, req_buffer.buffer, 256);
+                                pvalues[2].vstring = get_string(tvb, pvalues[2].voffset, pvalues[2].vlength);
+                                g_strlcpy(global_object_name, pvalues[2].vstring, 256);
                                 pvalues[2].hfname= hf_nds_name;
                                 foffset = foffset+pvalues[2].vlength;
                                 foffset += align_4(tvb, foffset);
@@ -10662,9 +10676,8 @@
                                 }
                                 pvalues[1].voffset = foffset+4;
                                 foffset = foffset + 4;
-                                get_string(tvb, pvalues[1].voffset, pvalues[1].vlength, req_buffer.buffer);
-                                pvalues[1].vstring = req_buffer.buffer;
-                                g_strlcpy(global_object_name, req_buffer.buffer, 256);
+                                pvalues[1].vstring = get_string(tvb, pvalues[1].voffset, pvalues[1].vlength);
+                                g_strlcpy(global_object_name, pvalues[1].vstring, 256);
                                 pvalues[1].hfname= hf_nds_attribute_dn;
                                 break;
                         case 0x0e:
@@ -10719,7 +10732,7 @@
                                 foffset += align_4(tvb, foffset);
                                 pvalues[4].vvalue = tvb_get_letohl(tvb, foffset);
                                 pvalues[4].vtype = VTYPE_MULTIVALUE_UINT32;
-                                pvalues[4].vdesc = "Classes: %d";
+                                pvalues[4].vdesc = "Classes: %u";
                                 pvalues[4].vlength = 4;
                                 pvalues[4].voffset = foffset;
                                 pvalues[4].mvtype = MVTYPE_READ_CLASS_REQ;
@@ -10746,9 +10759,8 @@
                                 }
                                 pvalues[1].voffset = foffset+4;
                                 foffset = foffset + 4;
-                                get_string(tvb, pvalues[1].voffset, pvalues[1].vlength, req_buffer.buffer);
-                                pvalues[1].vstring = req_buffer.buffer;
-                                g_strlcpy(global_object_name, req_buffer.buffer, 256);
+                                pvalues[1].vstring = get_string(tvb, pvalues[1].voffset, pvalues[1].vlength);
+                                g_strlcpy(global_object_name, pvalues[1].vstring, 256);
                                 pvalues[1].hfname= hf_nds_base_class;
                                 foffset = foffset+pvalues[1].vlength;
                                 foffset += align_4(tvb, foffset);
@@ -10781,9 +10793,8 @@
                                 }
                                 pvalues[1].voffset = foffset+4;
                                 foffset = foffset + 4;
-                                get_string(tvb, pvalues[1].voffset, pvalues[1].vlength, req_buffer.buffer);
-                                pvalues[1].vstring = req_buffer.buffer;
-                                g_strlcpy(global_object_name, req_buffer.buffer, 256);
+                                pvalues[1].vstring = get_string(tvb, pvalues[1].voffset, pvalues[1].vlength);
+                                g_strlcpy(global_object_name, pvalues[1].vstring, 256);
                                 pvalues[1].hfname= hf_nds_base;
                                 break;
                         case 0x12:
@@ -10841,8 +10852,7 @@
                                 }
                                 pvalues[2].voffset = foffset+4;
                                 foffset = foffset + 4;
-                                get_string(tvb, pvalues[2].voffset, pvalues[2].vlength, req_buffer.buffer);
-                                pvalues[2].vstring = req_buffer.buffer;
+                                pvalues[2].vstring = get_string(tvb, pvalues[2].voffset, pvalues[2].vlength);
                                 pvalues[2].hfname= hf_nds_name;
                                 foffset = foffset+pvalues[2].vlength;
                                 foffset += align_4(tvb, foffset);
@@ -10859,7 +10869,7 @@
                                 }
                                 pvalues[3].voffset = foffset+4;
                                 foffset = foffset + 4;
-                                get_string(tvb, pvalues[3].voffset, pvalues[3].vlength, pvalues[3].vstring);
+                                pvalues[3].vstring = get_string(tvb, pvalues[3].voffset, pvalues[3].vlength);
                                 pvalues[3].hfname= hf_nds_name;
                                 foffset = foffset+pvalues[3].vlength;
                                 foffset += align_4(tvb, foffset);
@@ -10878,7 +10888,7 @@
                                         }
                                         pvalues[4].voffset = foffset+4;
                                         foffset = foffset + 4;
-                                        get_string(tvb, pvalues[4].voffset, pvalues[4].vlength, pvalues[4].vstring);
+                                        pvalues[4].vstring = get_string(tvb, pvalues[4].voffset, pvalues[4].vlength);
                                         pvalues[4].hfname= hf_nds_name;
                                         foffset = foffset+pvalues[4].vlength;
                                         foffset += align_4(tvb, foffset);
@@ -11134,7 +11144,7 @@
                                 }
                                 pvalues[4].voffset = foffset+4;
                                 foffset = foffset + 4;
-                                get_string(tvb, pvalues[4].voffset, pvalues[4].vlength, pvalues[4].vstring);
+                                pvalues[4].vstring = get_string(tvb, pvalues[4].voffset, pvalues[4].vlength);
                                 pvalues[4].hfname= hf_nds_target_name;
                                 break;
                         case 0x1a:
@@ -11177,7 +11187,7 @@
                                 }
                                 pvalues[3].voffset = foffset+4;
                                 foffset += 4;
-                                get_string(tvb, pvalues[3].voffset, pvalues[3].vlength, pvalues[3].vstring);
+                                pvalues[3].vstring = get_string(tvb, pvalues[3].voffset, pvalues[3].vlength);
                                 foffset += pvalues[3].vlength;
                                 foffset += align_4(tvb, foffset);
                                 pvalues[3].hfname= hf_nds_stream_name;
@@ -11249,7 +11259,7 @@
                                         }
                                         pvalues[3].voffset = foffset+4;
                                         foffset += 4;
-                                        get_string(tvb, pvalues[3].voffset, pvalues[3].vlength, pvalues[3].vstring);
+                                        pvalues[3].vstring = get_string(tvb, pvalues[3].voffset, pvalues[3].vlength);
                                         foffset += pvalues[3].vlength;
                                         foffset += align_4(tvb, foffset);
                                         pvalues[3].hfname= hf_nds_root_name;
@@ -11312,7 +11322,7 @@
                                 pvalues[3].vlength = tvb_get_letohl(tvb, foffset);
                                 pvalues[3].voffset = foffset+4;
                                 foffset = foffset + 4;
-                                get_string(tvb, pvalues[3].voffset, pvalues[3].vlength, pvalues[3].vstring);
+                                pvalues[3].vstring = get_string(tvb, pvalues[3].voffset, pvalues[3].vlength);
                                 pvalues[3].hfname= hf_nds_new_rdn;
                                 foffset = foffset+pvalues[3].vlength;
                                 foffset += align_4(tvb, foffset);
@@ -11329,7 +11339,7 @@
                                 }
                                 pvalues[4].voffset = foffset+4;
                                 foffset = foffset + 4;
-                                get_string(tvb, pvalues[4].voffset, pvalues[4].vlength, pvalues[4].vstring);
+                                pvalues[4].vstring = get_string(tvb, pvalues[4].voffset, pvalues[4].vlength);
                                 pvalues[4].hfname= hf_nds_target_name;
                                 break;
                         case 0x2b:
@@ -11375,7 +11385,7 @@
                                 pvalues[4].vlength = tvb_get_letohl(tvb, foffset);
                                 pvalues[4].voffset = foffset+4;
                                 foffset = foffset + 4;
-                                get_string(tvb, pvalues[4].voffset, pvalues[4].vlength, pvalues[4].vstring);
+                                pvalues[4].vstring = get_string(tvb, pvalues[4].voffset, pvalues[4].vlength);
                                 pvalues[4].hfname= hf_nds_new_rdn;
                                 foffset = foffset+pvalues[4].vlength;
                                 foffset += align_4(tvb, foffset);
@@ -11392,7 +11402,7 @@
                                 }
                                 pvalues[5].voffset = foffset+4;
                                 foffset = foffset + 4;
-                                get_string(tvb, pvalues[5].voffset, pvalues[5].vlength, pvalues[5].vstring);
+                                pvalues[5].vstring = get_string(tvb, pvalues[5].voffset, pvalues[5].vlength);
                                 pvalues[5].hfname= hf_nds_target_name;
                                 break;
                         case 0x2c:
@@ -11711,7 +11721,7 @@
         	if (ncp_rec) {
               		col_set_str(pinfo->cinfo, COL_PROTOCOL, "NDS");
                         if (nds_frag != 0xffffffff) {
-                                col_add_fstr(pinfo->cinfo, COL_INFO, "C Continue NDS Fragment %08x", nds_frag);
+                                col_add_fstr(pinfo->cinfo, COL_INFO, "C Continue NDS Fragment 0x%08x", nds_frag);
                         }
                         else {
                        		col_add_fstr(pinfo->cinfo, COL_INFO, "C NDS %s", verb_string);
@@ -11880,13 +11890,13 @@
 
 						case VTYPE_UINT8:
 							proto_tree_add_uint_format(ncp_tree, pvalues[i].hfname, tvb, pvalues[i].voffset,
-							    pvalues[i].vlength, pvalues[i].vtype, "NDS Parameter not defined %d",
+							    pvalues[i].vlength, pvalues[i].vtype, "NDS Parameter not defined %u",
 							    pvalues[i].vtype);
 							break;
 
 						case VTYPE_UINT16:
 							proto_tree_add_uint_format(ncp_tree, pvalues[i].hfname, tvb, pvalues[i].voffset,
-							    pvalues[i].vlength, pvalues[i].vtype, "NDS Parameter not defined %d",
+							    pvalues[i].vlength, pvalues[i].vtype, "NDS Parameter not defined %u",
 							    pvalues[i].vtype);
 							break;
 
@@ -11963,8 +11973,8 @@
 							    pvalues[i].vtype);
 							break;
 						}
-                                                /* For NDS requests with just an EID, resolve name from hash table. */
                                         }
+                                        /* For NDS requests with just an EID, resolve name from hash table. */
                                         request_eid_value = ncp_eid_hash_lookup(conversation, global_eid);
                                         if(resolve_eid) {
                                                 if (request_eid_value) {
@@ -12019,7 +12029,6 @@
         guint32                 nds_flags;
         guint32                 ping_version;
 	nds_val			pvalue;
-	char			string_buffer[1024];
 
 #ifdef FAKE_TREE_IS_VISIBLE
     if (ncp_tree) {
@@ -12032,8 +12041,7 @@
 	pvalue.voffset = 0;
 	pvalue.hfname = 0;
 	pvalue.vdesc = "";
-	string_buffer[0] = '\0';
-	pvalue.vstring = string_buffer;
+	pvalue.vstring = NULL;
 	pvalue.mvtype = 0;
 
 	func = tvb_get_guint8(tvb, 6);
@@ -12124,6 +12132,8 @@
 			length_remaining = tvb_reported_length_remaining(tvb, 8);
 
 			if (length_remaining >= 8) {
+				proto_item *pi;
+
                                 ping_version = tvb_get_letohl(tvb, 8);
 				proto_tree_add_uint(ncp_tree, hf_nds_ping_version, tvb, 8,
 				    4, ping_version);
@@ -12132,9 +12142,9 @@
                     request_value->nds_request_verb = 0xf0;
                     request_value->req_nds_flags = nds_flags;
                 }
-                    proto_tree_add_uint_hidden(ncp_tree, hf_ncp_nds_verb, tvb, 0, 0,
-                        240);
 
+				pi = proto_tree_add_uint(ncp_tree, hf_ncp_nds_verb, tvb, 0, 0, 240);
+				PROTO_ITEM_SET_HIDDEN(pi);
 
                                 pvalue.vvalue = tvb_get_letohs(tvb, 12);
                                 pvalue.vtype = VTYPE_BITFIELD;
@@ -12237,3 +12247,4 @@
 		CLEANUP_CALL_AND_POP;
 	}
 }
+

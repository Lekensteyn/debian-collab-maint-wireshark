#! /bin/sh /usr/share/dpatch/dpatch-run
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Backport security fixes from 1.0.15 Balint Reczey <balint@balintreczey.hu>

@DPATCH@diff -urN wireshark-1.0.14/epan/dissectors/packet-ber.c wireshark-1.0.15/epan/dissectors/packet-ber.c
--- wireshark-1.0.14/epan/dissectors/packet-ber.c	2010-06-08 11:47:12.000000000 -0700
+++ wireshark-1.0.15/epan/dissectors/packet-ber.c	2010-07-28 19:11:08.000000000 -0700
@@ -762,20 +762,32 @@
  * an indefinite length and haven't reached EOC.
  */
 /* 8.1.3 Length octets */
-static gboolean
-try_get_ber_length(tvbuff_t *tvb, int *bl_offset, guint32 *length, gboolean *ind) {
-	int offset = *bl_offset;
+
+/*
+ * Set a limit on recursion so we don't blow away the stack. Another approach
+ * would be to remove recursion completely but then we'd exhaust CPU+memory
+ * trying to read a hellabyte of nested indefinite lengths.
+ * XXX - Max nesting in the ASN.1 plugin is 32. Should they match?
+ */
+#define BER_MAX_INDEFINITE_NESTING 500
+static int
+try_get_ber_length(tvbuff_t *tvb, int offset, guint32 *length, gboolean *ind, gint nest_level) {
 	guint8 oct, len;
-	guint32 tmp_len; 
+	guint32 indef_len;
 	guint32 tmp_length;
 	gboolean tmp_ind;
-	int tmp_offset;
+	int tmp_offset,s_offset;
 	gint8 tclass;
+	gboolean tpc;
 	gint32 ttag;
-
 	tmp_length = 0;
 	tmp_ind = FALSE;
 
+	if (nest_level > BER_MAX_INDEFINITE_NESTING) {
+		/* Assume that we have a malformed packet. */
+		THROW(ReportedBoundsError);
+	}
+
 	oct = tvb_get_guint8(tvb, offset);
 	offset += 1;
 
@@ -794,21 +806,24 @@
 		} else {
 			/* 8.1.3.6 */
 
-			/* indefinite length encoded - must be constructed */
 			tmp_offset = offset;
-
-			do {
-				tmp_offset = get_ber_identifier(tvb, tmp_offset, &tclass, NULL, &ttag);
-				
-				try_get_ber_length(tvb, &tmp_offset, &tmp_len, &tmp_ind);
-
-				tmp_offset += tmp_len;
-
-			} while (!((tclass == BER_CLASS_UNI) && (ttag == 0) && (tmp_len == 0))); 
-
-			tmp_length = tmp_offset - offset;
+			/* ok in here we can traverse the BER to find the length, this will fix most indefinite length issues */
+			/* Assumption here is that indefinite length is always used on constructed types*/
+			/* check for EOC */
+			while (tvb_get_guint8(tvb, offset) || tvb_get_guint8(tvb, offset+1)) {
+				/* not an EOC at offset */
+				s_offset=offset;
+				offset= get_ber_identifier(tvb, offset, &tclass, &tpc, &ttag);
+				offset= try_get_ber_length(tvb,offset, &indef_len, NULL, nest_level+1);
+				tmp_length += indef_len+(offset-s_offset); /* length + tag and length */
+				offset += indef_len;
+                                /* Make sure we've moved forward in the packet */
+				if (offset <= s_offset)
+					THROW(ReportedBoundsError);
+			}
+			tmp_length += 2;
 			tmp_ind = TRUE;
-
+			offset = tmp_offset;
 		}
 	}
 
@@ -821,22 +836,13 @@
 printf("get BER length %d, offset %d (remaining %d)\n", tmp_length, offset, tvb_length_remaining(tvb, offset));
 #endif
 
-	*bl_offset = offset;
-	return TRUE;
+	return offset;
 }
 
 int
-get_ber_length(tvbuff_t *tvb, int offset, guint32 *length, gboolean *ind) 
+get_ber_length(tvbuff_t *tvb, int offset, guint32 *length, gboolean *ind)
 {
-	int bl_offset = offset;
-	guint32 bl_length;
-
-	try_get_ber_length(tvb, &bl_offset, &bl_length, ind);
-
-	if (length)
-		*length = bl_length;
-
-	return bl_offset;
+	return try_get_ber_length(tvb, offset, length, ind, 1);
 }
 
 /* this function dissects the length octets of the BER TLV.
diff -urN wireshark-1.0.14/epan/sigcomp_state_hdlr.c wireshark-1.0.15/epan/sigcomp_state_hdlr.c
--- wireshark-1.0.14/epan/sigcomp_state_hdlr.c	2010-06-08 11:47:15.000000000 -0700
+++ wireshark-1.0.15/epan/sigcomp_state_hdlr.c	2010-07-28 19:11:20.000000000 -0700
@@ -411,6 +411,7 @@
 	/*
 	 * Debug 	g_warning("Sigcomp init: Storing partial state =%s",partial_state_str);
 	 */
+	memset(sip_sdp_buff, 0, 8);
 	i = 0;
 	while ( i < SIP_SDP_STATE_LENGTH ){
 		sip_sdp_buff[i+8] = sip_sdp_static_dictionaty_for_sigcomp[i];
diff -urN wireshark-1.0.14/epan/sigcomp-udvm.c wireshark-1.0.15/epan/sigcomp-udvm.c
--- wireshark-1.0.14/epan/sigcomp-udvm.c	2010-06-08 11:47:15.000000000 -0700
+++ wireshark-1.0.15/epan/sigcomp-udvm.c	2010-07-28 19:11:20.000000000 -0700
@@ -339,7 +339,7 @@
 		goto decompression_failure;
 	}
 	used_udvm_cycles++;
-	current_instruction = buff[current_address];
+	current_instruction = buff[current_address & 0xffff];
 
 	switch ( current_instruction ) {
 	case SIGCOMP_INSTR_DECOMPRESSION_FAILURE:
@@ -401,7 +401,7 @@
 		lsb = result & 0xff;
 		msb = result >> 8;
 		buff[result_dest] = msb;
-		buff[result_dest+1] = lsb;
+		buff[(result_dest+1) & 0xffff] = lsb;
 		if (print_level_1 ){
 			proto_tree_add_text(udvm_tree, bytecode_tvb, 0, -1,"     Loading result %u at %u",
 				result, result_dest);
@@ -442,7 +442,7 @@
 		lsb = result & 0xff;
 		msb = result >> 8;
 		buff[result_dest] = msb;
-		buff[result_dest+1] = lsb;
+		buff[(result_dest+1) & 0xffff] = lsb;
 		if (print_level_1 ){
 			proto_tree_add_text(udvm_tree, bytecode_tvb, 0, -1,"     Loading result %u at %u",
 				result, result_dest);
@@ -476,7 +476,7 @@
 		lsb = result & 0xff;
 		msb = result >> 8;
 		buff[result_dest] = msb;
-		buff[result_dest+1] = lsb;
+		buff[(result_dest+1) & 0xffff] = lsb;
 		if (print_level_1 ){
 			proto_tree_add_text(udvm_tree, bytecode_tvb, 0, -1,"     Loading result %u at %u",
 				result, result_dest);
@@ -516,7 +516,7 @@
 		lsb = result & 0xff;
 		msb = result >> 8;
 		buff[result_dest] = msb;
-		buff[result_dest+1] = lsb;
+		buff[(result_dest+1) & 0xffff] = lsb;
 		if (print_level_1 ){
 			proto_tree_add_text(udvm_tree, bytecode_tvb, 0, -1,"     Loading result %u at %u",
 				result, result_dest);
@@ -556,7 +556,7 @@
 		lsb = result & 0xff;
 		msb = result >> 8;
 		buff[result_dest] = msb;
-		buff[result_dest+1] = lsb;
+		buff[(result_dest+1) & 0xffff] = lsb;
 		if (print_level_1 ){
 			proto_tree_add_text(udvm_tree, bytecode_tvb, 0, -1,"     Loading result %u at %u",
 				result, result_dest);
@@ -595,7 +595,7 @@
 		lsb = result & 0xff;
 		msb = result >> 8;
 		buff[result_dest] = msb;
-		buff[result_dest+1] = lsb;
+		buff[(result_dest+1) & 0xffff] = lsb;
 		if (print_level_1 ){
 			proto_tree_add_text(udvm_tree, bytecode_tvb, 0, -1,"               Loading result %u at %u",
 				result, result_dest);
@@ -634,7 +634,7 @@
 		lsb = result & 0xff;
 		msb = result >> 8;
 		buff[result_dest] = msb;
-		buff[result_dest+1] = lsb;
+		buff[(result_dest+1) & 0xffff] = lsb;
 		if (print_level_1 ){
 			proto_tree_add_text(udvm_tree, bytecode_tvb, 0, -1,"               Loading result %u at %u",
 				result, result_dest);
@@ -681,7 +681,7 @@
 		lsb = result & 0xff;
 		msb = result >> 8;
 		buff[result_dest] = msb;
-		buff[result_dest+1] = lsb;
+		buff[(result_dest+1) & 0xffff] = lsb;
 		if (print_level_1 ){
 			proto_tree_add_text(udvm_tree, bytecode_tvb, 0, -1,"     Loading result %u at %u",
 				result, result_dest);
@@ -730,7 +730,7 @@
 		lsb = result & 0xff;
 		msb = result >> 8;
 		buff[result_dest] = msb;
-		buff[result_dest+1] = lsb;
+		buff[(result_dest+1) & 0xffff] = lsb;
 		if (print_level_1 ){
 			proto_tree_add_text(udvm_tree, bytecode_tvb, 0, -1,"     Loading result %u at %u",
 				result, result_dest);
@@ -779,7 +779,7 @@
 		lsb = result & 0xff;
 		msb = result >> 8;
 		buff[result_dest] = msb;
-		buff[result_dest+1] = lsb;
+		buff[(result_dest+1) & 0xffff] = lsb;
 		if (print_level_1 ){
 			proto_tree_add_text(udvm_tree, bytecode_tvb, 0, -1,"     Loading result %u at %u",
 				result, result_dest);
@@ -932,7 +932,7 @@
 		msb = value >> 8;
 
 		buff[address] = msb;
-		buff[address + 1] = lsb;
+		buff[(address + 1) & 0xffff] = lsb;
 
 		if (print_level_1 ){
 			proto_tree_add_text(udvm_tree, bytecode_tvb, 0, -1,"Addr: %u      Value %u",
@@ -989,7 +989,7 @@
 				goto decompression_failure;
 
 			buff[address] = msb;
-			buff[address + 1] = lsb;
+			buff[(address + 1) & 0xffff] = lsb;
 			/* debug
 			*/
 			length = next_operand_address - operand_address;
@@ -1281,7 +1281,7 @@
 			}
 		}
 		buff[result_dest] = k >> 8;
-		buff[result_dest + 1] = k & 0x00ff;
+		buff[(result_dest + 1) & 0xffff] = k & 0x00ff;
 
 		used_udvm_cycles = used_udvm_cycles + length;
 		goto execute_next_instruction;
@@ -2031,7 +2031,7 @@
 		if (destination >= UDVM_MEMORY_SIZE - 1)
 			goto decompression_failure;
 		buff[destination] = msb;
-		buff[destination + 1]=lsb;
+		buff[(destination + 1) & 0xffff]=lsb;
 		if (print_level_1 ){
 			proto_tree_add_text(udvm_tree, message_tvb, input_address, 1,
 			"               Loading value: %u (0x%x) at Addr: %u, remaining_bits: %u", value, value, destination, remaining_bits);
@@ -2216,7 +2216,7 @@
 					if (destination >= UDVM_MEMORY_SIZE - 1)
 						goto decompression_failure;
 					buff[destination] = msb;
-					buff[destination + 1]=lsb;
+					buff[(destination + 1) & 0xffff]=lsb;
 					if (print_level_1 ){
 						proto_tree_add_text(udvm_tree, message_tvb, input_address, 1,
 					"               Loading H: %u (0x%x) at Addr: %u,j = %u remaining_bits: %u",
@@ -2792,7 +2792,7 @@
 			 */
 			temp_data = buff[operand_address] & 0x1f;
 			operand = temp_data << 8;
-			temp_data = buff[operand_address + 1];
+			temp_data = buff[(operand_address + 1) & 0xffff];
 			operand = operand | temp_data;
 			*value = operand;
 			offset = offset + 2;
@@ -2804,7 +2804,7 @@
 			offset ++;
 			temp_data = buff[operand_address] & 0x1f;
 			operand = temp_data << 8;
-			temp_data = buff[operand_address + 1];
+			temp_data = buff[(operand_address + 1) & 0xffff];
 			operand = operand | temp_data;
 			*value = operand;
 			offset = offset + 2;
@@ -2857,12 +2857,12 @@
 			 */
 			temp_data = buff[operand_address] & 0x3f;
 			operand = temp_data << 8;
-			temp_data = buff[operand_address + 1];
+			temp_data = buff[(operand_address + 1) & 0xffff];
 			operand = operand | temp_data;
 			operand = (operand * 2);
 			*result_dest = operand;
 			temp_data16 = buff[operand] << 8;
-			temp_data16 = temp_data16 | buff[operand+1];
+			temp_data16 = temp_data16 | buff[(operand+1) & 0xffff];
 			*value = temp_data16;
 			offset = offset + 2;
 
@@ -2872,10 +2872,10 @@
 			 */
 			operand_address++;
 			operand = buff[operand_address] << 8;
-			operand = operand | buff[operand_address + 1];
+			operand = operand | buff[(operand_address + 1) & 0xffff];
 			*result_dest = operand;
 			temp_data16 = buff[operand] << 8;
-			temp_data16 = temp_data16 | buff[operand+1];
+			temp_data16 = temp_data16 | buff[(operand+1) & 0xffff];
 			*value = temp_data16;
 			offset = offset + 3;
 
@@ -2888,7 +2888,7 @@
 		operand = (operand * 2);
 		*result_dest = operand;
 		temp_data16 = buff[operand] << 8;
-		temp_data16 = temp_data16 | buff[operand+1];
+		temp_data16 = temp_data16 | buff[(operand+1) & 0xffff];
 		*value = temp_data16;
 		offset ++;
 	}
@@ -2925,6 +2925,8 @@
 	guint16 temp_data16;
 	guint16 memmory_addr = 0;
 
+*value = 0;
+
 	bytecode = buff[operand_address];
 	test_bits = ( bytecode & 0xc0 ) >> 6;
 	switch (test_bits ){
@@ -2945,7 +2947,7 @@
 		 */
 		memmory_addr = ( bytecode & 0x3f) * 2;
 		temp_data16 = buff[memmory_addr] << 8;
-		temp_data16 = temp_data16 | buff[memmory_addr+1];
+		temp_data16 = temp_data16 | buff[(memmory_addr+1) & 0xffff];
 		*value = temp_data16;
 		offset ++;
 		break;
@@ -2958,7 +2960,7 @@
 		 */
 			temp_data = buff[operand_address] & 0x1f;
 			operand = temp_data << 8;
-			temp_data = buff[operand_address + 1];
+			temp_data = buff[(operand_address + 1) & 0xffff];
 			operand = operand | temp_data;
 			*value = operand;
 			offset = offset + 2;
@@ -2970,7 +2972,7 @@
 		 */
 				temp_data = buff[operand_address] & 0x0f;
 				operand = temp_data << 8;
-				temp_data = buff[operand_address + 1];
+				temp_data = buff[(operand_address + 1) & 0xffff];
 				operand = operand | temp_data;
 				operand = operand + 61440;
 				*value = operand;
@@ -3002,15 +3004,15 @@
 					 * 1000 0001 nnnnnnnn nnnnnnnn      memory[N]           0 - 65535
 					 */
 						offset ++;
-						temp_data16 = buff[operand_address + 1] << 8;
-						temp_data16 = temp_data16 | buff[operand_address + 2];
+						temp_data16 = buff[(operand_address + 1) & 0xffff] << 8;
+						temp_data16 = temp_data16 | buff[(operand_address + 2) & 0xffff];
 						/*  debug
 						 * g_warning("Reading 0x%x From address %u",temp_data16,operand_address);
 						 */
 						if ( (bytecode & 0x01) == 1 ){
 							memmory_addr = temp_data16;
 							temp_data16 = buff[memmory_addr] << 8;
-							temp_data16 = temp_data16 | buff[memmory_addr+1];
+							temp_data16 = temp_data16 | buff[(memmory_addr+1) & 0xffff];
 						}
 						*value = temp_data16;
 						offset = offset +2;
@@ -3037,9 +3039,9 @@
 		 */
 			memmory_addr = buff[operand_address] & 0x1f;
 			memmory_addr = memmory_addr << 8;
-			memmory_addr = memmory_addr | buff[operand_address + 1];
+			memmory_addr = memmory_addr | buff[(operand_address + 1) & 0xffff];
 			temp_data16 = buff[memmory_addr] << 8;
-			temp_data16 = temp_data16 | buff[memmory_addr+1];
+			temp_data16 = temp_data16 | buff[(memmory_addr+1) & 0xffff];
 			*value = temp_data16;
 			/*  debug
 			 * g_warning("Reading 0x%x From address %u",temp_data16,memmory_addr);

#! /bin/sh /usr/share/dpatch/dpatch-run
## 35_security_fixes_from_1.0.10.dpatch by  <balint@balintreczey.hu>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Backport security fixes from 1.0.10

@DPATCH@

diff -urN wireshark-1.0.9/epan/dissectors/packet-dcerpc-nt.c wireshark-1.0.10/epan/dissectors/packet-dcerpc-nt.c
--- wireshark-1.0.9/epan/dissectors/packet-dcerpc-nt.c	2009-09-14 18:33:44.000000000 -0700
+++ wireshark-1.0.10/epan/dissectors/packet-dcerpc-nt.c	2009-10-26 14:09:33.000000000 -0700
@@ -39,6 +39,14 @@
 #include "packet-dcerpc-nt.h"
 #include "packet-windows-common.h"
 
+
+/* This is used to safely walk the decode tree up, one item at a time safely.
+   This is used by dcerpc dissectors that want to push the display of a string
+   higher up in the tree for greater visibility.
+*/
+#define GET_ITEM_PARENT(x) \
+	((x->parent!=NULL)?x->parent:x)
+
 /*
  * This file contains helper routines that are used by the DCERPC over SMB
  * dissectors for wireshark.
@@ -245,15 +253,15 @@
 
 	if (levels > 0 && item && s && s[0]) {
 		proto_item_append_text(item, ": %s", s);
-		item = item->parent;
+		item = GET_ITEM_PARENT(item);
 		levels--;
 		if (levels > 0) {
 			proto_item_append_text(item, ": %s", s);
-			item = item->parent;
+			item = GET_ITEM_PARENT(item);
 			levels--;
 			while (levels > 0) {
 				proto_item_append_text(item, " %s", s);
-				item = item->parent;
+				item = GET_ITEM_PARENT(item);
 				levels--;
 			}
 		}
@@ -1059,15 +1067,15 @@
 
 	if (levels > 0 && item && s && s[0]) {
 		proto_item_append_text(item, ": %s", s);
-		item = item->parent;
+		item = GET_ITEM_PARENT(item);
 		levels--;
 		if (levels > 0) {
 			proto_item_append_text(item, ": %s", s);
-			item = item->parent;
+			item = GET_ITEM_PARENT(item);
 			levels--;
 			while (levels > 0) {
 				proto_item_append_text(item, " %s", s);
-				item = item->parent;
+				item = GET_ITEM_PARENT(item);
 				levels--;
 			}
 		}
@@ -1121,18 +1129,17 @@
 	}
 
 	/* Append string to upper-level proto_items */
-
 	if (levels > 0 && item && s && s[0]) {
 		proto_item_append_text(item, ": %s", s);
-		item = item->parent;
+		item = GET_ITEM_PARENT(item);
 		levels--;
 		if (levels > 0) {
 			proto_item_append_text(item, ": %s", s);
-			item = item->parent;
+			item = GET_ITEM_PARENT(item);
 			levels--;
 			while (levels > 0) {
 				proto_item_append_text(item, " %s", s);
-				item = item->parent;
+				item = GET_ITEM_PARENT(item);
 				levels--;
 			}
 		}
@@ -1237,15 +1244,15 @@
 
 		if (levels > 0 && item && s && s[0]) {
 			proto_item_append_text(item, ": %s", s);
-			item = item->parent;
+			item = GET_ITEM_PARENT(item);
 			levels--;
 			if (levels > 0) {
 				proto_item_append_text(item, ": %s", s);
-				item = item->parent;
+				item = GET_ITEM_PARENT(item);
 				levels--;
 				while (levels > 0) {
 					proto_item_append_text(item, " %s", s);
-					item = item->parent;
+					item = GET_ITEM_PARENT(item);
 					levels--;
 				}
 			}
diff -urN wireshark-1.0.9/epan/dissectors/packet-radius.c wireshark-1.0.10/epan/dissectors/packet-radius.c
--- wireshark-1.0.9/epan/dissectors/packet-radius.c	2009-09-14 18:33:55.000000000 -0700
+++ wireshark-1.0.10/epan/dissectors/packet-radius.c	2009-10-26 14:09:44.000000000 -0700
@@ -6,7 +6,7 @@
  * Changed 07/2005 Luis Ontanon <luis.ontanon@gmail.com> - use FreeRADIUS' dictionary
  * Changed 10/2006 Alejandro Vaquero <alejandrovaquero@yahoo.com> - add Conversations support
  *
- * $Id: packet-radius.c 24533 2008-03-03 18:07:47Z jmayer $
+ * $Id: packet-radius.c 30219 2009-09-30 18:41:55Z gerald $
  *
  * Wireshark - Network traffic analyzer
  * By Gerald Combs <gerald@wireshark.org>
@@ -604,7 +604,7 @@
             item = proto_tree_add_text(tree, tvb, offset, 0,
                         "Not enough room in packet for AVP header");
             PROTO_ITEM_SET_GENERATED(item);
-            return;
+            break;  /* exit outer loop, then cleanup & return */
         }
         avp_type = tvb_get_guint8(tvb,offset);
         avp_length = tvb_get_guint8(tvb,offset+1);
@@ -613,14 +613,14 @@
             item = proto_tree_add_text(tree, tvb, offset, 0,
                         "AVP too short: length %u < 2", avp_length);
             PROTO_ITEM_SET_GENERATED(item);
-            return;
+            break;  /* exit outer loop, then cleanup & return */
         }
 
         if (length < avp_length) {
             item = proto_tree_add_text(tree, tvb, offset, 0,
                         "Not enough room in packet for AVP");
             PROTO_ITEM_SET_GENERATED(item);
-            return;
+            break;  /* exit outer loop, then cleanup & return */
         }
 
         length -= avp_length;
@@ -649,7 +649,7 @@
             if (avp_length < 4) {
                 proto_item_append_text(avp_item, " [AVP too short; no room for vendor ID]");
                 offset += avp_length;
-                continue;
+                continue; /* while (length > 0) */
             }
             vendor_id = tvb_get_ntohl(tvb,offset);
 
@@ -676,7 +676,7 @@
                 if (avp_vsa_len < 2) {
                     proto_tree_add_text(tree, tvb, offset+1, 1,
                                             "[VSA too short]");
-                    return;
+                    break; /* exit while (offset < max_offset) loop */
                 }
 
                 avp_vsa_len -= 2;
@@ -703,8 +703,8 @@
                 add_avp_to_tree(avp_tree, avp_item, pinfo, tvb, dictionary_entry, avp_vsa_len, offset);
 
                 offset += avp_vsa_len;
-            };
-            continue;
+            }; /* while (offset < max_offset) */
+            continue;  /* while (length > 0) */
         }
 
         avp_tree = proto_item_add_subtree(avp_item,dictionary_entry->ett);


#! /bin/sh /usr/share/dpatch/dpatch-run
## CVE-2008-4683 to CVE-2008-4685
##
## All lines beginning with `## DP:' are a description of the patch.

@DPATCH@
diff -aur wireshark-0.99.4.orig/epan/dissectors/packet-bthci_acl.c wireshark-0.99.4/epan/dissectors/packet-bthci_acl.c
--- wireshark-0.99.4.orig/epan/dissectors/packet-bthci_acl.c	2006-10-31 18:59:09.000000000 +0100
+++ wireshark-0.99.4/epan/dissectors/packet-bthci_acl.c	2008-11-29 10:47:43.000000000 +0100
@@ -169,7 +169,9 @@
 				mfp->first_frame=pinfo->fd->num;
 				mfp->last_frame=0;
 				mfp->tot_len=l2cap_length+4;
-				mfp->reassembled=se_alloc(l2cap_length+4);
+				mfp->reassembled=se_alloc(mfp->tot_len);
+				tvb_memcpy(tvb, (guint8*)mfp->reassembled, offset, mfp->tot_len);
+				mfp->cur_off=mfp->tot_len;
 				tvb_memcpy(tvb, mfp->reassembled, offset, tvb_length_remaining(tvb, offset));
 				mfp->cur_off=tvb_length_remaining(tvb, offset);
 				se_tree_insert32(chandle_data->start_fragments, pinfo->fd->num, mfp);
diff -aur wireshark-0.99.4.orig/epan/dissectors/packet-frame.c wireshark-0.99.4/epan/dissectors/packet-frame.c
--- wireshark-0.99.4.orig/epan/dissectors/packet-frame.c	2006-10-31 18:59:09.000000000 +0100
+++ wireshark-0.99.4/epan/dissectors/packet-frame.c	2008-11-29 10:49:17.000000000 +0100
@@ -324,7 +324,49 @@
 		pinfo->layer_names = NULL;
 	}
 
-    call_all_postdissectors(tvb,pinfo,parent_tree);
+	/*  Call postdissectors if we have any (while trying to avoid another
+	 *  TRY/CATCH)
+	 */
+	if (have_postdissector()) {
+	    TRY {
+#ifdef _MSC_VER
+	    /* Win32: Visual-C Structured Exception Handling (SEH) to trap hardware exceptions like memory access violations */
+	    /* (a running debugger will be called before the except part below) */
+	    __try {
+#endif
+		call_all_postdissectors(tvb, pinfo, parent_tree);
+#ifdef _MSC_VER
+	    } __except(TRUE /* handle all exceptions */) {
+		switch(GetExceptionCode()) {
+		case(STATUS_ACCESS_VIOLATION):
+			    show_exception(tvb, pinfo, parent_tree, DissectorError,
+			"STATUS_ACCESS_VIOLATION: dissector accessed an invalid memory address");
+		    break;
+		case(STATUS_INTEGER_DIVIDE_BY_ZERO):
+			    show_exception(tvb, pinfo, parent_tree, DissectorError,
+			"STATUS_INTEGER_DIVIDE_BY_ZERO: dissector tried an integer division by zero");
+		    break;
+		case(STATUS_STACK_OVERFLOW):
+			    show_exception(tvb, pinfo, parent_tree, DissectorError,
+			"STATUS_STACK_OVERFLOW: dissector overflowed the stack (e.g. endless loop)");
+		    /* XXX - this will have probably corrupted the stack, which makes problems later in the exception code */
+		    break;
+		/* XXX - add other hardware exception codes as required */
+		default:
+			    show_exception(tvb, pinfo, parent_tree, DissectorError,
+			g_strdup_printf("dissector caused an unknown exception: 0x%x", GetExceptionCode()));
+		}
+	    }
+#endif
+	    }
+	    CATCH(OutOfMemoryError) {
+		    RETHROW;
+	    }
+	    CATCH_ALL {
+		    show_exception(tvb, pinfo, parent_tree, EXCEPT_CODE, GET_MESSAGE);
+	    }
+	    ENDTRY;
+	}
 
 	tap_queue_packet(frame_tap, pinfo, NULL);
     
diff -aur wireshark-0.99.4.orig/epan/dissectors/packet-q931.c wireshark-0.99.4/epan/dissectors/packet-q931.c
--- wireshark-0.99.4.orig/epan/dissectors/packet-q931.c	2006-10-31 18:59:04.000000000 +0100
+++ wireshark-0.99.4/epan/dissectors/packet-q931.c	2008-11-29 10:49:45.000000000 +0100
@@ -1181,8 +1181,8 @@
 	{ 0x00, NULL }
 };
 
-void
-dissect_q931_cause_ie(tvbuff_t *tvb, int offset, int len,
+static void
+dissect_q931_cause_ie_unsafe(tvbuff_t *tvb, int offset, int len,
     proto_tree *tree, int hf_cause_value, guint8 *cause_value)
 {
 	guint8 octet;
@@ -1340,6 +1340,16 @@
 	}
 }
 
+void
+dissect_q931_cause_ie(tvbuff_t *tvb, int offset, int len,
+    proto_tree *tree, int hf_cause_value, guint8 *cause_value)
+{
+  gboolean have_valid_q931_pi_save = have_valid_q931_pi;
+  have_valid_q931_pi = FALSE;
+  dissect_q931_cause_ie_unsafe(tvb, offset, len, tree, hf_cause_value, cause_value);
+  have_valid_q931_pi =  have_valid_q931_pi_save;
+}
+
 /*
  * Dissect a Call state information element.
  */
@@ -2767,7 +2777,7 @@
 					break;
 
 				case CS0 | Q931_IE_CAUSE:
-					dissect_q931_cause_ie(tvb,
+					dissect_q931_cause_ie_unsafe(tvb,
 						offset + 2, info_element_len,
 						ie_tree,
 						hf_q931_cause_value, &dummy);
